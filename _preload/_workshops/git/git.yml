frontmatter:
  abstract: Git and GitHub are powerful tools for collaborative and individual projects.
    Git is a version control software that aids with tracking changes made to a set
    of files over time. GitHub is a web-based platform for storing and sharing project
    files online. This session begins with a conceptual overview of both tools, including
    an introduction to fundamental concepts such as version control and practical
    applications like developing a syllabus or collaborative writing. This session
    then covers initializing Git repositories, committing changes, pushing to GitHub,
    cloning repositories to your local machine, and forking repositories from other
    accounts on GitHub.
  contributors:
  - collaboration:
      current: true
      role: Au
      workshop: git
    first_name: Kristen
    last_name: Hackett
    url: https://github.com/hackettka
  - collaboration:
      current: false
      role: Au
      workshop: git
    first_name: Patrick
    last_name: Sweeney
    url: https://github.com/pswee001
  - collaboration:
      current: false
      role: Au
      workshop: git
    first_name: Jojo
    last_name: Karlin
    url: https://github.com/jojokarlin/
  - collaboration:
      current: false
      role: Au
      workshop: git
    first_name: Jennifer
    last_name: Tang
    url: https://github.com/jentang/
  - collaboration:
      current: false
      role: Au
      workshop: git
    first_name: Stephen
    last_name: Zweibel
    url: https://github.com/szweibel
  - collaboration:
      current: false
      role: Au
      workshop: git
    first_name: Mary Catherine
    last_name: McKinniburgh
    url: https://github.com/mckinniburgh
  - collaboration:
      current: false
      role: Re
      workshop: git
    first_name: Param
    last_name: Ajmera
    url: https://github.com/paramajmera
  - collaboration:
      current: false
      role: Re
      workshop: git
    first_name: Rafael
    last_name: Davis Portela
    url: https://github.com/rafadavis
  - collaboration:
      current: true
      role: Ed
      workshop: git
    first_name: Lisa
    last_name: Rhody
    url: https://github.com/lmrhody
  - collaboration:
      current: true
      role: Ed
      workshop: git
    first_name: Kalle
    last_name: Westerling
    url: https://github.com/kallewesterling
  estimated_time: '4'
  ethical_considerations:
  - <p>Within the nebulous open-source ecosystem, GitHub is an important place for
    storing and finding code. What if your open source code was used by an entity
    or for a purpose that did not agree with your ethics? For example, the platform
    received backlash from employees of GitHub and users of the platform when it was
    revealed that they held a contract with ICE. In this case, neither group wanted
    their code shared and used by ICE in detaining and deporting immigrants. <a href="https://www.theatlantic.com/technology/archive/2020/01/ice-contract-github-sparks-developer-protests/604339/"
    rel="nofollow">Read more here.</a></p>
  learning_objectives:
  - <p>Learn what Git, GitHub and Markdown are, how do they differ, and how they can
    be integrated to support your scholarly work</p>
  - <p>Learn what version control is and why it can be useful</p>
  - <p>Review basic Command line functions</p>
  - <p>Install and configure Git on your local machine (<code>git--version</code>,
    <code>git--config</code>)</p>
  - <p>Practice using basic markdown by creating a syllabus using a plain text editor
    (including headers, lists, bold, and emphasis)</p>
  - <p>Stage and commit changes using Git (<code>git status</code>, <code>git add</code>,
    <code>git commit -m</code>, and <code>git log</code>)</p>
  - <p>Pushing a repository with Git and files to GitHub (<code>git push origin master</code>)</p>
  - <p>Cloning an existing repository from GitHub to your local machine so you can
    work with it (<code>git clone</code>)</p>
  prerequisites:
  - full_text: '[Introduction to the Command Line](https://www.github.com/DHRI-Curriculum/command-line)
      (required)'
    potential_name: Introduction to the Command Line
    recommended: false
    required: true
    type: workshop
  - full_text: '[Visual Studio Code](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md)
      (recommended) You can use any plain text editor but for our purposes, Visual
      Studio Code ("VS Code") will be used.'
    potential_slug_fragment: visual-studio-code
    potential_software: Visual Studio Code
    recommended: true
    required: false
    type: install
  projects:
  - annotation: '[GCDI''s Digital Research Institute](https://github.com/DHRI-Curriculum)
      has been improved and built out over time using GitHub to store and track multiple
      projects that use the same base of repositories, and new versions.'
    title: GCDI's Digital Research Institute
    url: https://github.com/DHRI-Curriculum
  - annotation: "\"F-ing Algorithm\" project uses Git and GitHub to create multiple\
      \ versions of their project in different languages\u2014([Chinese](https://github.com/labuladong/fucking-algorithm)\
      \ and [English](https://github.com/labuladong/fucking-algorithm/tree/english)),\
      \ and to create a [GitBook](https://labuladong.gitbook.io/algo-en/i.-dynamic-programming/analysisofdynamicprogramming)\
      \ for sharing their work."
    title: Chinese
    url: https://github.com/labuladong/fucking-algorithm
  - annotation: "Here are two examples of using Git and GitHub for teaching\u2014\
      [a syllabus using a GitHub repo](https://github.com/quinnanya/dlcl204) and [a\
      \ syllabus using a repo and GitPages](https://digitalhistory.github.io/)."
    title: a syllabus using a GitHub repo
    url: https://github.com/quinnanya/dlcl204
  - annotation: '[Fake New Corpus](https://github.com/several27/FakeNewsCorpus), an
      open source dataset composed of millions of news articles mainly intended for
      use in training deep learning algorithms for purpose of fake news recognition.
      The dataset is still work in progress and for now, the public version includes
      only 9,408,908 articles.'
    title: Fake New Corpus
    url: https://github.com/several27/FakeNewsCorpus
  - annotation: '[C+=](https://github.com/TheFeministSoftwareFoundation/C-plus-Equality),
      a feminist programming language, created by The Feminist Software Foundation
      to smash the toxic Patriarchy that is inherent in and that permeates all current
      computer programming languages.'
    title: C+=
    url: https://github.com/TheFeministSoftwareFoundation/C-plus-Equality
  - annotation: '[Leaflet](https://github.com/Leaflet/Leaflet), an open-source Javascript
      library for building mobile-friendly interactive maps.'
    title: Leaflet
    url: https://github.com/Leaflet/Leaflet
  readings:
  - annotation: Bryan, J. (2017). [_Excuse me, do you have a moment to talk about
      version control?_](https://doi.org/10.7287/peerj.preprints.3159v2) PeerJ Preprints.
    title: _Excuse me, do you have a moment to talk about version control?_
    url: https://doi.org/10.7287/peerj.preprints.3159v2
  - annotation: Ovadia, S. (2014). [_Markdown for Librarians and Academics_](https://academicworks.cuny.edu/lg_pubs/7/).
      Behavioral and Social Sciences Librarian, 33, 120-124.
    title: _Markdown for Librarians and Academics_
    url: https://academicworks.cuny.edu/lg_pubs/7
  - annotation: 'Shaffer, K. (June 4, 2013). [_GitHub for Academics: The open-source
      way to host, create and curate knowledge_](https://blogs.lse.ac.uk/impactofsocialsciences/2013/06/04/github-for-academics/)
      LSE Blog.'
    title: '_GitHub for Academics: The open-source way to host, create and curate
      knowledge_'
    url: https://blogs.lse.ac.uk/impactofsocialsciences/2013/06/04/github-for-academics
  - annotation: Begemann, O. (2016). [_Collaborative Writing on GitHub_](https://oleb.net/blog/2016/02/collaborative-writing-on-github/).
    title: _Collaborative Writing on GitHub_
    url: https://oleb.net/blog/2016/02/collaborative-writing-on-github
  - annotation: '[_How Digital Humanists Use GitHub_](https://digitalscholarship.wordpress.com/2016/07/20/presentation-on-how-digital-humanists-use-github/):
      A presentation from Lisa Spiro and Sean Morey-Smith on their study of how Digital
      Humanists use GitHub.'
    title: _How Digital Humanists Use GitHub_
    url: https://digitalscholarship.wordpress.com/2016/07/20/presentation-on-how-digital-humanists-use-github
  resources:
  - full_text: '[Create a GitHub account](https://github.com/join).'
    title: Create a GitHub account
    type: external_link
    url: https://github.com/join
  - full_text: '[Git/GitHub Cheatsheet](https://github.com/DHRI-Curriculum/git/raw/v2.0/files/git-cheat-sheet.pdf)'
    title: Git/GitHub Cheatsheet
    type: internal_download
    url: https://github.com/DHRI-Curriculum/git/raw/v2.0/files/git-cheat-sheet.pdf
  - full_text: '[Markdown Cheatsheet](https://www.markdownguide.org/cheat-sheet)'
    title: Markdown Cheatsheet
    type: external_link
    url: https://www.markdownguide.org/cheat-sheet
lessons:
- challenge: ''
  keywords:
  - Git
  - GitHub
  - Markdown
  - Version Control
  order: 1
  questions:
  - answers:
      correct:
      - the practice of tracking and organizing the state of a file over time, as
        it changes
      incorrect:
      - a software installed on my local machine
      - a language for formatting plain text files
      - a web-based plaform for storing and sharing files
      - a language that can be read and rendered by some web-based platforms
      - a version control software
      - a cloud-based software
      - refers to project folders as "repositories"
    question: 'Which of the following best describes <em>version control</em>:'
  - answers:
      correct:
      - a software installed on my local machine
      - a version control software
      - refers to project folders as "repositories"
      incorrect:
      - a language for formatting plain text files
      - the practice of tracking and organizing the state of a file over time, as
        it changes
      - a web-based plaform for storing and sharing files
      - a language that can be read and rendered by some web-based platforms
      - a cloud-based software
    question: 'Which of the following best describe Git:'
  - answers:
      correct:
      - a web-based plaform for storing and sharing files
      - a cloud-based software
      - refers to project folders as "repositories"
      incorrect:
      - a software installed on my local machine
      - a language for formatting plain text files
      - the practice of tracking and organizing the state of a file over time, as
        it changes
      - a language that can be read and rendered by some web-based platforms
      - a version control software
    question: 'Which best describes GitHub:'
  - answers:
      correct:
      - a language for formatting plain text files
      - a language that can be read and rendered by some web-based platforms
      incorrect:
      - a software installed on my local machine
      - the practice of tracking and organizing the state of a file over time, as
        it changes
      - a web-based plaform for storing and sharing files
      - a version control software
      - a cloud-based software
      - refers to project folders as "repositories"
    question: 'Which best describes Markdown:'
  solution: ''
  text: "<p><strong>Git</strong> is software used for version control\u2014that is,\
    \ tracking the state of files and changes you make to them over time. Git can\
    \ be enabled in a folder, and then used to save the state of the contents in that\
    \ folder at different points in the future, as designated by you. In the language\
    \ of Git, a folder is called a <em>repository</em>. In the context of this workshop,\
    \ it refers to a folder that is being tracked by Git. Using Git, you can view\
    \ a log of the changes you've made to the files in a repository and compare changes\
    \ over time. You can also revert back to previous versions, and create \"branches\"\
    \ of a project to explore different futures. Git is also useful for collaboration,\
    \ as a repository can be shared across computers, and its contents can be asynchonously\
    \ developed and eventually merged with the main project.</p>\n<p><strong>GitHub</strong>\
    \ is a online platform for hosting Git repositories. It functions for some, predominantly\
    \ programmers, as a social network for sharing and collaborating on code-based\
    \ projects. Users can share their own projects, as well as search for others,\
    \ which they can then often work on and contribute to. Digital Humanists, librarians,\
    \ and other academics are also finding ways Git and GitHub are useful in writing\
    \ projects and teaching. GitHub also serves as a web-hosting platform, allowing\
    \ users to create websites from their repositories.</p>\n<p><strong>Markdown</strong>\
    \ is a markup language for formatting text. Like HTML, you add markers to plain\
    \ text to style and organize the text of a document.</p>\n<p>In HTML:</p>\n<div\
    \ class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-kos\">&lt;</span><span\
    \ class=\"pl-ent\">h1</span><span class=\"pl-kos\">&gt;</span>Heading 1<span class=\"\
    pl-kos\">&lt;/</span><span class=\"pl-ent\">h1</span><span class=\"pl-kos\">&gt;</span></pre></div>\n\
    <p>In Markdown:</p>\n<div class=\"highlight highlight-source-gfm\"><pre><span\
    \ class=\"pl-mh\"><span class=\"pl-mh\">#</span><span class=\"pl-mh\"> </span>Heading\
    \ 1</span></pre></div>\n<p>Whereas you use HTML and CSS with WordPress, you use\
    \ Markdown to render legible documents on GitHub. Markdown has fewer options for\
    \ marking text than HTML. It was designed to be easier to write and edit.</p>\n\
    <p>The lessons of this workshop were originally written in markdown. You can see\
    \ <a href=\"https://raw.githubusercontent.com/DHRI-Curriculum/git/v2.0/lessons.md\"\
    \ rel=\"nofollow\" target=\"_blank\">here</a> what they look like in their raw,\
    \ unrendered form.</p>\n<p>Compare that with this\u2014the source code for this\
    \ lesson's web page, written in HTML here.</p>\n<p>Markdown is also arguably more\
    \ sustainable and accessible than formats like <code>.docx</code> because of its\
    \ simplicity and related ability to be read across multiple platforms. Use of\
    \ Markdown is also supported by document-conversion tools like <a href=\"https://pandoc.org/\"\
    \ rel=\"nofollow\" target=\"_blank\">Pandoc</a> that can change a markdown file\
    \ to an <code>.epub</code> with one command entered into your terminal.</p>\n\
    <h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"#highlighting-distinctions\"\
    \ id=\"user-content-highlighting-distinctions\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>Highlighting Distinctions</h2>\n<p>As we move\
    \ forward its important to make sure we're firm on the distinctions between the\
    \ three different tools outlined above.</p>\n<p><strong>Git</strong> is a software\
    \ that you use on your laptop, or your local computer/machine. The repository\
    \ with your project's files is stored on your hard drive. You also edit the text\
    \ files on your local machine using a plain text editor, which is another software\
    \ on your local computer like Visual Studio Code.</p>\n<p><strong>GitHub</strong>\
    \ is a cloud-based platform that you access through your internet browser. Even\
    \ though you physically are still in the same place, working on your laptop, you\
    \ are no longer working on your local machine, you are on the Internet. This is\
    \ a fundamentally different location than when you're working with your Git repository\
    \ and editing and creating files in your plain text editor. With GitHub, you are\
    \ uploading your repository\u2014as described above\u2014from your local machine\
    \ to this platform on the Internet to be shared more broadly. You can also create\
    \ private repositories if you want to use GitHub to backup a project.</p>\n<p><strong>Markdown</strong>\
    \ is the language used to render plain text files in your Git-enabled repository\
    \ with markup on GitHub. When you view your file on the platform, <code># headers</code>\
    \ are rendered as HTML-formatted headers, links are inserted, etc.</p>"
  title: What are Git, GitHub and Markdown?
  workshop: git
- challenge: ''
  keywords:
  - Version Control
  - Branch
  order: 2
  questions:
  - answers:
      correct:
      - Developing software
      - Creating and sharing data sets
      - Creating websites
      - Writing articles and books
      - Collating online resources
      - Keeping research notes
      - Hosting syllabi and course materials
      incorrect: []
    question: What tasks could Git and/or GitHub offer support to?
  solution: ''
  text: "<p>A <a href=\"https://digitalscholarship.files.wordpress.com/2016/07/spirosmithdh2016githubpresentationfinal.pdf\"\
    \ rel=\"nofollow\" target=\"_blank\">study of how Digital Humanists use GitHub</a>,\
    \ conducted by Lisa Spiro and Sean Morey Smith, found that a wide range of users,\
    \ including professors, research staff, graduate students, IT staff, and librarians\
    \ commonly used the site in their DH work. They used GitHub for a diverse range\
    \ of activities, such as:</p>\n<ul>\n<li>Developing software</li>\n<li>Sharing\
    \ data sets</li>\n<li>Creating websites</li>\n<li>Writing articles and books</li>\n\
    <li>Collating online resources</li>\n<li>Keeping research notes</li>\n<li>Hosting\
    \ syllabi and course materials</li>\n</ul>\n<h2>\n<a aria-hidden=\"true\" class=\"\
    anchor\" href=\"#why-use-github\" id=\"user-content-why-use-github\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Why Use GitHub?</h2>\n<p>Participants\
    \ in the study said they found GitHub useful in their Digital Humanities work\
    \ for several reasons. In particular, it facilitated:</p>\n<ul>\n<li>Sharing and\
    \ backing up files on multiple computers</li>\n<li>Monitoring changes effectively</li>\n\
    <li>Recovering from bugs or errors by going back in time before the error arose</li>\n\
    <li>Using different branches for experiments and new directions</li>\n<li>Sharing\
    \ and managing files with others\u2014seeing who added what content and when</li>\n\
    </ul>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"#how-we-use-github\"\
    \ id=\"user-content-how-we-use-github\"><span aria-hidden=\"true\" class=\"octicon\
    \ octicon-link\"></span></a>How We Use GitHub</h2>\n<h3>\n<a aria-hidden=\"true\"\
    \ class=\"anchor\" href=\"#sharing-and-attribution\" id=\"user-content-sharing-and-attribution\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Sharing\
    \ and Attribution</h3>\n<p>As you can see across these sessions, we use GitHub\
    \ to host workshop curricula. Hosting sessions on GitHub allows you (and anyone\
    \ else interested in these topics!) to follow our repositories, and create your\
    \ own version of the workshop based on our materials. This fosters open scholarship\
    \ and knowledge sharing. It also facilitates attribution and citation by clearly\
    \ tracking which content was created by whom, when it was added, and which projects\
    \ or materials are derived from others.</p>\n<p><strong>Case One: This Session</strong></p>\n\
    <p>If you <a href=\"https://github.com/DHRI-Curriculum/git\">go this to workshop\
    \ on GitHub</a> and look at the top of the page just under the workshop title,\
    \ <code>DHRI-Curriculum/git</code>, you can see it is <code>forked from pswee001/Git_DRI_Jan_2018</code>\
    \ (next to the red star). That line shows that this particular repository is building\
    \ on (<em>\"forked from\"</em>) the curriculum for a session presented at our\
    \ January 2018 Institute by \"pswee\" (former Graduate Center Digital Fellow Patrick\
    \ Sweeney). If you then look at that repository, you will see that it is in turn\
    \ forked from previous sessions that were developed by other GC Digital Fellows\
    \ for workshops in past years.</p>\n<p><a href=\"/static/website/images/lessons/git/attribution.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image of what attribution\
    \ looks like in GitHub\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/git/attribution.png\"\
    \ style=\"max-width:100%;\"/></a></p>\n<p><em>Forking</em> is a proper function\
    \ of the GitHub platform. It supports collaboration by allowing you to copy someone\
    \ else's repository to your own account on GitHub while maintaining a trail of\
    \ attribution and derivation. This function is described in further detail in\
    \ the final lesson of this workshop.</p>\n<h3>\n<a aria-hidden=\"true\" class=\"\
    anchor\" href=\"#collaborative-writing\" id=\"user-content-collaborative-writing\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Collaborative\
    \ Writing</h3>\n<p>Git is also used to track changes (<em>version control</em>\
    \ in Git parlance) in writing projects, especially when there are multiple authors\
    \ working asynchronously. It can be an alternative to using track changes in Microsoft\
    \ Word, or comments and edits in a Google Doc.</p>\n<p><strong>Case Two: Coauthored\
    \ Publications</strong></p>\n<p>Git and GitHub\u2014together or independently\u2014\
    support multi-author publishing. Like we have done with the DHRI curriculum, you\
    \ can have a shared project folder that multiple people are working from asynchronously,\
    \ even on the same parts if they wanted, and then those different offshoots can\
    \ be carefully folded back into the main project. This entails the process of\
    \ creating <em>branches</em> and <em>merging</em>.</p>\n<p>Git and GitHub also\
    \ help with attribution by tracking individual contributions throughout. Additional\
    \ branches could be created by a singular author as well, allowing the writer\
    \ to explore different ways forward. The version control feature also allows authors\
    \ to easily return to and compare older drafts or retrieve sections previoulsy\
    \ discarded.</p>\n<p><em>Branches</em> and <em>merging</em> are important functions\
    \ when using Git to collaborate, but they are also advanced and thus beyond the\
    \ scope of this workshop. See the <em>Resources</em> section at the end of the\
    \ workshop for more information.</p>\n<h3>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#versions-across-time\" id=\"user-content-versions-across-time\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Versions Across\
    \ Time</h3>\n<p>How did you initially come by the syllabus you use for your class(es),\
    \ and did you develop it over time? Many professors borrow and adapt from each\
    \ other, and most of us probably update our syllabi each semester, even if only\
    \ a little bit.</p>\n<p>Through this process, many of us end up with a set of\
    \ files that looks something like this:</p>\n<p><a href=\"/static/website/images/lessons/git/messy-file-structure.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Example of a messy\
    \ folder structure with many files named similarly\" class=\"img-fluid d-block\
    \ my-4\" src=\"/static/website/images/lessons/git/messy-file-structure.png\" style=\"\
    max-width:100%;\"/></a></p>\n<p>While I probably can tell which version is the\
    \ \"final\" one, I can not see what was changed along the way or how the different\
    \ versions vary from each other.</p>\n<p>With Git, you would save these multiple\
    \ versions over time as one file, and each version you save includes a note about\
    \ what has changed so you can easily revert back to an older version if needed.</p>\n\
    <p>By looking at the file list, you also can not tell who the syllabus originally\
    \ came from, or if there were contributions from many individuals. Git and GitHub\
    \ can help make attribution clear, and maintain it over time as a the syllabus\
    \ travels between hands.</p>\n<p><strong>Case Three: Syllabi</strong></p>\n<p>Increasingly\
    \ we see that faculty are sharing their syllabi on GitHub (example: <a href=\"\
    https://github.com/quinnanya/dlcl204\" target=\"_blank\">DLCL 204: Digital Humanities\
    \ Across Borders</a>). Some are even using GitPages that apply a user-friendly\
    \ interface to their repository to make it easier to access and navigate for their\
    \ students (example: <a href=\"https://digitalhistory.github.io/\" rel=\"nofollow\"\
    \ target=\"_blank\">Digital History</a>).</p>\n<p>GitHub offers a way of making\
    \ a course publicly avaiable on the web, and sometimes easier or more intuitive\
    \ to users than some learning management systems. Git helps track the changes\
    \ over time.</p>\n<p>When the softwares are used together, Git and GitHub also\
    \ support a collaborative appraoch to syllabi development. Copying another's project\
    \ and modifying and remixing the content to meet your needs is a seamless and\
    \ transparent process. Attribution of specific changes over time is a foundational\
    \ function of how Git operates; GitHub explicitly renders attribution, making\
    \ it easy to see who(s) did what. This is one of the attractions of using the\
    \ platform.</p>\n<p>In a practical sense, you could search other syllabi on GitHub,\
    \ and share yours so it could be searched by others. If someone finds a syllabus\
    \ that includes parts they want to use, they could fork that syllabi to their\
    \ GitHub account, and download\u2014or <em>clone</em> as Git calls it\u2014the\
    \ files to your local machine and edit them there. Any changes could then be <em>pushed</em>\
    \ back to the repository on GitHub, thereby sharing your amendments publicly.\
    \ On GitHub, attribution of who contributed what are transparent. Meanwhile, your\
    \ amended version would be available for others to fork and clone and amend and\
    \ re-share.</p>\n<p>Even if you were only working with your own self-created syllabus,\
    \ like we'll do later in this workshop, Git and GitHub can be useful for tracking\
    \ your changes without the hassle of multiple files. From one file, you can use\
    \ Git to compare your current version with older versions; you can also compare\
    \ and share these different versions on GitHub if you wanted.</p>\n<p><em>Cloning</em>\
    \ and <em>pushing</em> are proper functionalities of GitHub that describe how\
    \ you communicate and share files between your local machine and the Internet.\
    \ These are covered more in-depth in a later lesson in this workshop.</p>"
  title: What You Can Do with Git and GitHub
  workshop: git
- challenge: ''
  keywords: []
  order: 3
  questions:
  - answers:
      correct:
      - on my local machine
      incorrect:
      - on the internet
    question: 'Which best describes where you are working when you''re writing Markdown
      in your plain text editor:'
  - answers:
      correct:
      - on my local machine
      incorrect:
      - on the internet
    question: 'Which best describes where you are working when you''re using your
      terminal to communicate with GitHub and share the files:'
  - answers:
      correct:
      - on my local machine
      - on the internet
      incorrect: []
    question: 'Which best describes where you are working when you are viewing your
      files in GitHub:'
  - answers:
      correct:
      - a specific folder on my local machine is being tracked
      incorrect:
      - none of the files on my local machine are being tracked
      - a specific file on my local machine is being tracked
      - all the files on my local machine are being tracked
    question: Git-enabled repository it means
  - answers:
      correct:
      - <code>mkdir</code>
      incorrect:
      - <code>pwd</code>
      - <code>cd</code>
    question: Which command do you use to make a new folder?
  - answers:
      correct:
      - <code>cd</code>
      incorrect:
      - <code>pwd</code>
      - <code>mkdir</code>
    question: Which command do you use to enter into a folder?
  - answers:
      correct:
      - <code>pwd</code>
      incorrect:
      - <code>cd</code>
      - <code>mkdir</code>
    question: Which command do you use to check where you are?
  solution: ''
  text: "<p>During this workshop, you'll be communicating with GitHub from your local\
    \ computer via the command line (the Terminal or the Git Bash on Windows). This\
    \ section reviews some of the basic commands that will also be used in this workshop.</p>\n\
    <p>In addition to the command line, you'll be using your text editor and your\
    \ browser. Before continuing, its important that we clearly distinguish between\
    \ these three different spaces or environments:</p>\n<ul>\n<li>Your plain text\
    \ editor where you'll be writing your syllabus in Markdown is on your local computer.</li>\n\
    <li>That syllabus is intiailly saved in a git-enabled repository on your local\
    \ computer.</li>\n<li>Your browser is where you'll be uploading your repository\
    \ to GitHub, a cloud service.</li>\n<li>Your terminal is where you'll be communicating\
    \ with GitHub to send the repository and project files back and forth between\
    \ the cloud (which you can view through the GitHub website) and your hard drive.</li>\n\
    </ul>\n<p>Because you'll be moving between these three spaces throughout the workshop,\
    \ you may want to use (<kbd>command (\u2318)</kbd> + <kbd>tab</kbd>) or (<kbd>control</kbd>\
    \ + <kbd>tab</kbd>) to move quickly between the three windows on your desktop.</p>\n\
    <h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"#accessing-the-terminal\"\
    \ id=\"user-content-accessing-the-terminal\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>Accessing the Terminal</h2>\n<h3>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#macos\" id=\"user-content-macos\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>macOS</h3>\n<p>Hold the <kbd>command\
    \ (\u2318)</kbd> key and press the <kbd>space</kbd> bar at the same time to bring\
    \ up the \"Spotlight Search\" window. Type <code>terminal</code>, followed by\
    \ <kbd>enter</kbd> to quickly open the Terminal.</p>\n<h3>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#windows\" id=\"user-content-windows\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Windows</h3>\n<p>Press the <kbd>windows</kbd>\
    \ button on your keyboard. When the search menu pops up, type <code>git bash</code>\
    \ and press <kbd>enter</kbd>.</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#practice-navigating-the-command-line\" id=\"user-content-practice-navigating-the-command-line\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Practice\
    \ Navigating the Command Line</h2>\n<p>If you don't feel comfortable navigating\
    \ your hard drive through the command line, here is a short section catching you\
    \ up. <em>If you feel fairly comfortable using the command line, you can skip\
    \ this section, and go straight to the next one.</em></p>\n<p>You can create the\
    \ folder anywhere on your hard drive by typing the following into your terminal\
    \ and hitting <kbd>enter</kbd>.</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\"><span class=\"pl-c1\">cd</span> <span class=\"pl-k\"\
    >&lt;</span>directory-name<span class=\"pl-k\">&gt;</span></span></pre></div>\n\
    <p>Let's practice this command by using it to take us to our Desktop. Type the\
    \ following command into your terminal and hit <kbd>enter</kbd>.</p>\n<div class=\"\
    highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"><span class=\"\
    pl-c1\">cd</span> Desktop</span></pre></div>\n<p>This will change your current\
    \ working directory from <code>/Users/&lt;your-name&gt;</code> to <code>/Users/&lt;your-name&gt;/Desktop</code>.</p>\n\
    <p>Check your current directory by typing the following command into your terminal\
    \ and hit <kbd>enter</kbd>:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\"><span class=\"pl-c1\">pwd</span></span></pre></div>\n\
    <p>Now, use the following command to go up one directory:</p>\n<div class=\"highlight\
    \ highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"><span class=\"pl-c1\"\
    >cd</span> ..</span></pre></div>\n<p>Check your current directory again using\
    \ the following command. You should be back in your \"home\" directory:</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    ><span class=\"pl-c1\">pwd</span></span></pre></div>\n<p>Practice going back and\
    \ forth between your Desktop and your home directory.</p>\n<p>When finished, go\
    \ to your Desktop folder and check that you're there with <code>pwd</code>.</p>\n\
    <h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"#making-a-projects-folder\"\
    \ id=\"user-content-making-a-projects-folder\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>Making a Projects Folder</h2>\n<p>In this session,\
    \ we will be making a syllabus and using Git to keep track of our revisions. Let's\
    \ create a Git project folder.</p>\n<p>If you've worked through the command line\
    \ session, you should already have a <code>projects</code> folder on your desktop.\
    \ <em>If you don't have a projects folder on your desktop, create one using the\
    \ following command</em>:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\">mkdir projects</span></pre></div>\n<p>From <code>Desktop</code>,\
    \ Navigate into your <code>projects</code> folder using the following command:</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    ><span class=\"pl-c1\">cd</span> projects</span></pre></div>\n<p>Then create a\
    \ <code>git-practice</code> folder with the following command:</p>\n<div class=\"\
    highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">mkdir git-practice</span></pre></div>\n\
    <p>Navigate into the new <code>git-practice</code> folder using the following\
    \ command:</p>\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span\
    \ class=\"pl-s1\"><span class=\"pl-c1\">cd</span> git-practice</span></pre></div>\n\
    <p>At this point, when you type <code>pwd</code>, your folder structure should\
    \ look like this:</p>\n<div class=\"highlight highlight-text-shell-session\"><pre>$\
    \ <span class=\"pl-s1\"><span class=\"pl-c1\">pwd</span></span>\n<span class=\"\
    pl-c1\">/home/&lt;username&gt;/Desktop/projects/git-practice</span></pre></div>"
  title: Review of the Command Line
  workshop: git
- challenge: ''
  keywords: []
  order: 4
  questions:
  - answers:
      correct:
      - You are introducing yourself to the software, so it knows who you are.
      incorrect:
      - You are creating a new version of the software on your local machine.
      - You are sending files from your local machnine to GitHub?
      - You are creating a new version of a project folder on your local machine.
    question: What are you doing when you set up git?
  solution: ''
  text: '<p>Through this section, you''ll be checking your installation and configuring
    Git with your own name and information.</p>

    <h2>

    <a aria-hidden="true" class="anchor" href="#check-your-installation" id="user-content-check-your-installation"><span
    aria-hidden="true" class="octicon octicon-link"></span></a>Check Your Installation</h2>

    <p>First, let''s make sure Git has been successfully installed. In your terminal,
    type the following command:</p>

    <div class="highlight highlight-text-shell-session"><pre>$ <span class="pl-s1">git
    --version</span></pre></div>

    <p>If you see a version number, you''re all set. If not, follow the installation
    instructions <a href="/installations/git-and-git-bash-windows/">here</a>.</p>

    <h2>

    <a aria-hidden="true" class="anchor" href="#configuring-git-on-your-computer"
    id="user-content-configuring-git-on-your-computer"><span aria-hidden="true" class="octicon
    octicon-link"></span></a>Configuring Git on Your Computer</h2>

    <p>Our first step in working with Git is letting the software know who we are
    so it can track our work and attribute our contributions. This information is
    useful because it connects identifying information with the changes you make in
    your repository.</p>

    <p>Type the following <em>two commands</em> into your command line, replacing
    the "John Doe" and "<a href="mailto:johndoe@example.com">johndoe@example.com</a>"
    with your name and email (use quotations where you see them). These do not necessarily
    need to be the name and email you used to sign up for GitHub. Remember, these
    are different spaces and different softwares.</p>

    <div class="highlight highlight-text-shell-session"><pre>$ <span class="pl-s1">git
    config --global user.name <span class="pl-s"><span class="pl-pds">"</span>John
    Doe<span class="pl-pds">"</span></span></span>

    $ <span class="pl-s1">git config --global user.email johndoe@example.com</span></pre></div>

    <p>To check your set-up, type the following command into your terminal:</p>

    <div class="highlight highlight-text-shell-session"><pre>$ <span class="pl-s1">git
    config --list</span></pre></div>

    <p>You should get something that looks like this except with whatever information
    you entered previously:</p>

    <pre><code>user.name=Superstar Git User

    user.email=gitsuperstar@gmail.com

    </code></pre>'
  title: Setting Up Git
  workshop: git
- challenge: ''
  keywords: []
  order: 5
  questions: []
  solution: ''
  text: "<p>The next step is to <em>initialize</em> the project folder that we want\
    \ Git to track. When we initialize a folder, we are telling Git to pay attention\
    \ to it. This only needs to happen once because what is actually happening through\
    \ this process is Git is adding a hidden subfolder within your folder that houses\
    \ the internal data structure required for version control.</p>\n<p>First, use\
    \ <code>cd</code>, navigate to the <code>git-practice</code> folder (inside <code>projects</code>).\
    \ From your home directory, you can do all of them in one command by typing the\
    \ following into your terminal:</p>\n<pre lang=\"console\"><code>$ cd Desktop/projects/git-practice\n\
    </code></pre>\n<p>Next we're going to <em>initialize</em> our repository using\
    \ the <code>git init</code> command, which should generate the following output:</p>\n\
    <pre lang=\"console\"><code>$ git init\nInitialized empty Git repository in /home/&lt;your-username&gt;/projects/git/.git/\n\
    </code></pre>\n<p>Now Git is tracking our directory. However, it has not done\
    \ any versioning yet. This is because 1) we haven't told Git to take a snapshot\
    \ yet, and 2) there are no files in the folder to take a snapshot of. For now,\
    \ Git knows this folder exists and is prepared to take a snapshot of the files\
    \ when you tell it to.</p>\n<p>Before version control is useful, we'll have to\
    \ create a text file for Git to track. For this session, the file we will track\
    \ will be a course syllabus\u2014we'll create that next.</p>\n<h3>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#creating-a-syllabus-in-markdown\" id=\"user-content-creating-a-syllabus-in-markdown\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Creating\
    \ a Syllabus in Markdown</h3>\n<p>To create a plain text file, we're going to\
    \ switch to our text editor, Visual Studio Code, to create and edit a file named\
    \ <code>syllabus.md</code> and save it to our <code>git-practice</code> folder.</p>\n\
    <p>If you have not installed Visual Studio Code, review <a href=\"/installations/microsoft-visual-studio-code-windows/\"\
    >the installation instructions here</a>.</p>\n<p>In terminal, check to make sure\
    \ you are in your <code>git-practice</code> folder. (<em>Hint</em>: use <code>pwd</code>\
    \ to see what directory you are currently in.)</p>\n<p>Next, open the <code>syllabus.md</code>\
    \ file in Visual Studio Code using:</p>\n<pre lang=\"console\"><code>$ code syllabus.md\n\
    </code></pre>\n<p>You should see a window appear that looks similar to this:</p>\n\
    <p><a href=\"/static/website/images/lessons/git/vscode1.png\" rel=\"noopener noreferrer\"\
    \ target=\"_blank\"><img alt=\"Image of what Visual Studio Code looks like when\
    \ opening the syllabus.md file\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/git/vscode1.png\"\
    \ style=\"max-width:100%;\"/></a></p>\n<p>If Visual Studio Code does not open\
    \ when you use the <code>code</code> command in your terminal, open it using the\
    \ Start Menu on Windows or Spotlight Search on macOS as you would any other software.\
    \ Then click <code>File &gt; Open File</code> and use the dialog to navigate to\
    \ the <code>/Users/&lt;your-name&gt;/Desktop/projects/git</code> folder and create\
    \ a <code>syllabus.md</code> file there.</p>\n<p>We'll be typing our markdown\
    \ into this file in the Visual Studio Code window. At any time, you can save your\
    \ file by hitting <kbd>control</kbd> + <kbd>s</kbd> on Windows or <kbd>\u2318\
    </kbd> + <kbd>s</kbd> on macOS. Alternatively, you can click the <code>File</code>\
    \ menu on the top right, then select <code>Save</code> from the dropdown menu.</p>\n\
    <p>Saving frequently is advised. When we get to the version contol functionality\
    \ of Git, only changes that are saved will be preserved when a version is created.</p>"
  title: Creating a Syllabus File
  workshop: git
- challenge: "<p>Use these five elements\u2014headings, emphasis, lists, links, and\
    \ paragraphs\u2014to create a syllabus. Have a main heading that gives the course\
    \ title (one <code>#</code>), then subheadings for, at least, course info and\
    \ readings. Use emphasis (<code>*</code>) for book titles and try to get a list\
    \ in there somewhere.</p>\n<p>If you want an a more advanced challenge, you can\
    \ review some additional markdown elements on <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\"\
    >this page</a> and add some extra features like images, blockquotes, or horizontal\
    \ rules.</p>"
  keywords:
  - Markdown
  order: 6
  questions:
  - answers:
      correct:
      - You told Git to pay attention to your project folder
      - You told Git to set up its file structure within your project folder so it
        can track changes to your files.
      - You use the command <code>git init</code> in your terminal
      incorrect:
      - You created a new version of your project folder
      - You use the command <code>mkdir</code> in your terminal
    question: 'Which best describes what you''re doing when you initialize your project
      folder:'
  solution: ''
  text: "<p>We'll be using <strong>markdown</strong> to write a syllabus, and then\
    \ using <strong>Git</strong> to track any changes we make to it. Markdown allows\
    \ us to format textual features like headings, emphasis, links, and lists in a\
    \ plain text file using a streamlined set of notations that humans can interpret\
    \ without much training. Markdown files usually have a <code>.md</code> extension.</p>\n\
    <p>In markdown, we insert headings with a single hash mark like this:</p>\n<div\
    \ class=\"highlight highlight-source-gfm\"><pre><span class=\"pl-mh\"><span class=\"\
    pl-mh\">#</span><span class=\"pl-mh\"> </span>My Syllabus Heading</span></pre></div>\n\
    <p>A sub-heading (H2) heading uses two hash marks like this:</p>\n<div class=\"\
    highlight highlight-source-gfm\"><pre><span class=\"pl-mh\"><span class=\"pl-mh\"\
    >##</span><span class=\"pl-mh\"> </span>Readings</span></pre></div>\n<p>To provide\
    \ emphasis, place asterisks around some text:</p>\n<div class=\"highlight highlight-source-gfm\"\
    ><pre><span class=\"pl-mi\">*This text will appear italicized.*</span>\n<span\
    \ class=\"pl-mb\">**This text will appear bold.**</span></pre></div>\n<p>For emphasis,\
    \ you need to mark where it should start and where it should end, so you need\
    \ astrisks at the beginning and end of whatever text is being emphasized.</p>\n\
    <p>To create a bulleted list, put a hyphen at the beginning of each list item:</p>\n\
    <div class=\"highlight highlight-source-gfm\"><pre><span class=\"pl-v\">-</span>\
    \ Reading one\n<span class=\"pl-v\">-</span> Reading two\n<span class=\"pl-v\"\
    >-</span> Reading three</pre></div>\n<p>To create a link, put the anchor text\
    \ (the text you will see) in square brackets and the URL in parentheses, directly\
    \ following the anchor text in brackets. Don't put a space between them:</p>\n\
    <div class=\"highlight highlight-source-gfm\"><pre>I teach at [<span class=\"\
    pl-e\">The Graduate Center, CUNY</span>](https://www.gc.cuny.edu).</pre></div>\n\
    <p>Paragraphs of text are denoted by putting a blank line between them:</p>\n\
    <div class=\"highlight highlight-source-gfm\"><pre>This is a paragraph in markdown.\
    \ It's separated from the paragraph below with a blank line. If you know HTML,\
    \ it's kind of like the &lt;p&gt; tag. That means that there is a little space\
    \ before and after the paragraph when it is rendered.\nThis is a second paragraph\
    \ in markdown, which I'll use to tell you what I like about markdown. I like markdown\
    \ because it looks pretty good, if minimal, whether you're looking at the rendered\
    \ or unrendered version. It's like tidy HTML.</pre></div>\n<h2>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#example\" id=\"user-content-example\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Example</h2>\n<p>You can look\
    \ at an example syllabus in raw text form <a href=\"https://raw.githubusercontent.com/DHRI-Curriculum/git/main/sections/syllabus.md\"\
    \ rel=\"nofollow\" target=\"_blank\">here</a>. When it's rendered by GitHub, it\
    \ looks like <a href=\"https://github.com/DHRI-Curriculum/git/blob/main/sections/syllabus.md\"\
    >this</a>. When editing the markdown file in Visual Studio Code, it might look\
    \ like this:</p>\n<p><a href=\"/static/website/images/lessons/git/vscode2.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"What your markdown\
    \ might look like when typed into Visual Studio Code\" class=\"img-fluid d-block\
    \ my-4\" src=\"/static/website/images/lessons/git/vscode2.png\" style=\"max-width:100%;\"\
    /></a></p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"#tips\" id=\"\
    user-content-tips\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Tips</h2>\n<ol>\n<li>\n<p>Visual Studio Code also has a preview feature\
    \ for your markdown. Hit the preview button on the top right while editing your\
    \ markdown file:</p>\n<p><a href=\"/static/website/images/lessons/git/vscode3.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Button to hit to get\
    \ a preview in Visual Studio Code\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/git/vscode3.png\"\
    \ style=\"max-width:100%;\"/></a></p>\n<p>You'll get two side-by-side panels.\
    \ Your markdown file will be on the left, and your rendered preview will be on\
    \ the right:</p>\n<p><a href=\"/static/website/images/lessons/git/vscode4.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Side by side markdown\
    \ and preview in Visual Studio Code\" class=\"img-fluid d-block my-4\" src=\"\
    /static/website/images/lessons/git/vscode4.png\" style=\"max-width:100%;\"/></a></p>\n\
    </li>\n<li>\n<p>Remember to save your work\u2014regularly!\u2014with <kbd>control</kbd>\
    \ + <kbd>s</kbd> on Windows or <kbd>\u2318</kbd> + <kbd>s</kbd> on macOS.</p>\n\
    </li>\n</ol>"
  title: Creating Syllabus Content Using Markdown
  workshop: git
- challenge: ''
  keywords:
  - Commit
  order: 7
  questions:
  - answers:
      correct:
      - you telling Git which files with changes you want it to pay attention to.
      incorrect:
      - you telling Git to take a snapshot of changes made to a file.
      - you telling git to pay attention to a folder storing files you want to make
        changes to.
      - the second part of a two-step process.
    question: 'Which best describe the process of <em>staging</em>:'
  - answers:
      correct:
      - you telling Git to take a snapshot of changes made to a file.
      - the second part of a two-step process.
      incorrect:
      - you telling Git which files with changes you want it to pay attention to.
      - you telling git to pay attention to a folder storing files you want to make
        changes to.
    question: 'Which best describes the process of <em>committing</em>:'
  - answers:
      correct:
      - Git won't take a snapshot of the files.
      - You will have told Git what files you would like it to take a snapshot of.
      incorrect:
      - Git won't know what files you want to take a snapshot of
      - Git will take the snapshot of the files
    question: What happens if you <em>stage</em> the files, but don't <em>commit</em>
      them?
  - answers:
      correct:
      - Git won't know what files you want to take a snapshot of
      - Git won't take a snapshot of the files.
      - Git will take the snapshot of the files
      incorrect:
      - You will have told Git what files you would like it to take a snapshot of.
    question: What happens if you <em>commit</em> the files, but don't <em>stage</em>
      them?
  - answers:
      correct:
      - a brief description of changes you made to your file
      - future aids when you are trying to make sense of or recover changes you previously
        made to a file
      incorrect:
      - Its just something Git needs so it doesn't break
      - "It's nonsense\u2014who needs it?!"
    question: Which best describes the <code>-m</code> flag used when committing changes
      to a file?
  solution: ''
  text: "<p>Git's primary function is version control, or to track a project as it\
    \ exists at particular points in time. Now that we have a file to track\u2014\
    our <code>syllabus.md</code>\u2014let's use Git to save the current state of the\
    \ repository as it exists now.</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#a-metaphor-for-adding-and-committing\" id=\"user-content-a-metaphor-for-adding-and-committing\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>A Metaphor\
    \ for Adding and Committing</h2>\n<p>In Git, a <em>commit</em> is a snapshot of\
    \ a repository that is entered into its permanent history. To commit a change\
    \ to a repository, we take two steps:</p>\n<ol>\n<li>Adding files to a \"staging\
    \ area,\" meaning that we intend to commit them.</li>\n<li>Finalizing the commit.</li>\n\
    </ol>\n<p>Staging a file or files is you telling Git, \"Hey! Pay attention these\
    \ files and the changes in them\".</p>\n<p>Making a commit is a lot like taking\
    \ a photo. First, you have to decide who will be in the photo and arrange your\
    \ friends or family in front of the camera (the staging process). Once everyone\
    \ is present and ready, you take the picture, entering that moment into the permanent\
    \ record (the commit process).</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#staging-changes-with-the-add-command\" id=\"user-content-staging-changes-with-the-add-command\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Staging\
    \ Changes with the <code>add</code> Command</h2>\n<p>First, let's see what state\
    \ Git is currently in. It's a good idea to use this command before and after doing\
    \ anything in Git so you can always be on the same page as the computer.</p>\n\
    <p>Make sure you're in your <code>/home/&lt;your-name&gt;/Desktop/projects/git-practice</code>\
    \ directory using the <code>pwd</code> command in the terminal. Once you're there,\
    \ enter <code>git status</code> and you should see the following output:</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    >git status</span>\n<span class=\"pl-c1\">On branch main</span>\n<span class=\"\
    pl-c1\">No commits yet</span>\n<span class=\"pl-c1\">Untracked files:</span>\n\
    <span class=\"pl-c1\">\_\_(use \"git add &lt;file&gt;...\" to include in what\
    \ will be committed)</span>\n<span class=\"pl-c1\">\_\_\_\_syllabus.md</span>\n\
    <span class=\"pl-c1\">nothing added to commit but untracked files present (use\
    \ \"git add\" to track)</span></pre></div>\n<p>\"Nothing added to commit\" means\
    \ that we have initialized our repository, but haven't made any commits yet. <em>If\
    \ you're instead getting a message that begins with the word <code>fatal</code>\
    \ when you use <code>git status</code>, you may be in the wrong directory or perhaps\
    \ you haven't run the <code>git init</code> command on your directory yet.</em></p>\n\
    <p>Let's follow the recommendation in the status message above and use the <code>add</code>\
    \ command to stage files, making them ready to be committed.</p>\n<p>We will go\
    \ ahead and add <code>syllabus.md</code> by writing the following in the terminal:</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    >git add syllabus.md</span></pre></div>\n<p>You should see no output from the\
    \ command line, which should be interpreted as a the above command succeeded.\
    \ It is what we call \"succeeding silently.\" Let's run <code>git status</code>\
    \ again to have a \"sanity check\"\u2014to make sure that things have changed.\
    \ You should see output like this:</p>\n<pre><code>$ git status\nOn branch main\n\
    No commits yet\nChanges to be committed:\n\_\_(use \"git rm --cached &lt;file&gt;...\"\
    \ to unstage)\n\_\_\_\_new file:\_\_ syllabus.md\n</code></pre>\n<p>The <code>new\
    \ file:\_\_ syllabus.md</code> should be highlighted in green to show that it's\
    \ ready for commit.</p>\n<p>This is Git telling you, \"Ok, I see the file(s) you're\
    \ talking about.\"</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\" href=\"\
    #committing-changes\" id=\"user-content-committing-changes\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Committing Changes</h2>\n<p>Now\
    \ that our files have been staged, let's commit them, making them part of the\
    \ permanent record of the repository. In the terminal, type:</p>\n<div class=\"\
    highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">git commit\
    \ -m <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Initial commit of syllabus\
    \ file<span class=\"pl-pds\">\"</span></span></span></pre></div>\n<p>The <code>-m</code>\
    \ flag provides that the message following the flag (in quotation marks) along\
    \ with the commit. The message will tell others\u2014or remind a future version\
    \ of yourself\u2014what the commit was all about. Try not to type <code>git commit</code>\
    \ without the <code>-m</code> flag\u2014there's a note about this below.</p>\n\
    <p>After running the command, you should see output like this:</p>\n<pre><code>[main\
    \ (root-commit) 8bb8306] Initial commit of syllabus file\n\_\_1 file changed,\
    \ 0 insertions(+), 0 deletions(-)\n\_\_create mode 100644 syllabus.md\n</code></pre>\n\
    <p>This means you have successfully made your first commit in the repository\u2014\
    congratulations!</p>\n<p>Let's check the state of our repository after the commit\
    \ by running <code>git status</code>:</p>\n<pre><code>$ git status\nOn branch\
    \ main\nnothing to commit, working tree clean\n</code></pre>\n<p>This means that\
    \ everything in the repository is successfully committed and up-to-date. If you\
    \ edit your syllabus file or create a new file in the repository, the message\
    \ you get with <code>git status</code> will instead list files that have uncommitted\
    \ changes.</p>\n<p>Let's run one other command to see the effect our commit has\
    \ had. Enter this command:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\">git log</span></pre></div>\n<p>You should see output\
    \ similar to this:</p>\n<pre><code>commit 8bb8306c1392eed52d4407eb16867a49b49a46ac\
    \ (HEAD -&gt; main)\nAuthor: Your Name &lt;your-email-here@gmail.com&gt;\nDate:\_\
    \_ Sun May 20 16:03:39 2018 -0400\n\_\_\_\_Initial commit of syllabus file\n</code></pre>\n\
    <p>This is the log of commits, comprising a history of your repository. There's\
    \ only one commit here now, though. If you don't see a prompt (the <code>$</code>)\
    \ after running <code>git log</code>, you may need to press the <kbd>q</kbd> key\
    \ (just the <kbd>q</kbd> key by itself) to return to the command line.</p>\n<h2>\n\
    <a aria-hidden=\"true\" class=\"anchor\" href=\"#why-do-we-need-to-use-the--m-flag\"\
    \ id=\"user-content-why-do-we-need-to-use-the--m-flag\"><span aria-hidden=\"true\"\
    \ class=\"octicon octicon-link\"></span></a>Why Do We Need to Use the <code>-m</code>\
    \ Flag?</h2>\n<p>The <code>-m</code> flag is useful for human purposes and technical\
    \ purposes. For human purposes, the <code>-m</code> flag helps you keep track\
    \ of the changes you're making. Version control is most useful when you can confidently\
    \ return to a specific version. It can also help you be more structured in your\
    \ approach to making changes\u2014your notes to self are limited, so to make them\
    \ clear, you might make commits after specific tasks are completed. If you update\
    \ readings for the first week of classes or if you add another reading, you will\
    \ want to make a. This can also make it easier to reverse a specific change in\
    \ the future.</p>\n<p>Also, if you type <code>git commit</code> by itself, git\
    \ will open the command line's default text editor to allow you to enter the commit\
    \ message in a file-like environment. It looks something like this:</p>\n<p><a\
    \ href=\"/static/website/images/lessons/git/vi.png\" rel=\"noopener noreferrer\"\
    \ target=\"_blank\"><img alt=\"Example of what the vi screen looks like\" class=\"\
    img-fluid d-block my-4\" src=\"/static/website/images/lessons/git/vi.png\" style=\"\
    max-width:100%;\"/></a></p>\n<p>This unfamiliar screen is the default text editor,\
    \ <code>vi</code>, and it requires some knowledge to use. We don't teach it as\
    \ part of our sessions, but if you find yourself stuck in this screen, you can\
    \ try this trick to leave that environment and return to your usual command prompt.\
    \ Type <code>:q</code> and then press <kbd>enter</kbd>. You should be back to\
    \ the command line with a message saying:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre><span class=\"pl-c1\">Aborting commit due to empty commit message.</span></pre></div>\n\
    <p>If you make a mistake where you include an opening quotation mark but forget\
    \ a closing one, you might accidentally end up inside a \"quote prompt.\" You\
    \ will know you're there when your command prompt changes to <code>quote&gt;</code>.\
    \ If this happens, you can just keep writing as much of your commit message as\
    \ you want, and then end it with the same quotation mark that you opened the commit\
    \ message with.</p>\n<p>Another option is to press <kbd>control</kbd> + <kbd>c</kbd>\
    \ on your keyboard, which will exit the quote prompt and cancel any commits you\
    \ were trying to perform.</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#pro-tip-for-the-command-line-how-to-exit-unknown-screens\" id=\"user-content-pro-tip-for-the-command-line-how-to-exit-unknown-screens\"\
    ><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Pro-tip\
    \ for the Command Line: How to exit unknown screens</h2>\n<p>If you're ever stuck\
    \ or \"trapped\" on the command line, try running through these common exit commands\
    \ to return to the prompt:</p>\n<ul>\n<li>\n<kbd>control</kbd> + <kbd>c</kbd>\n\
    </li>\n<li>\n<kbd>control</kbd> + <kbd>d</kbd>\n</li>\n<li>\n<code>q</code> followed\
    \ by <kbd>enter</kbd>\n</li>\n<li>\n<code>:q</code> followed by <kbd>enter</kbd>\n\
    </li>\n</ul>\n<p><kbd>control</kbd> + <kbd>c</kbd> attempts to abort the current\
    \ task and restore user control. <kbd>control</kbd> + <kbd>d</kbd> escapes the\
    \ current shell environment\u2014if you use it at the normal <code>$</code> prompt,\
    \ it will end the current command line session. <code>q</code> is often used as\
    \ a command (followed by <kbd>enter</kbd>) to escape from specific programs like\
    \ <code>less</code>. <code>:q</code> is the command used in <code>vi</code> that\
    \ changes the mode of interaction (<code>:</code>), allowing you to enter the\
    \ <code>q</code>, a one-letter command to quit, which must be followed by <kbd>enter</kbd>.\
    \ Thus, it's a command specific to <code>vi</code>.</p>"
  title: Staging and Committing Changes
  workshop: git
- challenge: '<ol>

    <li>

    <p>Go through the process a few more times by adding additional readings and weeks
    of course material. Remember to commit changes intentionally so your commit messages
    make sense. Use <code>git log</code> to review your changes.</p>

    </li>

    <li>

    <p>Also try creating a new file and adding an assignment. Rewrite the assignment
    using Markdown, or edit and add in the markers. Go through the process of staging
    and commiting that file, and pushing it to your repository on GitHub.</p>

    </li>

    <li>

    <p>Test your understanding by thinking through the following questions:</p>

    </li>

    </ol>

    <ul>

    <li>Do you need to push the file to GitHub each time you commit changes to the
    file, or can you make several commits to a file and push them all to GitHub at
    once?</li>

    <li>Do you need to use <code>git init</code> after after adding a new assignment
    file to your folder?</li>

    <li>What about the <code>-u</code> flag in the <code>git push origin main</code>
    command? Does this flag need to be used to add the assignment to your repository
    on GitHub?</li>

    </ul>'
  keywords:
  - Push
  - Repository
  order: 8
  questions:
  - answers:
      correct:
      - you telling Git to take a snapshot of changes made to a file.
      - you are copying the updated files with the changes to the repository on GitHub
      - the second part of a two-step process.
      incorrect:
      - you telling Git which files with changes you want it to pay attention to.
      - you telling git to pay attention to a folder storing files you want to make
        changes to.
    question: Which best describes what you're doing when you use the command <code>git
      push</code>?
  - answers:
      correct: []
      incorrect:
      - There is no fundamental difference between these processes.
      - Staging and Committing set up the files whereas pushing is the act of taking
        the snapshot.
      - Staging and committing the files is to communicate with GitHub on the Internet,
        pushing the changes happens on your local machine.
      - Staging and committing the files happens on your local machine, pushing the
        changes is to communicate with GitHub on the Internet.
    question: How does the process of <em>pushing</em> differ from the processes of
      <em>staging</em> and <em>committing</em> discussed in the previous lesson?
  - answers:
      correct:
      - Git won't know what files you want to take a snapshot of.
      - Git won't take a snapshot of the files.
      - Your computer won't know what changes to share with GitHub.
      incorrect:
      - Git will take the snapshot of the files
      - You will have successfully created a new version of the file.
      - You will have communicated with GitHub and shared a copy of the updated files.
      - You will have communicated with GitHub to copy a set of files from their servers
        to your local machine.
    question: What happens if you use <code>git push</code> without staging and committing
      files?
  - answers:
      correct:
      - Git will take the snapshot of the files
      - You will have successfully created a new version of the file.
      incorrect:
      - Git won't know what files you want to take a snapshot of.
      - Git won't take a snapshot of the files.
      - Your computer won't know what changes to share with GitHub.
      - You will have communicated with GitHub and shared a copy of the updated files.
      - You will have communicated with GitHub to copy a set of files from their servers
        to your local machine.
    question: What happens if you <em>stage</em> and <em>commit</em> files, but not
      <em>push</em> the changes?
  solution: '<p>In response to <em>Challenge 3</em>:</p>

    <ul>

    <li>No, you don''t need to push to GitHub every time, or at all even, if you didn''t
    want to share your changes publicly. Git is the software that tracks the changes,
    and you review them on your local machine using Git as well.</li>

    <li>No, you don''t need to initialize the folder after adding a new file for an
    assignment or otherwise. In this case, we''ve already initialized the process;
    Git is tracking the folder. After the file is added, we just need to notify Git
    to take a snapshot of the additions and changes using the <code>git add</code>,
    <code>git commit</code> sequence. We can also use <code>git push</code> to share
    those changes on GitHub.</li>

    <li>No, the <code>-u</code> flag does not need to be used again. This flag is
    only necessary when setting up the original connection between the folder on your
    local machine and the folder on GitHub.</li>

    </ul>'
  text: "<p>Now, you may want to backup or share and collaborate around a file on\
    \ the Internet. Let's connect the directory you created on your local computer\
    \ to GitHub's cloud service, which you can access through the web.</p>\n<p>Remember,\
    \ GitHub is a service that allows you to host files, collaborate, and find the\
    \ work of others. Once our syllabus is on GitHub, it will be publicly visible.\
    \ (Repositories on GitHub can also be private but are public by default.)</p>\n\
    <p>Go to GitHub in your browser and click the plus sign in the upper right hand\
    \ corner.</p>\n<p><a href=\"/static/website/images/lessons/git/addrepo.png\" rel=\"\
    noopener noreferrer\" target=\"_blank\"><img alt=\"You can find the plus sign\
    \ button to add a repo on the top right of github\" class=\"img-fluid d-block\
    \ my-4\" src=\"/static/website/images/lessons/git/addrepo.png\" style=\"max-width:100%;\"\
    /></a></p>\n<p>After clicking the plus button, select <code>New repository</code>\
    \ from the dropdown menu.</p>\n<p><a href=\"/static/website/images/lessons/git/createrepo.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"The dropdown menu where\
    \ you select New Repository\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/git/createrepo.png\"\
    \ style=\"max-width:100%;\"/></a></p>\n<p>After clicking <code>New repository</code>,\
    \ you'll have to enter some information, including a name and description for\
    \ your repository.</p>\n<p><a href=\"/static/website/images/lessons/git/createrepo2.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Screen on GitHub where\
    \ you enter your repository information\" class=\"img-fluid d-block my-4\" src=\"\
    /static/website/images/lessons/git/createrepo2.png\" style=\"max-width:100%;\"\
    /></a></p>\n<ul>\n<li>Choose a name, such as <code>git-practice</code>. (This\
    \ does <em>not</em> need to match your folder name although it may be less confusing\
    \ if you choose the same name here.)</li>\n<li>Enter a description, such as <code>Test\
    \ syllabus for learning Git and GitHub</code>.</li>\n<li>Keep the <code>Public\
    \ \u2014 Anyone can see this repository</code> selector checked. (If you choose\
    \ the Private option, you will need additional steps, not covered in this workshop,\
    \ to synchronize your GitHub repository with the folder on your computer.)</li>\n\
    <li>Do <em>not</em> select <code>Initialize this repository with a README</code>\
    \ since you will be importing an existing repository from your computer.</li>\n\
    <li>Click <code>Create repository</code>.</li>\n</ul>\n<p>You should end up inside\
    \ your newly created repository. It will look like a set of instructions that\
    \ you might want to use to connect your GitHub repository to a local repository.</p>\n\
    <p>The instructions we want consist of two lines underneath the heading <code>...or\
    \ push an existing repository from the command line</code>. The hand in this screenshot\
    \ points to where these directions are on the page:</p>\n<p><a href=\"/static/website/images/lessons/git/connect-repo.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"The commands you need\
    \ to copy from the new repo page on GitHub\" class=\"img-fluid d-block my-4\"\
    \ src=\"/static/website/images/lessons/git/connect-repo.png\" style=\"max-width:100%;\"\
    /></a></p>\n<p>Copy out the first command and paste it in your terminal. It should\
    \ look something like this:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\">git remote add origin git@github.com:<span class=\"\
    pl-k\">&lt;</span>username<span class=\"pl-k\">&gt;</span>/<span class=\"pl-k\"\
    >&lt;</span>repository-name<span class=\"pl-k\">&gt;</span>.git</span></pre></div>\n\
    <p>You'll need the command copied from your new repository, since it will contain\
    \ the correct URL.</p>\n<p>Next, paste the second command. It will look exactly\
    \ like this:</p>\n<div class=\"highlight highlight-text-shell-session\"><pre>$\
    \ <span class=\"pl-s1\">git push -u origin main</span></pre></div>\n<p>After running\
    \ this command, you should see output that looks like this:</p>\n<pre><code>Total\
    \ 4 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed\
    \ with 3 local objects.\nTo github.com:&lt;repo-name&gt;/git.git\n\_\_ 916998f..9779fa7\_\
    \_main -&gt; main\n</code></pre>\n<p>If you see output like this, go back to your\
    \ new repository page in the browser and click the <code>Refresh</code> button.\
    \ You should see your <code>syllabus.md</code> file on GitHub!</p>\n<h2>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#review\" id=\"user-content-review\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Review</h2>\n<p>We have covered\
    \ the basic steps of creating a file and tracking changes within a file on your\
    \ local machine and on GitHub.</p>\n<p>This has involved coordinating across three\
    \ different environments, so let's go through that one more time. Note that this\
    \ process is very slightly different. I'll highlight it when it comes up.</p>\n\
    <p>To start, let's add something to our syllabus. Another week of materials or\
    \ a new reading.</p>\n<p>Save that file.</p>\n<p>Use <code>git add</code> via\
    \ the command line to stage the file\u2014tell Git what document you want it to\
    \ pay attention to.</p>\n<p>Use <code>git commit</code> via the command line to\
    \ save the changes you've just made as a snapshot or new version of you file.\
    \ Remember to use the <code>-m</code> flag and include a message about the change\
    \ you just made.</p>\n<p>So far, we have not done anything with GitHub or on the\
    \ Internet. We have used Git, installed on our local machine, to save a version\
    \ of file as it stands now. We could stop here if we only had an interest in using\
    \ Git for version control. But if we also wanted to use GitHub to back up our\
    \ files, or to share our project with a team or publicly, we want to upload, or\
    \ push, that repository to GitHub on the Internet.</p>\n<p>Use <code>git push\
    \ origin main</code> to <em>push</em> that file to your repository on GitHub.\
    \ After refreshing the webpage, your file should appear online. <strong>The difference\
    \ I noted above appears here.</strong> Note the absense of the <code>-u</code>\
    \ flag from the command. That flag was used the first time to establish the connection\
    \ between the repository on your local machine and on GitHub. Now that that connection\
    \ has been established, that flag is not needed.</p>"
  title: Pushing to GitHub
  workshop: git
- challenge: '<ol>

    <li>Fork and clone <a href="https://github.com/DHRI-Curriculum/git">the repository
    for this workshop</a>. Note not only <em>what</em> you are doing, but also <em>where</em>
    you are working when completing these two different tasks.</li>

    <li>Make changes to the files on your local machine. Remember to save them!</li>

    <li>Use the 3-step process of stage, commit and push to return the amended files
    to the repository on GitHub.</li>

    </ol>'
  keywords:
  - Cloning
  - Forking
  - Repository
  order: 9
  questions:
  - answers:
      correct:
      - Copying a repository from GitHub to your local machine.
      incorrect:
      - Copying a repository from your local machince to GitHub.
      - Copying a repository from someone else's GitHub account to your own.
      - Copying a repository from your account to someone else's account.
    question: Which best describes <em>cloning</em>?
  - answers:
      correct:
      - Copying a repository from someone else's GitHub account to your own.
      incorrect:
      - Copying a repository from GitHub to your local machine.
      - Copying a repository from your local machince to GitHub.
      - Copying a repository from your account to someone else's account.
    question: Which best describes <em>forking</em>?
  solution: '<p>Rather than write out the solution here, I want to encourage you to
    go back through the lessons as needed.</p>

    <p>You''ll know you''ve completed step one when the project folder (called <code>git</code>)
    shows up on your local machine.</p>

    <p>After you''ve made and saved the changes, you''ll know you''ve completed step
    three when your changes appear in the project folder on <em>your</em> GitHub account.</p>'
  text: "<p>GitHub was built for sharing and collaborating on projects. A key advantage\
    \ of the platform is that you can find lots of bits of software that do many different\
    \ things\u2014such as code for plugins for WordPress or Leaflet. Increasingly,\
    \ you might find syllabi or open writing projects. If a project is public, you\
    \ can save a copy of it to your local machine, work on it, save your admendations\
    \ and share it on your own GitHub account. Like we've already mentioned, GitHub\
    \ usefully helps track attribution along the way.</p>\n<p>Cloning and forking\
    \ are the basic functions of this capability. Each are first explained below,\
    \ and followed by an example and activity to further explain.</p>\n<h2>\n<a aria-hidden=\"\
    true\" class=\"anchor\" href=\"#cloning\" id=\"user-content-cloning\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Cloning</h2>\n<p><strong>Cloning</strong>\
    \ a repository means making a copy of a repository on GitHub, to download and\
    \ work on locally\u2014on your local machine. By entering the following code into\
    \ your terminal, you can clone any public directory on GitHub:</p>\n<div class=\"\
    highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\">git clone\
    \ <span class=\"pl-k\">&lt;</span>repository-url<span class=\"pl-k\">&gt;</span></span></pre></div>\n\
    <p>When you clone a repository from GitHub, the folder that shows up on your local\
    \ machine comes built-in with a few things. First, Git is already present, so\
    \ you don't need to initialize the folder. Also, the connection between your local\
    \ copy and the online repository is already made, so <code>git push origin main</code>\
    \ will work (no <code>-u</code> flag needed).</p>\n<p>For practice, let's clone\
    \ the repository for this workshop about Git and GitHub, which <a href=\"https://github.com/DHRI-Curriculum/git\"\
    >lives on GitHub</a>.</p>\n<p>First, let's navigate back to your Desktop folder.</p>\n\
    <div class=\"highlight highlight-text-shell-session\"><pre>$ <span class=\"pl-s1\"\
    ><span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>/Desktop</span></pre></div>\n\
    <p>Remember that the <code>~</code> refers to your home directory. Now let's find\
    \ the URL we need to clone the lesson.</p>\n<p>First, follow <a href=\"https://github.com/DHRI-Curriculum/git\"\
    >this link to the main page of this lesson on Git and GitHub</a>.</p>\n<p>On the\
    \ main page, there should be a green <code>Clone or download</code> button on\
    \ the right side:</p>\n<p><a href=\"/static/website/images/lessons/git/clone.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image pointing out\
    \ where the clone or download button is on GitHub\" class=\"img-fluid d-block\
    \ my-4\" src=\"/static/website/images/lessons/git/clone.png\" style=\"max-width:100%;\"\
    /></a></p>\n<p>Click the green button and you will see a box with highlighted\
    \ text under a heading that says <code>Clone with HTTPS</code>. If you instead\
    \ see <code>Cloning with SSH</code>, click the small link that says <code>Use\
    \ HTTPS</code>.</p>\n<p>Now copy out the text in the box:</p>\n<p><a href=\"/static/website/images/lessons/git/copy-clone-text.png\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image showing where\
    \ the text you need to copy is located\" class=\"img-fluid d-block my-4\" src=\"\
    /static/website/images/lessons/git/copy-clone-text.png\" style=\"max-width:100%;\"\
    /></a></p>\n<p>Now that you have the text copied, go back to your terminal. Remember,\
    \ you should be on the <code>Desktop</code>. (Hint: Use <code>pwd</code> to find\
    \ out what your current working directory is.)</p>\n<p>Once you are in the <code>Desktop</code>,\
    \ type:</p>\n<div class=\"highlight highlight-text-shell-session\"><pre>$ <span\
    \ class=\"pl-s1\">git clone <span class=\"pl-k\">&lt;</span>copied-url<span class=\"\
    pl-k\">&gt;</span></span></pre></div>\n<p>If the command is successful, the full\
    \ Git and GitHub workshop's text will be replicated on your local machine. To\
    \ navigate into the folder, its name is <code>git</code> and you can use the <code>cd</code>\
    \ command to access it:</p>\n<div class=\"highlight highlight-text-shell-session\"\
    ><pre>$ <span class=\"pl-s1\"><span class=\"pl-c1\">cd</span> git</span></pre></div>\n\
    <p>Use the <code>ls</code> command to take a look at the various files in the\
    \ lesson folder.</p>\n<p>Cloning can be especially useful when you're joining\
    \ a group project that is hosted on GitHub, and you want your changes to eventually\
    \ be pushed and shared with that same repository.</p>\n<p>But maybe that is not\
    \ possible or ideal. Maybe you don't want to contribute your changes to someone\
    \ else's repository. Maybe you want to make a derivative of their folder for yourself,\
    \ on your GitHub account, and make changes there.</p>\n<p>Forking is the step\
    \ you could take to do this.</p>\n<h2>\n<a aria-hidden=\"true\" class=\"anchor\"\
    \ href=\"#forking\" id=\"user-content-forking\"><span aria-hidden=\"true\" class=\"\
    octicon octicon-link\"></span></a>Forking</h2>\n<p><em>Forking</em> a repository\
    \ means making a copy of someone else's repository on GitHub, and saving it to\
    \ your account on GitHub. This function happens within GitHub, and has nothing\
    \ to do with what is happening on your local machine. Note that <em>forking</em>\
    \ will not automatically make the repository appear as a folder on your computer;\
    \ that's the role of <em>cloning</em>.</p>\n<p>In order to \"fork\" the <code>git</code>\
    \ repository into your own GitHub account, follow these steps.</p>\n<p>First,\
    \ go to <a href=\"https://github.com/DHRI-Curriculum/git\">the repository for\
    \ this workshop</a> on GitHub. Note the <code>Fork</code> button in the upper\
    \ right hand corner. By clicking that button, you can copy, or fork, this repository\
    \ to your account.</p>\n<p><a href=\"/static/website/images/lessons/git/fork-button.jpeg\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image showing where\
    \ the button to fork a repo is located\" class=\"img-fluid d-block my-4\" src=\"\
    /static/website/images/lessons/git/fork-button.jpeg\" style=\"max-width:100%;\"\
    /></a></p>\n<p>Doing so would also adjust the attribution information in the upper\
    \ left hand corner. Your username would replace <code>DHRI-Curriculum</code>,\
    \ showing that you are looking at a copy of the repository on your account now.\
    \ Additionally, it will reference the origin account, in this case, <code>DHRI-Curriculum</code>\
    \ below after <code>forked from</code>, since this was the origin point of <em>your</em>\
    \ fork.</p>\n<p><a href=\"/static/website/images/lessons/git/forking-attrib-chng.jpeg\"\
    \ rel=\"noopener noreferrer\" target=\"_blank\"><img alt=\"Image showing the changes\
    \ in attribution that happen when a repo is forked\" class=\"img-fluid d-block\
    \ my-4\" src=\"/static/website/images/lessons/git/forking-attrib-chng.jpeg\" style=\"\
    max-width:100%;\"/></a></p>\n<p>Your local machine would come into play when you\
    \ want to <em>clone</em> that repository so you can work on it locally. This also\
    \ means that when you push those changes to GitHub, you would be pushing them\
    \ to a forked repository associated with your own account.</p>\n<p>You might use\
    \ this method if you were going to teach your own Git &amp; GitHub workshop. You\
    \ could use our repository as a base for getting started, and add more examples\
    \ or change some language, clarify something further, or create a connection to\
    \ another workshop you are giving, etc. This allows us to continue to use the\
    \ workshop as we have it as well. Also, maybe at a later time, we want to merge\
    \ some of your changes with ours. We can do that too by revisiting your version\
    \ history.</p>"
  title: Cloning and Forking
  workshop: git
praxis:
  discussion_questions:
  - label: What does your current version control workflow look like and what are
      the challenges it poses; or how could it be improved?
    order: 1
    workshop: git
  - label: 'How can git support the work you are already doing? '
    order: 2
    workshop: git
  - label: 'What additional opportunities does git and/or GitHub and/or Markdown create
      for your teaching, research or other scholarly work? '
    order: 3
    workshop: git
  - label: What are the potential benefits and pitfalls of working in the open on
      the web via a platform like GitHub?
    order: 4
    workshop: git
  further_projects:
  - annotation: Fill in your syllabus repository further, adding not only to your
      syllabus.md file, but adding additional content such as assignments.
    title: null
    url: null
  - annotation: Create a website from your syllabus files using GitHub Pages or Jekyll.
    title: null
    url: null
  - annotation: 'Create an independent or collaborative reading group that tracks
      readings and notes using Git and GitHub. '
    title: null
    url: null
  - annotation: 'Use Git and GitHub to track, store, and share an independent or collaborative
      project folder. '
    title: null
    url: null
  - annotation: 'Use Git to track a project on your local machine. '
    title: null
    url: null
  - annotation: Find and/or modify an existing public project on GitHub.
    title: null
    url: null
  further_readings: []
  intro: '<p>You made it to the end of this workshop--congratulations! You now know
    a little more about why using Git and GitHub in your scholarly practice might
    be advantageous, and what the challenges are.

    Below you''ll find a set of readings and tutorials to supplement the lessons outlined
    herein, and offer additonal ways of advancing your use beyond the basics outlined
    here. There are also additional challenges to test your skills, as well as discussion
    questions to test your conceptual understanding of these tools.

    Enjoy and best regards!</p>'
  more_resources: []
  next_steps: []
  tutorials:
  - annotation: '[An intro to Git: What it is and how to use it](https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/)'
    label: 'An intro to Git: What it is and how to use it'
    url: https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61
  - annotation: '[Getting Started with GitHub](https://help.github.com/en/github/getting-started-with-github)'
    label: Getting Started with GitHub
    url: https://help.github.com/en/github/getting-started-with-github
  workshop: git
workshop:
  name: Introduction to Git and GitHub
  parent_backend: Github
  parent_branch: v2.0
  parent_repo: DHRI-Curriculum/git
  slug: git
