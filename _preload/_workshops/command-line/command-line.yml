frontmatter:
  abstract: 'If asked to show someone who has never seen a computer how to *do* something
    on your computer, many of us would explain what a screen and a cursor are, and
    then show how to point and click on icons. This approach relies on a graphical
    user interface, or GUI (pronounced "gooey!"). Today we''re going to explore another
    way to make your computer do things: through the command line. Instead of pointing
    and clicking, we''ll be typing in either git bash (Windows) or terminal (macOS)
    to tell the computer directly what task we''d like it to perform.'
  contributors:
  - collaboration:
      current: true
      role: Au
      workshop: command-line
    first_name: Stefano
    last_name: Morello
    url: https://github.com/smorello87
  - collaboration:
      current: false
      role: Au
      workshop: command-line
    first_name: Kelsey
    last_name: Chatlosh
    url: https://github.com/kchatlosh
  - collaboration:
      current: false
      role: Au
      workshop: command-line
    first_name: Patrick
    last_name: Smyth
    url: https://github.com/smythp
  - collaboration:
      current: false
      role: Au
      workshop: command-line
    first_name: Mary Catherine
    last_name: McKinniburgh
    url: https://github.com/mckinniburgh
  - collaboration:
      current: false
      role: Au
      workshop: command-line
    first_name: Jojo
    last_name: Karlin
    url: https://github.com/jojokarlin/
  - collaboration:
      current: false
      role: Re
      workshop: command-line
    first_name: Di
    last_name: Yoong
    url: https://github.com/dyoong
  - collaboration:
      current: true
      role: Ed
      workshop: command-line
    first_name: Lisa
    last_name: Rhody
    url: https://github.com/lmrhody
  - collaboration:
      current: true
      role: Ed
      workshop: command-line
    first_name: Kalle
    last_name: Westerling
    url: https://github.com/kallewesterling
  estimated_time: '3'
  ethical_considerations:
  - "<p>\"The command line\" is laden with masculine and military metaphors, which\
    \ is reflective of the history of computing and programming. As Wendy Hui Kyong\
    \ Chun discusses in <a href=\"https://doi.org/10.1162/1526381043320741\">\"On\
    \ Software, or the Persistence of Visual Knowledge\" (2004)</a>, almost all computers\
    \ (as in human computers) in the US during World War II were young women. Human\
    \ computers received commands from analysts\u2014\u2014predominantly men with\
    \ the military\u2014that they then had to interpret and act upon the machine.\
    \ As Chun (p. 34) argues\n&nbsp;&nbsp;&nbsp;&nbsp;&gt; computation depends on\
    \ 'yes, sir' in response to short declarative sentences and imperatives that are\
    \ in essence commands ... The command line is a mere operating system (OS) simulation.\n\
    &nbsp;&nbsp;If commands are the ways in which a user communicates with machines,\
    \ the command line (of computers today) receives these commands as text that is\
    \ typed in.</p>"
  learning_objectives:
  - <p>Learn common commands to create files (<code>touch</code> and <code>echo</code>)</p>
  - <p>Learn commands to create directories (<code>mkdir</code>)</p>
  - <p>Navigate our file structure using change directory (<code>cd</code>), print
    working directory (<code>pwd</code>), and list (<code>ls</code>)</p>
  - <p>Move content from one place to another using redirects (<code>&gt;</code>)
    and pipes (<code>|</code>)</p>
  - <p>Explore a comma separated values (.csv) dataset using word and line counts,
    <code>head</code> and <code>tail</code>, and the concatenate command <code>cat</code></p>
  - <p>Search text files using the <code>grep</code> command</p>
  - <p>Create and sort cheat sheets for the commands we learn</p>
  prerequisites:
  - potential_name: Visual Studio Code
    potential_slug_fragment: visual-studio-code
    recommended: true
    required: false
    text: You can use any plain text editor but for our purposes, Visual Studio Code
      ("VS Code") will be used.
    type: install
  - potential_name: Git Bash
    potential_slug_fragment: git
    recommended: false
    required: false
    text: To know what operating system you're using. If you are on a Mac, you will
      be using the built-in Terminal. If you're using Windows, you will need to follow
      the instructions to install, so that we can work in the cross-platform Unix
      command line for this session.
    type: install
  projects:
  - annotation: Most Python- and R-based projects will require you to have some knowledge
      of the command line. At a very basic level, you will be invoking a Python script
      and will be using values of command line arguments when creating and running
      your scripts.
    title: null
    url: null
  - annotation: The command line is also useful for setting up installations of server
      side software like [Omeka](www.omeka.org). The command line will allow you to
      navigate the file structure of your server. Commands like ls, mkdir, rmdir,
      cd, etc. are really important. For example, grep could help you find a plugin
      directory that you might have accidentally placed in the wrong location.
    title: Omeka
    url: www.omeka.org
  - annotation: A recent digital capstone project by Christofer Gass runs a Python
      script on the [command line](https://academicworks.cuny.edu/gc_etds/3786/)
    title: command line
    url: https://academicworks.cuny.edu/gc_etds/3786
  - annotation: '[Awesome Bash](https://github.com/awesome-lists/awesome-bash), "a
      curated list of delightful Bash scripts and resources."'
    title: Awesome Bash
    url: https://github.com/awesome-lists/awesome-bash
  readings:
  - annotation: '[Neal Stephenson''s "In the Beginning... Was the Command Line"](http://cristal.inria.fr/~weis/info/commandline.html)
      is a useful piece to grasp the relationship between (and the affordances of)
      the command line and the GUI.'
    title: Neal Stephenson's "In the Beginning... Was the Command Line"
    url: http://cristal.inria.fr/~weis/info/commandline.html
  - annotation: '[Douglas Rushkoff''s *Program or Be Programmed*](https://rushkoff.com/books/program-or-be-programmed/)
      offers some reflections on how using the command line allows one to communicate
      in a less mediated way with their machines and the importance of doing so in
      the current technoscape.'
    title: Douglas Rushkoff's *Program or Be Programmed*
    url: https://rushkoff.com/books/program-or-be-programmed
  resources:
  - full_text: '[Glossary](https://github.com/DHRI-Curriculum/glossary/blob/master/sections/command-line.md)'
    title: Glossary
    type: external_link
    url: https://github.com/DHRI-Curriculum/glossary/blob/master/sections/command-line.md
  - full_text: '[Bite Size Command Line (by Julia Evans)](https://jvns.ca/blog/2018/08/05/new-zine--bite-size-command-line/)'
    title: Bite Size Command Line (by Julia Evans)
    type: external_link
    url: https://jvns.ca/blog/2018/08/05/new-zine--bite-size-command-line
  - full_text: '[Basic UNIX commands](http://mally.stanford.edu/~sr/computing/basic-unix.html)'
    title: Basic UNIX commands
    type: external_link
    url: http://mally.stanford.edu/~sr/computing/basic-unix.html
lessons:
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 1
  questions: []
  solution: ''
  solution_title: ''
  text: '<p>The command line is a text-based way of interacting with your computer.
    You may hear it called different names, such as the terminal, the shell, or bash.
    In practice, you can use these terms interchangeably. (If you''re curious, though,
    you can read more about them <a href="/glossary/term/command-line/">in the glossary</a>.)
    The shell we use (whether terminal, shell, or bash) is a program that accepts
    commands as text input and converts commands into appropriate operating system
    functions.</p>

    <p>The command line (of computers today) receives these commands as text that
    is typed in.</p>

    <h2>What Does "Text-based" Mean?</h2>

    <p>For those of us comfortable reading and writing, the idea of "text-based" in
    the context of computers can seem a bit strange. As we start to get comfortable
    typing commands to the computer, it''s important to distinguish "text" from word
    processed, desktop publishing. In the latter case, we use software (think Microsoft
    Word or Google Docs) that displays what we want to produce without showing us
    the code the computer is reading to render the formatting. On the other hand,
    while less pretty to look at, plain text has the advantage of being manipulable
    in different contexts.</p>

    <p>Let''s take a quick moment to discuss text and text editors.</p>'
  title: What Is the Command Line?
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 2
  questions:
  - answers:
      correct:
      - Plain text contains no formatting, only line breaks and spacing.
      - Rich text is styled text, <em>i.e.,</em> plain text completed by information
        such as font size, format, and colors.
      incorrect:
      - Plain text cannot be marked up.
      - One can't determine whether there is a difference betweeen the two without
        looking at their content.
    question: What is the difference between a plain text document and a rich text
      document? (Select all that apply)
  - answers:
      correct: []
      incorrect: []
    question: What is the Command Line? How is it different from your text editor?
  solution: ''
  solution_title: ''
  text: "<h2>What is Text?</h2>\n<p>Before we explain which program we'll be using\
    \ for editing text, we want to give a general sense of this \"text\" we keep mentioning.\
    \ For those of us in the humanities, whether we follow literary theorists who\
    \ read any object as a \"text\" or we dive into philology, paleography, codicology\
    \ or any of the fields <a href=\"https://en.wikipedia.org/wiki/David_Greetham_(textual_scholar)\"\
    \ target=\"_blank\">David Greetham</a> lays out in <em>Textual Scholarship</em>,\
    \ \"text\" has its specific meanings. As scholars working with computers, we need\
    \ to be aware of the ways plain text and formatted text differ. Words on a screen\
    \ may have hidden formatting. Many of us learned to use a word processor like\
    \ Microsoft Word and don't realize how much is going on behind the words shown\
    \ on the screen. For the purposes of communicating with the computer and for easier\
    \ movement between different programs, we need to use text without hidden formatting.</p>\n\
    <p><img alt=\"Word Doc\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/command-line/worddoc.png\"\
    /></p>\n<p>Users with visual disabilities, <a href=\"https://github.com/DHRI-Curriculum/command-line/raw/v2.0/files/WordProcessorExample.docx\"\
    \ target=\"_blank\">click here</a> to download the Word file.</p>\n<p>If you ask\
    \ the command line to read that file, this Word <code>.docx</code> file will look\
    \ something like this</p>\n<p><img alt=\"Word Doc as visualized by Command Line\"\
    \ class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/command-line/CatWordDoc.png\"\
    /></p>\n<p>Users with visual disabilities, <a href=\"https://raw.githubusercontent.com/DHRI-Curriculum/command-line/v2.0/files/PK.md\"\
    \ target=\"_blank\">click here</a> to download the text file.</p>\n<p>Word documents\
    \ which look like \"just words!\" are actually comprised of an archive of extensible\
    \ markup language (XML) instructions that only Microsoft Word can read. Plain\
    \ text files can be opened in a number of different editors and can be read within\
    \ the command line.</p>\n<h2>Plain Text</h2>\n<p>For the purposes of communicating\
    \ with machines and between machines, we need characters to be as flexible as\
    \ possible. Plain text include characters of readable material but not graphical\
    \ representation.</p>\n<p>According to the <a href=\"https://www.unicode.org/versions/Unicode12.1.0/\"\
    \ target=\"_blank\">Unicode Standard</a>,</p>\n<blockquote>\n<p>Plain text is\
    \ a pure sequence of character codes; plain Unicode-encoded text is therefore\
    \ a sequence of Unicode character codes.</p>\n</blockquote>\n<p>Plain text shows\
    \ its cards\u2014if it's marked up, the markup will be human readable. Plain text\
    \ can be moved between programs more fluidly and can respond to programmatic manipulations.\
    \ Because it is not tied to a particular font or color or placement, plain text\
    \ can be styled externally.</p>\n<p>A counterpoint to plain text is rich text\
    \ (sometimes denoted by the Microsoft rich text format <code>.rtf</code> file\
    \ extension) or \"enriched text\" (sometimes seen as an option in email programs).\
    \ In rich text files, plain text is elaborated with formatting specific to the\
    \ program in which they are made.</p>\n<p>Plain text has two main properties in\
    \ regard to rich text:</p>\n<blockquote>\n<p>plain text is the underlying content\
    \ stream to which formatting can be applied. Plain text is public, standardized,\
    \ and universally readable.</p>\n</blockquote>\n<h2>Choosing a Text Editor</h2>\n\
    <p>An important tool for programming and working in the command line is a text\
    \ editor. A text editor is a program that allows you to edit plain text files,\
    \ such as <code>.txt</code>, <code>.csv</code>, or <code>.md</code>. Text editors\
    \ are not used to edit rich text documents, such as <code>.docx</code> or <code>.rtf</code>,\
    \ and rich text editors should not be used to edit plain text files. This is because\
    \ rich text editors will add many invisible special characters that will prevent\
    \ programs from running and configuration files from being read correctly.</p>\n\
    <p>While it doesn't really matter which text editor you choose, you should try\
    \ to become comfortable with at least one text editor.</p>\n<p>Choosing a text\
    \ editor has as much to do with personality as it does with functionality. Graphical\
    \ user interfaces (GUIs), user options, and \"hackability\" vary from program\
    \ to program.</p>\n<h2>Default Recommendation</h2>\n<p>For our workshops, we will\
    \ be using <a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual\
    \ Studio Code</a>. Not only is Visual Studio Code free and open source, but it\
    \ is also consistent across macOS, Windows, and Linux systems.</p>\n<p>You will\
    \ have downloaded Visual Studio Code according to the <a href=\"/installations/microsoft-visual-studio-code-windows/\">instructions</a> on the installations page. We won't be using the editor a lot\
    \ in this tutorial, so don't worry about getting to know the editor now. In other\
    \ workshops we will discuss syntax highlighting and version control, which Visual\
    \ Studio Code supports. For now we will get back to working in the command line\
    \ itself.</p>"
  title: Text Editors
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 3
  questions: []
  solution: ''
  solution_title: ''
  text: '<p>Initially, for some of us, the command line can feel a bit unfamiliar.
    Why step away from a point-and-click workflow? By using the command line, we move
    into an environment where we have more minute control over each task we''d like
    the computer to perform. Instead of ordering your food in a restaurant, you''re
    stepping into the kitchen. It''s more work, but there are also more possibilities.</p>

    <p>The command line allows you to...</p>

    <ul>

    <li>Easily automate tasks such as creating, copying, and converting files.</li>

    <li>Set up your programming environment.</li>

    <li>Run programs you create.</li>

    <li>Access the (many) programs and utilities that do not have graphical equivalents.</li>

    <li>Control other computers remotely.</li>

    </ul>

    <p>In addition to being a useful tool in itself, the command line gives you access
    to a second set of programs and utilities and is a complement to learning programming.</p>

    <p>What if all these cool possibilities seem a bit abstract to you right now?
    That''s alright! On a very basic level, most uses of the command line are about
    <strong>showing information</strong> that the computer has, or <strong>modifying
    or making</strong> things (files, programs, etc.) on the computer.</p>

    <p>In the next section, we''ll make this a little more clear by getting started
    with the command line.</p>'
  title: Why is the Command Line Useful?
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 4
  questions: []
  solution: ''
  solution_title: ''
  text: "<h2>macOS</h2>\n<p>If you're using macOS:</p>\n<ol>\n<li>\n<p>Click the Spotlight\
    \ Search button (the magnifying glass) in the top right of your desktop.</p>\n\
    </li>\n<li>\n<p>Type <code>terminal</code> into the bar that appears.</p>\n</li>\n\
    <li>\n<p>Select the first item that appears in the list.</p>\n</li>\n<li>\n<p>When\
    \ the Terminal pops up, you will likely see either a window with black text over\
    \ white background or colored text over a black background.</p>\n<p><img alt=\"\
    Terminal in macOS\" class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/command-line/osx_term.png\"\
    /></p>\n</li>\n</ol>\n<p>Please note: You can change the color of your Terminal\
    \ or BashShell background and text by selecting <code>Shell</code> from the top\
    \ menu bar, then selecting a theme from the menu under <code>New Window</code>.</p>\n\
    <p>Bonus points: if you really want to get the groove of just typing instead of\
    \ pointing and clicking, you can hold the <kbd>command (\u2318)</kbd> key while\
    \ and press <kbd>space</kbd> to pull up Spotlight search, start typing <code>Terminal,</code>\
    \ and then hit <kbd>enter</kbd> to open a terminal window. This will pull up a\
    \ terminal window without touching your mousepad. For super bonus points, try\
    \ to navigate like this for the next fifteen minutes, or even the rest of this\
    \ session\u2014it is tricky and sometimes a bit tiring when you start, but you\
    \ can really pick up speed when you practice!</p>\n<h2>Windows</h2>\n<p>We won't\
    \ be using Windows's own non-UNIX version of the command line. Instead, we will\
    \ use Git Bash. If you haven't installed it yet, you can follow <a href=\"/installations/git-and-git-bash-windows/\"\
    >these instructions</a>. The reason we use Git Bash as the command line on Windows\
    \ is that it makes you able to run the same commands as you would on a computer\
    \ running macOS or Linux. Git Bash includes core utilities available on Linux\
    \ that are not available on Windows.</p>\n<ol>\n<li>\n<p>Look for Git Bash in\
    \ your programs menu and open.</p>\n</li>\n<li>\n<p>If you can't find the git\
    \ folder, just type <code>git bash</code> in the search box and select <code>git\
    \ bash</code> when it appears.</p>\n</li>\n<li>\n<p>Open the program.</p>\n</li>\n\
    <li>\n<p>When the terminal pops up, you will likely see either a window with black\
    \ text over white background or colored text over a black background.You know\
    \ you're in the right place when you see the <code>$</code>.</p>\n</li>\n</ol>\n\
    <p><em>Note that the sign for you being in the right place might also be a <code>%</code>\
    \ or a <code>#</code> depending on your operating system.</em></p>\n<p>Bonus points:\
    \ if you really want to get the groove of just typing instead of pointing and\
    \ clicking, you can press <kbd>windows</kbd> to open the Start menu, start typing\
    \ <code>git bash</code> and then hit <kbd>enter</kbd> to open a git bash window.\
    \ This will pull up a command window without touching your mousepad.</p>\n<h2>Command\
    \ Prompt <code>$</code></h2>\n<p><code>$</code>, which we will refer to as the\
    \ \"command prompt,\" is the place you type commands you wish the computer to\
    \ execute. We will now learn some of the most common commands.</p>\n<p>When you\
    \ see the <code>$</code>, you're in the right place. As noted above, however,\
    \ the sign varies somewhat between systems, and sometimes the sign is a <code>%</code>\
    \ or a <code>#</code>. We call the sign the <em>command prompt</em>; it lets us\
    \ know the computer is ready to receive a command.</p>\n<p>In the following lessons,\
    \ we will refer to the command prompt using a <code>$</code>. Just make a note\
    \ now of your sign, if it differs from the dollar sign. You will be able to follow\
    \ along just fine as long as you understand that they all are different ways of\
    \ knowing that you are \"at the <em>command prompt</em>.\"</p>"
  title: Getting to the Command Line
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 5
  questions: []
  solution: ''
  solution_title: ''
  text: "<p>Before we get started, I wanted to give you a couple of tips of things\
    \ to keep in mind.</p>\n<p>First, go slow at first and check your spelling! One\
    \ of the biggest things you can do to make sure your code runs correctly and you\
    \ can use the command line successfully is to make sure you check your spelling!\
    \ <em>Keep this in mind!</em> If at first something doesn't work, check your spelling!\
    \ Unlike in human reading, where letters operate simultaneously as atomistic symbols\
    \ and as complex contingencies (check <a href=\"https://genius.com/Johanna-drucker-from-a-to-screen-annotated\"\
    \ target=\"_blank\">Johanna Drucker</a> on the alphabet), in coding, each character\
    \ has a discrete function including (especially!) spaces.</p>\n<p>Second, keep\
    \ in mind that the command line and file systems on macOS and Unix are usually\
    \ pre-configured as cAsE-pReSeRvInG\u2014so capitalizations also matter when typing\
    \ commands and file and folder names.</p>\n<p>Third, while copying and pasting\
    \ from this handy tutorial may be tempting to avoid spelling errors and other\
    \ things, we encourage you not to! Typing out each command will help you remember\
    \ them and how they work.</p>\n<p>Now, we are ready to get started.</p>"
  title: Prefatory Pro Tips
  workshop: command-line
- challenge: "<p>Before moving on, take a minute to navigate through our computer's\
    \ file system using the command line. Use the three commands you've just learned\u2014\
    <code>pwd</code>, <code>ls</code> and <code>cd</code>\u2014eight (8) times each.\
    \ Go poking around your <code>Photos</code> folder, or see what's so special about\
    \ that root <code>/</code> directory. When you're done, come back to your \"home\"\
    \ folder with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"\
    gp\">$</span> <span class=\"nb\">cd</span> ~\n</code></pre></div>\n<p>(That's\
    \ a tilde <kbd>~</kbd>, on the top left of your keyboard.) One more command you\
    \ might find useful is <code>cd ..</code> which will move you one directory up\
    \ in the filesystem. That's a <code>cd</code> with two periods after it:</p>\n\
    <div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span>\
    \ <span class=\"nb\">cd</span> ..\n</code></pre></div>"
  challenge_title: ''
  keywords:
  - Filesystem
  - GUI
  - Root
  order: 6
  questions:
  - answers:
      correct:
      - $ <code>pwd</code>
      incorrect:
      - $ <code>ls</code>
      - $ <code>cd</code>
      - $ <code>whoami</code>
    question: What command do you run if you are trying to identify where in the filesystem
      you are currently located/working?
  - answers:
      correct: []
      incorrect: []
    question: When and why would you want to use the command line as opposed to your
      operating system's GUI?
  solution: '<ol>

    <li>Type <code>pwd</code> to see where on your computer you are located.</li>

    <li>Type <code>cd name-of-your-folder</code> to enter a subfolder.</li>

    <li>Type <code>ls</code> to see the content of that folder.</li>

    <li>Type <code>cd ..</code> to leave that folder.</li>

    <li>Type <code>pwd</code> to make sure you are back to the folder where you wish
    to be.</li>

    <li>Type <code>cd ~</code> to go back to your home folder.</li>

    <li>Type <code>pwd</code> to make sure you are in the folder where you wish to
    be.</li>

    <li>Type <code>cd /</code> to go back to your root folder.</li>

    <li>Type <code>ls</code> to see the content of folder you are currently in.</li>

    <li>Type <code>pwd</code> to make sure you are in the folder where you wish to
    be.</li>

    <li>Type <code>cd name-of-your-folder</code> to enter a subfolder.</li>

    </ol>'
  solution_title: ''
  text: "<h2>Getting started: know thyself</h2>\n<p>You may also see your username\
    \ to the left of the command prompt <code>$</code>. Let's try our first command.\
    \ Type the following and press <kbd>enter</kbd> on your keyboard:</p>\n<div class=\"\
    codehilite\"><pre><span></span><code><span class=\"gp\">$</span> whoami\n</code></pre></div>\n\
    <p>The <code>whoami</code> command should print out your username. Congrats, you've\
    \ executed your first command! This is a basic pattern of use in the command line:\
    \ type a command, press <kbd>enter</kbd> on your keyboard, and receive output.</p>\n\
    <h2>Orienting Yourself in the Command Line: Folders</h2>\n<p>OK, we're going to\
    \ try another command. But first, let's make sure we understand some things about\
    \ how your computer's filesystem works.</p>\n<p>Your computer's files are organized\
    \ in what's known as a hierarchical filesystem. That means there's a top level\
    \ or <code>root</code> folder on your system. That folder has other folders in\
    \ it, and those folders have folders in them, and so on. You can draw these relationships\
    \ in a tree:</p>\n<p><img alt=\"An example of how a hierarchical filesystem looks\"\
    \ class=\"img-fluid d-block my-4\" src=\"/static/website/images/lessons/command-line/hierarchical-filesystem-example.png\"\
    /></p>\n<p>The root or highest-level folder on macOS is just called <code>/</code>.\
    \ We won't need to go in there, though, since that's mostly just files for the\
    \ operating system. On Windows, the root directory is usually called <code>C:</code>.\
    \ (If you are curious why <code>C:</code> is the default name on Windows, you\
    \ can read about it <a href=\"http://www.todayifoundout.com/index.php/2015/04/c-drive-default-windows-based-computers-2\"\
    \ target=\"_blank\">here</a>.)</p>\n<p>Note that we are using the word \"directory\"\
    \ interchangeably with \"folder\"\u2014they both refer to the same thing.</p>\n\
    <p>OK, let's try a command that tells us where we are in the filesystem:</p>\n\
    <div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span>\
    \ <span class=\"nb\">pwd</span>\n</code></pre></div>\n<p>You should get output\
    \ like <code>/Users/your-username</code>. That means you're in the <code>your-username</code>\
    \ directory in the <code>Users</code> folder inside the <code>/</code> or root\
    \ directory. This directory is often called the \"home\" directory.</p>\n<p>On\
    \ Windows, your output would instead be <code>C:/Users/your-username</code>. The\
    \ folder you're in is called the working directory, and <code>pwd</code> stands\
    \ for \"print working directory.\" \"Print\" as a word can be somewhat misleading.\
    \ The command <code>pwd</code> won't actually print anything except on your screen.\
    \ This command is easier to grasp when we interpret \"print\" as \"display.\"\
    </p>\n<p>Now we know \"where\" we are. But what if we want to know what files\
    \ and folders are in the <code>your-username</code> directory, a.k.a. the working\
    \ directory? Try entering:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> ls\n</code></pre></div>\n<p>You should see a number of\
    \ folders, probably including <code>Documents</code>, <code>Desktop</code>, and\
    \ so on. You may also see some files. These are the contents of the current working\
    \ directory. <code>ls</code> will \"list\" the contents of the directory you are\
    \ in.</p>\n<p>Wonder what's in the <code>Desktop</code> folder? Let's try navigating\
    \ to it with the following command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> <span class=\"nb\">cd</span> Desktop\n</code></pre></div>\n\
    <p>The <code>cd</code> command lets us \"change directory.\" (Make sure the \"\
    D\" in \"Desktop\" is capitalized.) If the command was successful, you won't see\
    \ any output. This is normal\u2014often, the command line will succeed silently.</p>\n\
    <p>So how do we know it worked? That's right, let's use our <code>pwd</code> command\
    \ again. We should get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/Desktop</span>\n\
    </code></pre></div>\n<p>Now try <code>ls</code> again to see what's on your desktop.\
    \ These three commands\u2014<code>pwd</code>, <code>ls</code>, and <code>cd</code>\u2014\
    are the most commonly used in the terminal. Between them, you can orient yourself\
    \ and move around.</p>\n<h3>Compare with the GUI</h3>\n<p>It's important to note\
    \ that this is the same old information you can get by pointing and clicking displayed\
    \ to you in a different way.</p>\n<p>Go ahead and use pointing and clicking to\
    \ navigate to your working directory\u2014you can get there a few ways, but try\
    \ starting from \"My Computer\" and clicking down from there. You'll notice that\
    \ the folder names should match the ones that the command line spits out for you,\
    \ since it's the same information! We're just using a different mode of navigation\
    \ around your computer to see it.</p>"
  title: Navigation
  workshop: command-line
- challenge: <p>Try and create a sub-folder and file on your own!</p>
  challenge_title: ''
  keywords: []
  order: 7
  questions:
  - answers:
      correct:
      - It inserts my last command.
      incorrect:
      - It quits the Terminal/GitBash.
      - It undoes my last command.
      - It shows me what folder I am working in.
    question: What does the <kbd>up arrow</kbd> command do?
  solution: '<ol>

    <li>Type <code>pwd</code> to see where on your computer you are located. If you
    are not in the <code>projects</code> folder we just created, navigate to that
    folder using the commands you learned in the <a href="https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=6">lesson
    on navigation</a>.</li>

    <li>Type <code>mkdir name-of-your-subfolder</code> to create a subfolder.</li>

    <li>Type <code>cd name-of-your-folder</code> to navigate to that folder.</li>

    <li>Type <code>challenge.txt</code> to create a new text file.</li>

    <li>Type <code>ls</code> to check whether you created the file correctly.</li>

    </ol>'
  solution_title: ''
  text: "<h2>Creating a File</h2>\n<p>So far, we've only performed commands that give\
    \ us information. Let's use a command that creates something on the computer.</p>\n\
    <p>First, make sure you're in your home directory:</p>\n<div class=\"codehilite\"\
    ><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n\
    <span class=\"go\">/Users/your-username</span>\n</code></pre></div>\n<p>Let's\
    \ move to the <code>Desktop</code> folder, or \"change directory\" with <code>cd</code>:</p>\n\
    <div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span>\
    \ <span class=\"nb\">cd</span> Desktop\n</code></pre></div>\n<p>Once you've made\
    \ sure you're in the <code>Desktop</code> folder with <code>pwd</code>, let's\
    \ try a new command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> touch foo.txt\n</code></pre></div>\n<p>The <code>touch</code>\
    \ command is used to create a file without any content. This command can be used\
    \ when you don\u2019t have any data yet to store in it.</p>\n<p>If the command\
    \ succeeds, you won't see any output. Now move the terminal window and look at\
    \ your \"real\" desktop, the graphical one. See any differences? If the command\
    \ was successful and you were in the right place, you should see an empty text\
    \ file called <code>foo.txt</code> on the desktop. Pretty cool, right?</p>\n<h2>Handy\
    \ Tip: Up Arrow</h2>\n<p>Let's say you liked that <code>foo.txt</code> file so\
    \ much you'd like another! In the terminal window, press the <kbd>up arrow</kbd>\
    \ on your keyboard. You'll notice this populates the line with the command that\
    \ you just wrote. You can hit <kbd>enter</kbd> to create another <code>foo.txt,</code>\
    \ (note - <a href=\"https://en.wikipedia.org/wiki/Touch_(Unix)\" target=\"_blank\"\
    ><code>touch</code></a> command will not overwrite your document nor will it add\
    \ another document to the same directory, but it will update info about that file.)\
    \ or you could use your left/right arrows to move the insert cursor around on\
    \ the screen so you can, for instance, change the file name to <code>foot.txt</code>\
    \ to create a different file.</p>\n<p>As we start to write more complicated and\
    \ longer commands in our terminal, the <kbd>up arrow</kbd> is a great shortcut\
    \ so you don't have to spend lots of time typing.</p>\n<h2>Creating Folders</h2>\n\
    <p>OK, so we're going to be doing a lot of work during the Digital Humanities\
    \ Research Institute. Let's create a <code>projects</code> folder on our desktop,\
    \ where we can keep all our work in one place.</p>\n<p>First, let's check to make\
    \ sure we're still in the <code>Desktop</code> folder with <code>pwd</code>:</p>\n\
    <div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span>\
    \ <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/Desktop</span>\n\
    </code></pre></div>\n<p>Once you've double-checked you're in <code>Desktop</code>,\
    \ we'll use the <code>mkdir</code> or \"make directory\" command to make a folder\
    \ called <code>projects</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> mkdir projects\n</code></pre></div>\n<p>Now run <code>ls</code>\
    \ to see if a projects folder has appeared. Once you confirm that the projects\
    \ folder was created successfully, <code>cd</code> into it.</p>\n<div class=\"\
    codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"\
    nb\">cd</span> projects\n<span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n\
    <span class=\"go\">/Users/your-username/Desktop/projects</span>\n</code></pre></div>\n\
    <p>OK, now you've got a projects folder that you can use throughout the Institute.\
    \ It should be visible on your graphical desktop, just like the <code>foo.txt</code>\
    \ file we created earlier.</p>"
  title: Creating Files and Folders
  workshop: command-line
- challenge: "<p>You <em>could</em> use the GUI to open your Visual Studio Code text\
    \ editor\u2014from your programs menu, via Finder or Applications or Launchpad\
    \ in macOS, or via the Windows button in Windows\u2014and then click <code>File</code>\
    \ and then <code>Open</code> from the drop-down menu and navigate to your Desktop\
    \ folder and click to open the <code>cheat-sheet.txt</code> file.</p>\n<p><em>Or</em>,\
    \ you can open that specific <code>cheat-sheet.txt</code> file in the Visual Studio\
    \ Code text editor directly from the command line! Let's try that by using the\
    \ <code>code</code> command followed by the name of your file in the command line.\
    \ (Remember, the command <code>code</code> prompts your computer to open Visual\
    \ Code.)</p>\n<p>Once you've got your cheat sheet open in the Visual Studio Code\
    \ text editor, type to add the commands we've learned so far to the file. Include\
    \ descriptions about what each command does. Remember, this cheat sheet is for\
    \ you. Write descriptions that make sense to you or take notes about questions.</p>\n\
    <p>Save the file.</p>\n<p>Once you're done, check the contents of the file on\
    \ the command line with the <code>cat</code> command followed by the name of your\
    \ file.</p>"
  challenge_title: ''
  keywords: []
  order: 8
  questions:
  - answers:
      correct:
      - It replaces the content of the <code>introduction.txt</code> file with the
        line "Hello! My Name is Mark!"
      incorrect:
      - It adds the line "Hello! My Name is Mark!" to the existing content of the
        <code>introduction.txt</code> file.
      - It checks whether the content of the <code>introduction.txt</code> file contains
        the line "Hello! My Name is Mark!"
      - None of the above.
    question: 'What does effect does the following command produce?

      <div class="codehilite"><pre><span></span><code><span class="gp">$</span> <span
      class="nb">echo</span> <span class="s2">&quot;Hello! My Name is Mark!&quot;</span>
      &gt; introduction.txt

      </code></pre></div>'
  solution: '<ul>

    <li>

    <p>Step 1

    &nbsp;&nbsp;&nbsp;&nbsp;<code>console

    &nbsp;&nbsp;&nbsp;&nbsp;$ code cheat-sheet.txt</code></p>

    </li>

    <li>

    <p>Step 2

    &nbsp;&nbsp;&nbsp;&nbsp;```console

    &nbsp;&nbsp;&nbsp;&nbsp;$ cat cheat-sheet.txt

    &nbsp;&nbsp;&nbsp;&nbsp;My Institute Cheat Sheet</p>

    <p>ls

    lists files and folders in a directory</p>

    <p>cd ~

    change directory to home folder</p>

    <p>...

    ```</p>

    </li>

    </ul>'
  solution_title: ''
  text: "<p>In this section, we'll create a text file that we can use as a cheat sheet.\
    \ You can use it to keep track of all the awesome commands you're learning.</p>\n\
    <h2><code>Echo</code></h2>\n<p>Instead of creating an empty file like we did with\
    \ <code>touch</code>, let's try creating a file with some text in it. But first,\
    \ let's learn a new command: <code>echo</code>.</p>\n<div class=\"codehilite\"\
    ><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">echo</span>\
    \ <span class=\"s2\">\"Hello from the command line\"</span>\n<span class=\"go\"\
    >Hello from the command line</span>\n</code></pre></div>\n<h2>Redirect (<code>&gt;</code>)</h2>\n\
    <p>By default, the echo command just prints out the text we give it. Let's use\
    \ it to create a file with some text in it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"This\
    \ is my cheat sheet\"</span> &gt; cheat-sheet.txt\n</code></pre></div>\n<p>Now\
    \ let's check the contents of the directory:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/projects</span>\n\
    <span class=\"gp\">$</span> ls\n<span class=\"go\">cheat-sheet.txt</span>\n</code></pre></div>\n\
    <p>OK, so the file has been created. But what was the <code>&gt;</code> in the\
    \ command we used? On the command line, a <code>&gt;</code> is known as a \"redirect.\"\
    \ It takes the output of a command and puts it in a file. Be careful, since it's\
    \ possible to overwrite files with the <code>&gt;</code> command.</p>\n<p>If you\
    \ want to add text to a file but <em>not</em> overwrite it, you can use the <code>&gt;&gt;</code>\
    \ command, known as the redirect and append command, instead. If there's already\
    \ a file with text in it, this command can add text to the file <em>without</em>\
    \ destroying and recreating it.</p>\n<h2><code>Cat</code></h2>\n<p>Let's check\
    \ if there's any text in <code>cheat-sheet.txt</code>.</p>\n<div class=\"codehilite\"\
    ><pre><span></span><code><span class=\"gp\">$</span> cat cheat-sheet.txt\n<span\
    \ class=\"go\">This is my cheat sheet</span>\n</code></pre></div>\n<p>As you can\
    \ see, the <code>cat</code> command prints the contents of a file to the screen.\
    \ <code>cat</code> stands for \"concatenate,\" because it can link strings of\
    \ characters or files together from end to end.</p>\n<h2>A Note on File Naming</h2>\n\
    <p>Your cheat sheet is titled <code>cheat-sheet.txt</code> instead of <code>cheat\
    \ sheet.txt</code> for a reason. Can you guess why?</p>\n<p>Try to make a file\
    \ titled <code>cheat sheet.txt</code> and observe what happens.</p>\n<p>Now imagine\
    \ you're attempting to open a very important data file using the command line\
    \ that is titled <code>cheat sheet.txt</code></p>\n<p>For your digital best practices,\
    \ we recommend making sure that file names contain no spaces\u2014you can use\
    \ creative capitalization, dashes, or underscores instead. Just keep in mind that\
    \ the macOS and Unix file systems are usually pre-configured as cAsE-pReSeRvInG,\
    \ which means that capitalization matters when you type commands to navigate between\
    \ or do things to directories and files. You may also want to avoid using periods\
    \ in your file names, as they sometimes can prompt you to confuse them with system\
    \ files or file extensions (e.g., the full name of a PDF file is usually <code>file.pdf</code>).</p>\n\
    <h2>Using a Text Editor</h2>\n<p>The challenge for this section will be using\
    \ a text editor, specifically Visual Studio Code (<a href=\"/installations/\"\
    >install guide here</a>), to add some of the commands that we've learned to the\
    \ newly created cheat sheet. Text editors are programs that allow you to edit\
    \ plain text files, such as <code>.txt</code>, <code>.py</code> (Python scripts),\
    \ and <code>.csv</code> (comma-separated values, also known as spreadsheet files).\
    \ Remember not to use programs such as Microsoft Word to edit text files, since\
    \ they add invisible characters that can cause problems.</p>"
  title: Creating a Cheat Sheet
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 9
  questions:
  - answers:
      correct:
      - Pipes let you take the output of one command and use it as the input for another.
      - Pipes allow you to combine multiple commands in a single line.
      incorrect:
      - Pipes let you work on multiple files at the same time.
    question: What do pipes allow you to do?
  solution: ''
  solution_title: ''
  text: '<p>So far, you''ve learned a number of commands and one special symbol, the
    <code>&gt;</code> or redirect. Now we''re going to learn another, the <code>|</code>
    or "pipe."</p>

    <p>Pipes let you take the output of one command and use it as the input for another.</p>

    <p>Let''s start with a simple example:</p>

    <div class="codehilite"><pre><span></span><code><span class="gp">$</span> <span
    class="nb">echo</span> <span class="s2">"Hello from the command line"</span> <span
    class="p">|</span> wc -w

    <span class="go">5</span>

    </code></pre></div>

    <p>In this example, we take the output of the <code>echo</code> command ("Hello
    from the command line") and pipe it to the <code>wc</code> or word count command,
    adding a flag <code>-w</code> for number of words. The result is the number of
    words in the text that we entered. Flags marked with hyphens, such as <code>-l</code>
    or <code>-m</code>, indicate options which belong to specific commands.</p>

    <p>Let''s try another. What if we wanted to put the commands in our cheat sheet
    in alphabetical order?</p>

    <p>Use <code>pwd</code> and <code>cd</code> to make sure you''re in the folder
    with your cheat sheet. Then try:</p>

    <div class="codehilite"><pre><span></span><code><span class="gp">$</span> cat
    cheat-sheet.txt <span class="p">|</span> sort

    </code></pre></div>

    <p>You should see the contents of the cheat sheet file with each line rearranged
    in alphabetical order. If you wanted to save this output, you could use a <code>&gt;</code>
    to print the output to a file, like this:</p>

    <div class="codehilite"><pre><span></span><code><span class="gp">$</span> cat
    cheat-sheet.txt <span class="p">|</span> sort &gt; new-cheat-sheet.txt

    </code></pre></div>'
  title: Pipes
  workshop: command-line
- challenge: '<p>Use the commands you''ve learned so far to create a new version of
    the <code>nypl_items.csv</code> file with the duplicated lines removed. (Hint:
    <em>redirects</em> from the lesson when we made a <a href="https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=8">cheat
    sheet</a> are your friend.)</p>'
  challenge_title: ''
  keywords:
  - Path
  order: 10
  questions:
  - answers:
      correct:
      - Flags are a common way to specify options for command line programs.
      incorrect:
      - Flags allow you to earmark the file you are working on.
      - Flags are useful to create a new version of the file you are working on, while
        preserving the old version for future access.
    question: What do command line flags allow you to do?
  solution: '<p>Type <code>pwd</code> to see where on your computer you are located.
    If you are not in the <code>projects</code> folder we just created, navigate to
    that folder using the commands you learned in the <a href="https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=6">lesson
    on navigation</a>.</p>

    <p>Type <code>ls</code> to check whether the file <code>nypl_items.csv</code>
    is in your projects folder.</p>

    <p>Type <code>cat nypl_items.csv | uniq &gt; new_nypl_items.csv</code> to create
    a new version of the <code>nypl_items.csv</code> file with the duplicated lines
    removed.</p>'
  solution_title: ''
  text: "<p>So far the only text file we've been working with is our cheat sheet.\
    \ Now, this is where the command line can be a very powerful tool: let's try working\
    \ with a large text file, one that would be too large to work with by hand.</p>\n\
    <p>Let's download the data we're going to work with:</p>\n<p><a href=\"https://github.com/DHRI-Curriculum/command-line/raw/v2.0/files/nypl_items.csv\"\
    \ target=\"_blank\">Download <code>nypl_items.csv</code></a></p>\n<p>Our data\
    \ set is a list of public domain items from the New York Public Library. It's\
    \ in <code>.csv</code> format, which is a plain text spreadsheet format. CSV stands\
    \ for \"comma separated values,\" and each field in the spreadsheet is separated\
    \ with a comma. It's all still plain text, though, so we can manipulate the data\
    \ using the command line.</p>\n<h2>Move Command</h2>\n<p>Once the file is downloaded,\
    \ move it from your <code>Downloads</code> folder to the <code>projects</code>\
    \ folder on your desktop\u2014either through the command line, or drag and drop\
    \ in the GUI. Since this is indeed a command line workshop, you should try the\
    \ former!</p>\n<p>To move this file using the command line, you first need to\
    \ navigate to your <code>Downloads</code> folder where that file is saved. Then\
    \ type the <code>mv</code> command followed by the name of the file you want to\
    \ move and then the file path to your <code>projects</code> folder on your desktop,\
    \ which is where you want to move that file to (note that <code>~</code> refers\
    \ to your home folder):</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> mv nypl_items.csv ~/Desktop/projects/\n</code></pre></div>\n\
    <p>You can then navigate to that <code>projects</code> folder and use the <code>ls</code>\
    \ command to check that the file is now there.</p>\n<h2>Viewing Data in the Command\
    \ Line</h2>\n<p>Try using <code>cat</code> to look at the data. You'll find it\
    \ all goes by too fast to get any sense of it. (You can click <kbd>control</kbd>\
    \ + <kbd>c</kbd> on your keyboard to cancel the output if it's taking too long.)</p>\n\
    <p>Instead, let's use another tool, the <code>less</code> command, to get the\
    \ data one page at a time:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> less nypl_items.csv\n<span class=\"go\">...</span>\n</code></pre></div>\n\
    <p><code>less</code> gives you a paginated view of the data; it will show you\
    \ contents of a file or the output from a command or string of commands, page\
    \ by page.</p>\n<p>To view the file contents page by page, you may use the following\
    \ keyboard shortcuts (that should work on Windows using Git Bash or on macOS terminal):</p>\n\
    <p>Click the <kbd>f</kbd> key to view forward one page, or the <kbd>b</kbd> key\
    \ to view back one page.</p>\n<p>Once you're done, click the <kbd>q</kbd> key\
    \ to return to the command line.</p>\n<p>Let's try two more commands for viewing\
    \ the contents of a file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> head nypl_items.csv\n<span class=\"go\">...</span>\n<span\
    \ class=\"gp\">$</span> tail nypl_items.csv\n<span class=\"go\">...</span>\n</code></pre></div>\n\
    <p>These commands print out the very first (the \"head\") and very last (the \"\
    tail\") sections of the file, respectively.</p>\n<h2>Cleaning the Data</h2>\n\
    <p>We didn't tell you this before, but there are duplicate lines in our data!\
    \ Two, to be exact. Before we try removing them, let's see how many entries are\
    \ in our <code>.csv</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span\
    \ class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> wc -l\n\
    <span class=\"go\">100001</span>\n</code></pre></div>\n<p>This tells us there\
    \ are 100,001 lines in our file. The <code>wc</code> tool stands for \"word count,\"\
    \ but it can also count characters and lines in a file. We tell <code>wc</code>\
    \ to count lines by using the <code>-l</code> flag. If we wanted to count characters,\
    \ we could use <code>wc -m</code>.</p>\n<p>To find and remove duplicate lines,\
    \ we can use the <code>uniq</code> command. Let's try it out:</p>\n<div class=\"\
    codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv\
    \ <span class=\"p\">|</span> uniq <span class=\"p\">|</span> wc -l\n<span class=\"\
    go\">99999</span>\n</code></pre></div>\n<p>OK, the count went down by two because\
    \ the <code>uniq</code> command removed the duplicate lines. But which lines were\
    \ duplicated?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"\
    gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> uniq -d\n<span class=\"\
    go\">...</span>\n</code></pre></div>\n<p>The <code>uniq</code> command with the\
    \ <code>-d</code> flag prints out the lines that have duplicates.</p>"
  title: Exploring Text Data
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 11
  questions: []
  solution: ''
  solution_title: ''
  text: "<h2>A Favorite Command Line Feature: Tab Completion</h2>\n<p>When you are\
    \ navigating in the command line, typing folder and file names can seem to go\
    \ against the promise of easier communication with your computer. Here comes <em>tab\
    \ completion</em>, stage right!</p>\n<p>When you need to type out a file or folder\
    \ name\u2014for example, the name of that csv file we've been working with: <code>nypl_items.csv</code>\u2014\
    in the command line and want to move more quickly, you can just type out the beginning\
    \ characters of that file name up until it's distinct in that folder and then\
    \ click the <kbd>tab</kbd> key. And voil\xE0! Clicking that <kbd>tab</kbd> key\
    \ will complete the rest of that name for you, and it only works if that file\
    \ or folder already exists within your working directory.</p>\n<p>In other words,\
    \ anytime in the command line you can type as much of the file or folder name\
    \ that is unique within that directory, and <kbd>tab</kbd> complete the rest!</p>\n\
    <h2>Clearing Text</h2>\n<p>If all the text remaining in your terminal window is\
    \ starting to overwhelm you, you have some options. You may type the <code>clear</code>\
    \ command into the command line, or click the <kbd>command (\u2318)</kbd> and\
    \ <kbd>k</kbd> keys to clear the scrollback. Pressing the <kbd>command (\u2318\
    )</kbd> and <kbd>l</kbd> keys in macOS, or <kbd>control</kbd> and <kbd>l</kbd>\
    \ in Windows will clear the output from your most recent command.</p>"
  title: Interlude
  workshop: command-line
- challenge: <p>Use the <code>grep</code> command to explore our <code>.csv</code>
    file a bit. What areas are best covered by the data set?</p>
  challenge_title: ''
  keywords: []
  order: 12
  questions:
  - answers:
      correct:
      - It searches the given file for lines containing a match to the given strings
        or words.
      - It can be combined with other commands, so as to produce a search that matches
        their output.
      incorrect:
      - It produces a new file with the lines containing the strings or words you
        are searching.
      - It delete the strings or words you are searching from a file.
    question: Let's think about the <code>grep</code> command.
  solution: <p>If you want to get a little more milage out of the <code>grep</code>
    command, refer to <a href="https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux">this
    tutorial on grep and regular expressions</a>. Regular expressions (or regex) provide
    methods to search for text in more advanced ways, including specific wildcards,
    matching ranges of characters such as letters and numbers, and detecting features
    such as the beginning and end of lines. If you want to experiment with regular
    expressions in an easy-to-use environment, numerous regex test interfaces are
    available from <a href="https://www.google.com/search?w&amp;q=regex+tester">a
    simple google search</a>, such as <a href="https://regexr.com/">RegExr</a>, which
    includes a handy cheat sheet.</p>
  solution_title: ''
  text: '<p>So we''ve cleaned our data set, but how do we find entries that use a
    particular term?</p>

    <p>Let''s say I want to find all the entries in our data set that use the term
    "Paris."</p>

    <p>Here we can use the <code>grep</code> command. <code>grep</code> stands for
    "global regular expression print." The <code>grep</code> command processes text
    line by line and prints any lines which match a specified pattern. Regular expressions
    are special strings representing a pattern to be matched in a search operation.
    <code>grep</code> gives us access to the power of regular expressions as we search
    for text.</p>

    <div class="codehilite"><pre><span></span><code><span class="gp">$</span> cat
    nypl_items.csv <span class="p">|</span> grep -i <span class="s2">"paris"</span>

    <span class="go">...</span>

    </code></pre></div>

    <p>This will print out all the lines that contain the word "Paris." (The <code>-i</code>
    flag makes the command ignore capitalization.) Let''s use our <code>wc -l</code>
    command to see how many lines that is:</p>

    <div class="codehilite"><pre><span></span><code><span class="gp">$</span> cat
    nypl_items.csv <span class="p">|</span> grep -i <span class="s2">"paris"</span>
    <span class="p">|</span> wc -l

    <span class="go">191</span>

    </code></pre></div>

    <p>Here we have asked <code>cat</code> to read <code>nypl_items.csv</code>, take
    the output and pipe it into the <code>grep -i</code> command, which will ignore
    capitalization and find all instances of the word <code>paris</code>. We then
    take the output of that <code>grep</code> command and pipe it into the word count
    <code>wc</code> command with the <code>-l</code> lines option. The pipeline returns
    <code>191</code> letting us know that "Paris" (or "paris") occurs on 191 lines
    of our data set.</p>'
  title: Searching Text Data
  workshop: command-line
- challenge: ''
  challenge_title: ''
  keywords: []
  order: 13
  questions: []
  solution: ''
  solution_title: ''
  text: "<p>Now is a good time to do a quick review!</p>\n<p>In this session, we learned:</p>\n\
    <ul>\n<li>how to use <code>touch</code> and <code>echo</code> to create files</li>\n\
    <li>how to use <code>mkdir</code> to create folders</li>\n<li>how to navigate\
    \ our file structure by <code>cd</code>(change directory), <code>pwd</code> (print\
    \ working directory), and <code>ls</code> (list)</li>\n<li>how to use redirects\
    \ (<code>&gt;</code>) and pipes (<code>|</code>) to create a pipeline</li>\n<li>how\
    \ to explore a comma separated values (<code>.csv</code>) dataset using word and\
    \ line counts, <code>head</code> and <code>tail</code>, and the concatenate command\
    \ <code>cat</code></li>\n<li>how to search text files using the <code>grep</code>\
    \ command</li>\n</ul>\n<p>And we made a <a href=\"https://curriculum.dhinstitutes.org/workshops/command-line/lessons/?page=8\"\
    \ target=\"_blank\">cheat sheet</a> for reference!</p>\n<p>When we started, we\
    \ reviewed what text is\u2014whether plain or enriched. We learned that text editors\
    \ that don't fix formatting of font, color, and size, do allow for more flexible\
    \ manipulation and multi-program use. If text is allowed to be a string of characters\
    \ (and not specific characters chosen for their compliance with a designer's intention),\
    \ that text can be fed through programs and altered with automated regularity.\
    \ Text editors are different software than Bash (or Terminal), which is a text-based\
    \ shell that allows you to interact directly with your operating system giving\
    \ direct input and receiving output.</p>"
  title: What We Have Learned
  workshop: command-line
praxis:
  discussion_questions:
  - label: What are some of the operations that using the command line, as opposed
      as your GUI, allows you to perform?
    order: 1
    workshop: command-line
  - label: What has learning to use the command line taught you about your machine?
    order: 2
    workshop: command-line
  further_projects:
  - annotation: Here are some [further command line challenges](sections/15-challenges.md)
      devised by the GCDI team
    title: further command line challenges
    url: sections/15-challenges.md
  - annotation: 'When working with digital tools, it''s usually a good idea to familiarize
      with their documentation. Here''s the [Bash Reference Manual](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html),
      where you can find Bash features for beginners and advanced users.  '
    title: Bash Reference Manual
    url: https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html
  - annotation: '[Pandoc](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown)
      is an online software that allows users to convert file types through the commandline
      (from markdown to PDF, for example). '
    title: Pandoc
    url: https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown
  - annotation: '[youtube-dl](https://ytdl-org.github.io/youtube-dl/index.html) is
      a command-line exercise to download videos from YouTube.com. It requires the
      Python interpreter.'
    title: youtube-dl
    url: https://ytdl-org.github.io/youtube-dl/index.html
  - annotation: Feeling super brave? You might want to give [MALLET (MAchine Learning
      for LanguagE Toolkit)](http://mallet.cs.umass.edu/) a shot! MALLETT is a "a
      Java-based package for statistical natural language processing, document classification,
      clustering, topic modeling, information extraction, and other machine learning
      applications to text." It includes tools for document classification, sequence
      tagging, topic modeling, and numerical optimization.
    title: MALLET (MAchine Learning for LanguagE Toolkit)
    url: http://mallet.cs.umass.edu
  further_readings:
  - annotation: Are you wondering how (else) the command line can be deployed for
      your scholarship? [Dennis Tenen and Grant Wythoff's "Sustainable Authorship
      in Plain Text using Pandoc and Markdown"](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown)
      have some answers for you.
    title: Dennis Tenen and Grant Wythoff's "Sustainable Authorship in Plain Text
      using Pandoc and Markdown"
    url: https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown
  - annotation: 'Stephen Ramsay is a scholar that has thought at length about the
      way the command line is (or can be!) embedded in a researcher''s praxis. If
      you''re interested in reading his work, here are two of his finest essays: ["Life
      on the Command Line"](https://files.zotero.net/eyJleHBpcmVzIjoxNTkyNjY1MDk3LCJoYXNoIjoiODFkNDJmZmU1ZjU3YzRmMDE2YTQ1ZmQwY2YzOTUwYmIiLCJjb250ZW50VHlwZSI6InRleHRcL2h0bWwiLCJjaGFyc2V0IjoidXRmLTgiLCJ6aXAiOjF9/07826342b83ea870f846cfa48f1b0eb8d3d51b78ceb1b05b1e014467d7241904/life-on-the-command-line.html)
      and ["Programming with Humanists: Reflections on Raising an Army of Hacker-Scholars
      in the Digital Humanities"](https://www.openbookpublishers.com/htmlreader/DHP/chap09.html)'
    title: '"Life on the Command Line"'
    url: https://files.zotero.net/eyJleHBpcmVzIjoxNTkyNjY1MDk3LCJoYXNoIjoiODFkNDJmZmU1ZjU3YzRmMDE2YTQ1ZmQwY2YzOTUwYmIiLCJjb250ZW50VHlwZSI6InRleHRcL2h0bWwiLCJjaGFyc2V0IjoidXRmLTgiLCJ6aXAiOjF9/07826342b83ea870f846cfa48f1b0eb8d3d51b78ceb1b05b1e014467d7241904/life-on-the-command-line.html
  intro: <p>You've made it through your introduction to the command line! By now,
    you have experienced some of the power of communicating with your computer using
    text commands. The basic steps you learned today will help as you'll further your
    digital skills. For example, you might work with the command line interface to
    set up your <a href="https://github.com/DHRI-Curriculum/git">version control with
    git</a> or you'll have your text editor open while <a href="https://github.com/DHRI-Curriculum/python">writing
    python scripts</a> or building basic websites with <a href="https://github.com/DHRI-Curriculum/html-css">HTML
    and CSS</a>. Having a grasp of command line basics will not only make you more
    familiar with how your computer and basic programming work, but it will also give
    you access to tools and communities that will expand your research.</p>
  more_resources: []
  next_steps: []
  tutorials:
  - annotation: '[*Data Science at the Command Line*](https://www.datascienceatthecommandline.com/)
      is an open access e-book by Jeroen Janssens, a hands-on guide that can help
      you become a more efficient and productive data scientist through the use of
      the command line.'
    label: '*Data Science at the Command Line*'
    url: https://www.datascienceatthecommandline.com
  - annotation: '[BashGuide](http://mywiki.wooledge.org/BashGuide) offers some good
      practice techniques for taking your BASH skills to a higher level by teaching
      you write some simple scripts.'
    label: BashGuide
    url: http://mywiki.wooledge.org/BashGuide
  workshop: command-line
workshop:
  image: /Users/kallewesterling/Repositories/django-app/website/static/website/images/workshop_headers/command-line/header@3x.png
  name: Introduction to the Command Line
  parent_backend: Github
  parent_branch: v2.0
  parent_repo: DHRI-Curriculum/command-line
  slug: command-line
