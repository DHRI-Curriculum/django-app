[{"model": "workshop.workshop", "pk": 51, "fields": {"name": "Project Lab", "slug": "project-lab", "created": "2020-07-15T22:01:25.409Z", "updated": "2020-07-15T22:01:25.409Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/project-lab", "parent_branch": "v2.0rhody-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 51, "fields": {"workshop": 51, "abstract": "The Project Lab is designed to help you develop a  **reasonable, informed, and purposeful plan** for your digital project that can be used with modifications for multiple purposes: to propose a seminar, capstone, or dissertation project; to submit a grant proposal or funding request; to communicate clearly with potential partners or collaborators; to guide project management; or to build out a publication about your work.", "estimated_time": "3", "projects": [130, 131], "resources": [], "readings": [278, 279], "contributors": [184, 185], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 51, "fields": {"discussion_questions": "['Now that you have a project proposal and draft toward a plan, what areas do you need to further develop to make the plan viable? ', 'What models of collaboration are you considering for your project? What challenges do you think your project may confront in working with other scholars? ', 'How does your project proposal recognize the contributions of various types of intellectual, techical, and emotional labor?']", "next_steps": "['building a project as part of a class;', 'writing a proposal for NEH funding; ', 'applying for faculty develompent or institutional funding to develop a pilot or early version of your project idea.']", "workshop": 51, "further_readings": [280, 281, 282, 283], "more_projects": [], "more_resources": [], "tutorials": [140, 141]}}, {"model": "lesson.lesson", "pk": 444, "fields": {"title": "Begin by Thinking About the End", "created": "2020-07-15T22:01:25.411Z", "updated": "2020-07-15T22:01:25.411Z", "workshop": 51, "text": "<h2>What does \"done\" look like?</h2>\n<p>Most digital projects come to an end at some point, in one way or another. We either simply stop working on them, or we forget about them, or we move on to something else. Few digital projects have an end \"form\" in the way that we think of a monograph. We rarely think of digital scholarship in its \"done\" form, but sooner or later even if they're not \"finished\"\u2014so to speak\u2014at some point, these projects end. </p><p>\nDone can take many different shapes: \n* it can morph into something new;\n* it can be retired;\n* it can be archived in a repository;\n* it can be saved on some form of storage media;\n* it can run out of funding; \n* and sometimes <strong>you</strong> are done with it!</p><p>\nSo it's helpful to think about what you want \"done\" to look like before you begin, because then you always have a sense of what will make a satisfactory ending to the work you're about to embark on. </p>\n<h2>Activity</h2>\n<ul>\n<li>Imagine what your project is like when it's over. Imagine what it means to you to set it down and walk away. What will you do with it? How will you know if it succeded? Who was the last person to care about it? Why? </li>\n<li>Now, Describe your 2-3 sentences to a non-expert audience the purpose of your project. </li>\n<li>Does it solve a problem? </li>\n<li>Meet an institutional need? </li>\n<li>Put an existing resource to new use?</p><p>\n # Identifying Audiences, Constituencies, and Collaborators</li>\n<li>Who will participate in, use, and/or benefit from the project? </li>\n<li>Is there a specific group already asking for this new resource? Who? </li>\n<li>The \"general public\" is too general an audience. the more specific your audience is the more likely you are to meet their needs. </li>\n<li>Is there anything that my audience can bring to my project?</li>\n</ul>\n<h2>Your project <strong>always</strong> has an audience.</h2>\n<ul>\n<li><em>You</em> are an audience. </li>\n<li>Your dissertation advisor</li>\n<li>Your dissertation committee</li>\n<li>Researchers interested in your subject area</li>\n<li>Researchers working on related questions</p><p>\n<em>Projects typically satisfy more than one audience's need. The key to identifying a well-defined audience is research and creating several narrow profiles</em></li>\n</ul>\n<h3>Sample 1:</h3>\n<ol>\n<li>Needs/Interest: Faculty who teach undergraduate linguistics classes are looking for an engaging way to teach fundamental linguistics concepts through guided practice and repetition. </li>\n<li>Resources: They have access to chrome books, laptops, and tablets in the classroom with limited wifi. They are unable to update software frequently, but they can use web applications. </li>\n<li>Limitations: This audience needs clear and specific documentation and has a low threshold for errors. </li>\n</ol>\n<h3>Sample 2:</h3>\n<ol>\n<li>Needs/Interest: My dissertation committee is interested in hearing how my model of financial data offers a new approach to predicting corporate fraud. </li>\n<li>Resources/Relationship: The committee is familiar with some of the models that already exist. They have deep familiarity with the qualitative indicators for corporate fraud. They can connect my data and my research to a wider community of scholars who have the datasets that I need to finish my work. My advisor wants me to succeed. </li>\n<li>Limitations: My committee is skeptical about technology and feels uncertain about how they will evaluate my work. They have expressed concern about not knowing how to \"check\" if the model is accurate. </p><p>\nIf you are working on a project that is institutionally based (such as creating a platform, creating a resource, or building a teaching tool), you may have institutaional partners who have a stake in your project's success.  It's a good idea to identify these folks and consider their interests and needs as well. </p><p>\nPossible stakeholders include: your library, colleagues, IT division, academic program, a center, or institute who shares your mission and/or goals. </p><p>\nExample of a \"stakeholder\":</li>\n</ol>\n<h3>Sample:</h3>\n<ol>\n<li>Needs: The New Media Lab has student fellows who develop digital projects. They have expressed interest in finding a data management tool that allows students to create a plan for how to handle various types of data files. </li>\n<li>Resources/Relationships: I'm also a fellow in the New Media Lab, and they might be willing to help test my tool. </li>\n<li>Limitations/Concessions: They are more interested in using open source software than many of the other students I work with. </li>\n</ol>\n<h2>Activity: Your Turn</h2>\n<h3>Audience 1:</h3>\n<ol>\n<li>Needs/Interest: </li>\n<li>Resources/Relationship: </li>\n<li>Limitations/Concessions: </li>\n</ol>\n<h3>Audience 2:</h3>\n<ol>\n<li>Needs/Interest: </li>\n<li>Resources/Relationship: </li>\n<li>Limitations/Concessions: </li>\n</ol>\n<h3>Audience 3:</h3>\n<ol>\n<li>Needs/Interest: </li>\n<li>Resources/Relationship: </li>\n<li>Limitations/Concessions: </li>\n</ol>\n<h3>Audience 4:</h3>\n<ol>\n<li>Needs/Interest: </li>\n<li>Resources/Relationship: </li>\n<li>Limitations/Concessions: </li>\n</ol>\n<h3>Internal Stakeholder:</h3>\n<ol>\n<li>Needs/Interest: </li>\n<li>Resources/Relationship: </li>\n<li>Limitations/Concessions:</li>\n</ol>", "order": 1}}, {"model": "lesson.lesson", "pk": 445, "fields": {"title": "Environmental Scan (Literature and Technology Review)", "created": "2020-07-15T22:01:25.413Z", "updated": "2020-07-15T22:01:25.414Z", "workshop": 51, "text": "<p>Conducting an in-depth environmental scan and literature review early in the planning process is a critical step to see if there are existing projects that are similar to your own or that may accomplish similar goals to your potential project. Sometimes, the planning process stops after the scan because you find that someone has already done it! Typically, a scan is useful in articulating and justifying the \"need\" for your research OR to justify your choice of one technology in lieu of others. Performing an environmental scan early and reviewing and revising it periodically will go a long way to help you prove that your project fills a current need for an actual audience. </p><p>\nSuccessful project proposals demonstrate knowledge of the ecosystem of existing projects in your field, and the field's response to those projects. Scans often help organizations identify potential collaborators, national intitiatives, publications, articles, or professional organizations, which in turn can demonstraate a wider exigency for your project. Following a preliminary scan, you should be able to explain why your project is important to the field, what it provides that does not currently exist, and how your project can serve as a leader or example to other organizations in such a way that they can put your findings to new issue. </p><p>\nBelow are <strong>suggestions</strong> for finding similar projects and initiatives in and outside of your field: </p>\n<h2>Federal grant agencies maintain repositories with white papers from previously funded grant projects:</h2>\n<ul>\n<li>Institute of Museum and Library Services</li>\n<li>National Endowment for the Humanities Funded Projects Query Form</li>\n<li>National Endowment for the Arts (NEA) Recent Grants </li>\n<li>National Science Foundation</li>\n<li>National Institutes of Health</li>\n</ul>\n<h2>Search and browse through literature in the field and resources for digital tools and innovations. Some examples of places to look include:</h2>\n<ul>\n<li>IMLS UpNext https://www.imls.gov/news-events/upnext-blog</li>\n<li>D-Lib Magazine http://www.dlib.org/</li>\n<li>The Signal: Digital Preservation http://blogs.loc.gov/digitalpreservation/</li>\n<li>Curator Journal http://onlinelibrary.wiley.com/journal/10.1111/(ISSN)2151-6952</li>\n<li>American Archivist http://www2.archivists.org/american-archivist#.V1kWCZMrLGI</li>\n<li>Informal Science http://www.informalscience.org/</li>\n<li>Center for the Future of Museums http://www.aam-us.org/resources/center-for-the-future-of-museums</li>\n<li>OCLC blogs http://www.oclc.org/blog/main/</li>\n<li>DiRT registry of digital humanities tools http://dirtdirectory.org/</li>\n<li>Digital Humanities Now http://digitalhumanitiesnow.org/</li>\n<li>SSRC's Items http://items.ssrc.org/</li>\n<li>Ant, Spider, Bee http://www.antspiderbee.net/</li>\n<li>PLOS http://blogs.plos.org/ &amp; http://blogs.plos.org/collections/</li>\n<li>The Winnower https://thewinnower.com/topics</li>\n<li>HubZero https://hubzero.org/groups/browse</li>\n<li>AAAS Trellis https://www.trelliscience.com/#/site-home</li>\n</ul>\n<h3>Other places to check:</h3>\n<ul>\n<li>Search preprint repositories, academic repositories, and data warehouses for similar datasets</li>\n<li>Check conference programs and gray literature from your field and related materials. </li>\n<li>Discuss your project idea with your colleagues inside and outside of your own department at your institution, at conferences, and even with peers in different fields.</li>\n</ul>", "order": 2}}, {"model": "lesson.lesson", "pk": 446, "fields": {"title": "Activity", "created": "2020-07-15T22:01:25.417Z", "updated": "2020-07-15T22:01:25.417Z", "workshop": 51, "text": "<p>The key to the environmental scan is to see what a wider community is already up to. How does your project fit into the ongoing work of others in your field? What about in a related field that addresses a similar question from another perspective? Is someone already working on a similar question? </p><p>\n1. Brainstorm where you might go to look for digital projects in your field that use emerging or new forms of technology. Try to list 3 places you might look to see how others in your field are adapting their methods to use new digital tools. </p><p>\n2. What technologies/methods do most people use in your field, if any, for capturing, storing, exploring/analyzing, or displaying their data? Why do they tend to use it? Is there a reason why you want to use the same technologies as your colleagues? What are the benefits of doing things differently? </p><p>\n3. Does your project fill a need or stake new methodological ground? How do you know? </p><p>\n4. If there aren't any technologies that do <em>exactly</em> what you were hoping for, has anyone else run into this problem? How did they solve it? Will you need to create a new tools or make significant changes to an existing one to accomplish your goal? </p><p>\n5. Once you have gathered information about what is \"out there,\" what are the limits of what you are willing to change about your own project in response? How will you know if you have stretched beyond the core objectives of your own research project?</p>", "order": 3}}, {"model": "lesson.lesson", "pk": 447, "fields": {"title": "Resource Assessment", "created": "2020-07-15T22:01:25.419Z", "updated": "2020-07-15T22:01:25.419Z", "workshop": 51, "text": "<p>The next step in our process is figuring out what resources you have available to you and what you still need in order to accomplish your project's objectives. </p>\n<h2>Types of Resources</h2>\n<ol>\n<li>data</li>\n<li>technology</li>\n<li>human</li>\n<li>institution</li>\n<li>financial</li>\n</ol>\n<h2>Data, Digital Assets, Collections</h2>\n<p>Do you have the dataset you need to do your project? Finding, cleaning, storing, managing changes in, and sharing your data is an often overlooked but <em>extremely</em> important part of designing your project. Successfully finding a good dataset means that you should keep in mind: Is the dataset the appropriate size and complexity to help address your project's goals? Finding, using, or creating a good dataset is a core part of your project's long-term success. </p>\n<h2>Activity:</h2>\n<p><strong> What data resources do you have at your disposal? What do you still need? What steps do you need to take during the course of your project in order to work with the dataset now that you have a general sense of what the data needs to look like if you are working with either textual or numeric data? </strong></p>\n<h3>No?</h3>\n<ul>\n<li>If not, do you know where to go to find it? </li>\n<li>Is it digitized? </li>\n<li>Do you need to create it yourself?</li>\n<li>Is it under copyright? </li>\n<li>Is it free to your institution? over the web? </li>\n<li>Who could you talk to about finding, accessing, or digitizing what you need?</li>\n</ul>\n<h3>Yes?</h3>\n<ul>\n<li>What format does your data need to be in so that you can begin working with it?</li>\n<li>Is the data in a format that you can use? </li>\n<li>If not, how will you get it into that format? How long will it take? Are you unsure? </li>\n<li>What is the biggest challenge that your dataset presents? </li>\n<li>What should go well? </li>\n<li>What makes your dataset interesting? </li>\n<li>Do you plan to make your dataset open? If yes, how will you do that? (GitHub?)</li>\n<li>If you do not plan to make your dataset open, where will you store it? Will you make it available to fellow researchers upon request? How will you communicate that? </li>\n<li>If you do not know what format your data needs to be in, whom will you ask for more information? </li>\n<li>Will your efforts and cleaning and preparing data be useful to anyone else? Would you be willing to share your methods? How would you do so? </li>\n<li>Will your data be standardized so that it can be combined with other datasets? What standards will you use? </li>\n<li>How will you fill gaps? </li>\n<li>How long will it take for you to be able to answer all of these questions? (You are unlikely to be able to do it all today.)</li>\n</ul>\n<h2>Technology</h2>\n<ul>\n<li>Name all the types of technology that you will need to go from \"raw data\" to \"final project\"? If you don't know the name of the technology, you can just describe it. (<strong>Example</strong>: First I will scrape texts from poetry websites like poets.org from the internet using a python library called Beautiful Soup. Next, I will clean my data using Python, explore the data in NLTK to look for coocurrances of the words \"painting\" and \"sea.\" I will store my results using GitHub, and visualize the results using the D3.js libraries. I will use these visualizations to write the second half of my article. When the project is done, I will deposit the dataset into the Academic Works repository.\" )</li>\n<li>Do you need a server or other cloud computing environment? </li>\n<li>Do you have someone who can work on the public-facing presence of the project (design skills)?</li>\n<li>Where will you host your project?</li>\n<li>How much time do you think will need to be dedicated to tech support for the project? </li>\n<li>Do you need mobile devices? 3D printers? other hardware or software? </li>\n<li>Will you choose open source platforms or proprietary ones? </li>\n</ul>\n<h4>Example:</h4>\n<p>Have: basic knowledge of git and python and some nltk</p><p>\nNeed: I need a more powerful computer, to learn how to install and use Beautiful Soup, and to get help cleaning the data. I will also need to learn about the D3.js library. </p>\n<h2>Human resources</h2>\n<p>Looking back at the Audiences worksheet, review which of your audiences were invested in your work. Who can you draw on for support? Consider the various roles that might be necessary for the project. Who will fill those roles? \n* design\n* maintenance and support\n* coding/programming\n* outreach / documentation\n* project management</p>\n<h3>Locally:</h3>\n<ul>\n<li>Have you met anyone at this week's institute who is working on a similar kind of project that uses similar methods? </li>\n<li>Are there other colleagues in your program who are interested in using similar technologies or methods? </li>\n<li>Is there a digital scholarship librarian at your college? Have you signed up for the GC Digital Fellows email list? </li>\n<li>Who is going to manage the work of the project? Is it you? What if the project grows? </li>\n<li>Do you need to bring someone on board who has a more extensive digital skill set? Other content knowledge? Describe what that person would do on the project. </li>\n</ul>\n<h3>Remote:</h3>\n<ul>\n<li>Is there an online research community that you could connect to such as an online forum? blog? research center? </li>\n<li>If you have presented at a conference or are part of a scholarly society or other group, do they have a listserv with people who are interested in the same technologies or research questions? </li>\n<li>Do people in your field use Twitter or another social network platform to communicate? Could you create a hashtag for people who share similar research interests and/or technology needs? </li>\n</ul>\n<h2>Institution</h2>\n<ul>\n<li>What resources are available to you through your institution? </li>\n<li>What services or support might be available through the GC Digital Initiatives, the Teaching &amp; Learning Center, the New Media Lab, or the Futures Initiative? If you are not at the GC, does your insitution have a digital research support network? </li>\n<li>Have you joined the CUNY Academic Commons? </li>\n<li>Have you applied for internal funding? Where would you look? </li>\n<li>Are there resources at your institution for hosting, data sharing, and/or preservation?</li>\n</ul>", "order": 4}}, {"model": "lesson.lesson", "pk": 448, "fields": {"title": "Outreach", "created": "2020-07-15T22:01:25.420Z", "updated": "2020-07-15T22:01:25.420Z", "workshop": 51, "text": "<p>Outreach can take many different forms, from presenting your research at conferences and through peer-reviewed scholarly publications, but also through blog posts, Twitter conversations, forums, and/or press releases. The key to a good outreach plan is to being earlier than you think is necessary, and give your work a public presence (via Tumblr, Twitter, website, etc). You can use your outreach contacts to ask for feedback and input as well as share challenges and difficult decisions. \n* Will you create a website for your project? \n* How will you share your work? \n* Will you publish in a traditional paper or in a less-traditional format? \n* Whom will you reach out to get the word out about your work? \n* Is there someone at your college who can help you to publicize your accomplishments? \n* Will you have a logo? Twitter account? Tumblr page? Why or why not? \n* Can you draw on  your colleagues to help get the word out about your work? \n* What information could you share about your project at its earliest stages? \n* Does your project have a title? </p>\n<h2>Activity:</h2>\n<ol>\n<li>Is there a project that you know of that seems to have garnered lots of attention either from a broader public or from your own field? What made that project stand out? How did they share their work? </li>\n<li>Consider the early, middle, and final stages of your project. What kinds of outreach activities could you fit in at each stage? What audiences would you try to reach? Would they change over time?</li>\n</ol>", "order": 5}}, {"model": "lesson.lesson", "pk": 449, "fields": {"title": "Sustainability and Data Management", "created": "2020-07-15T22:01:25.422Z", "updated": "2020-07-15T22:01:25.422Z", "workshop": 51, "text": "<p>You will need to come up with a plan for how you are going to manage the \"data\" created by your project. Data management plans, now required by most funders, will ask for you to list all the types of data and metadata created over the duration of the project and then account for the various manners by which you will account for various versions, make the datasets available openly (if possible) and share your data. </p><p>\nSustainability plans require detailing what format files will be in and accounting for how those files and your data will continue to be accessible to you and/or to your audience or a general public long after the project's completion. </p><p>\nLibrarians are your allies in developing a sound data management and sustainability plan. </p>\n<h2>Activity</h2>\n<p>Very quickly, try to think of all the different types of data your project will involve. \n* Where will you store your data? \n* Is your software open source? \n* What is the likelihood that your files will remain usable? \n* How will you keep track of your data files? \n* Where will the data live after the project is over?</p>", "order": 6}}, {"model": "lesson.lesson", "pk": 450, "fields": {"title": "Effective Partnerships", "created": "2020-07-15T22:01:25.424Z", "updated": "2020-07-15T22:01:25.424Z", "workshop": 51, "text": "<p>After brainstorming your project ideas and assessing your available resources, it is time to scope out potential partners to help fill in gaps and formalize relationships. </p><p>\nplease keep in mind that each project is different. This outline offers suggestions and lessons learned from successful and less successful collaborations. while each project is unique in the way responsibilities are shared, perhaps one universal attribute of successful partnerships is mutual respect. The most successful collaborations are characterized by a demonstrated respect for each partners's time, work, space, staff, or policies in words and actions. </p>\n<h2>Identify what you need:</h2>\n<p>Once you know where you need help, start thinking about who you know who might have those skills, areas of expertise, resources, and interest. \n* Partnerships should be selected on the basis of specific strengths. \n* If you don't know someone who fits the bill, can someone you know introduce you to someone you would like to know? What are some ways of finding someone with skills you don't have if you don't know anyone with those skills? </p>\n<h2>Find Collaborators:</h2>\n<ul>\n<li>Attending conferences and unconferences can be the best way to meet potential collaborators who share similar goals and passions. Informal gatherings are often the best place to chat with folks: \u201cBirds of a Feather\u201d dinners, or affinity group luncheons.</li>\n<li>Talk to a grant program office about your project; they may have some great recommendations.</li>\n<li>Circulate some ideas on your professional social networks to scope out potential partners.</li>\n</ul>\n<h2>Identify a good fit:</h2>\n<ul>\n<li>Talk with a potential collaborator. Introduce yourself by email and schedule a phone call. It\u2019s very important to speak or meet face-to-face with potential collaborators before formalizing partnerships.</li>\n<li>Good partners share in the project\u2019s vision and are committed to the project\u2019s success.</li>\n<li>Good partners respect one another and appreciate what each one brings to the project.</li>\n</ul>\n<h2>Formalize partnerships:</h2>\n<ul>\n<li>Clearly state expectations of work in a written document or contract.</li>\n<li>Make sure each partner understands exactly what their contributions will be, when those contributions are due, and who else is responsible for other pieces.</li>\n<li>Be sure both/all parties are in agreement on issues such as:<ul>\n<li>who takes notes during meetings,</li>\n<li>who manages the budget,</li>\n<li>who is the \u201cdecider\u201d on major project decisions.</li>\n</ul>\n</li>\n<li>Determine who the primary contact for inter-institutional communications will be.</li>\n<li>Designate staff titles and responsibilities, including a description of job responsibilities over the life-cycle of the project.</li>\n</ul>\n<h2>Communicate Effectively:</h2>\n<ul>\n<li>Early on, establish communication norms: including regular meeting times, means for meeting (conference calls, Skype, Hangouts, et al), and best ways to communicating in between meetings (ie, email only), and collect all preferred contact information and publish it somewhere accessible to the entire team.</li>\n<li>Use project management software for organizing project tasks, deadline, deliverable requirements that makes all of this information easily accessible and visible to project collaborators.</li>\n<li>If working with geographically-dispersed collaborators, be sure to schedule face-to-face meetings at a reasonable, yet, regular interval.</li>\n<li>Generally, treat all project team members with respect and engage in common courtesies.</li>\n</ul>\n<h2>Stay flexible:</h2>\n<ul>\n<li>No project is able to anticipate all problems or challenges before they occur, but simply acknowledging that challenges may arise, and allowing time and budget for those challenges is helpful.</li>\n</ul>\n<h2>Bad Marriages:</h2>\n<ul>\n<li>Not all collaborations work out as planned, even with the best of intentions.</li>\n<li>If there is a major breakdown in communications, or if relationships deteriorate, you may need to break apart partnerships.</li>\n</ul>\n<h2>Asking for letters of support</h2>\n<p>When preparing a proposal, you will need mentors, collaborators, or other interested parties to write a strong letter of support for your project that will help your proposal stand out to the reviewers. Some funders want letters from all project participants. </p><p>\nIt is important to respect people\u2019s time when asking them for a letter by showing that you\u2019ve done your research and that you have some grant materials to share with them. Good letters demonstrate some knowledge of the project and recognition of its impact if funded. </p><p>\nFollow these steps when asking for a support letter and for specific types of assistance during the life of the grant, and you should receive a good letter in return.\n* One month before grant deadline, begin brainstorming candidates for letters of support and note which collaborators are required to submit letters of commitment and support. \n* Start asking supporters at least two weeks in advance of grant deadline, because they will also have deadlines and other work competing for their work hours. You may find some folks are on leave at the time you inquire, be sure to have back-ups on your list. \n* Email potential supporters, collaborators:</p><p>\n    * State why, specifically, you are asking Person A for support;</p><p>\n    * Be specific about what you are asking Person A to do over the scope of the grant, if anything, such as participate in 3 meetings, 2 phone calls over 18 months; or  agree to review the project and provide feedback one month before official launch; </p><p>\n    * Provide any information about compensation, especially when asking someone to participate (ie, there will be a modest honorarium to recognize the time you give to this project of $xxx);</p><p>\n    8 Tell supporters what exactly you need to complete the grant application, in what format, and by what date (ie, a 2-page CV in PDF and letter of support on letterhead by next Friday).\n* Attach materials that will be helpful for them when writing the letter.</p><p>\n    * Provide a short project summary that includes the project goals, deliverables, and work plan from the grant proposal draft;</p><p>\n    * Include a starter letter containing sample text that references that person\u2019s or institution\u2019s role and why they are supporting the project.</p>", "order": 7}}, {"model": "lesson.lesson", "pk": 451, "fields": {"title": "Finding Funding", "created": "2020-07-15T22:01:25.426Z", "updated": "2020-07-15T22:01:25.426Z", "workshop": 51, "text": "<p>Now that you have started to form:\n* a more refined project idea;\n* a wider awareness of the ecosystem of existing projects in your field;\n* a sense of the national, local, or institutional demand for your project;\n* and a clearer sense of the resources at your disposal</p><p>\n... the next step is to find an appropriate funding source. Below you will find some suggestions as to where to begin the search for funding. As you look for possible funders, below are some guidelines for the process:</p><p>\n1. Check federal, state, and local grant-making agencies, and local foundations for possibility of grants.</p><p>\n    * Federal agencies list all of their available grants on http://grants.gov.</p><p>\n    * States also have opportunities for grants, such as state humanities councils. </p><p>\n    * Private foundations are also possible areas to look. The following may prove useful: </p><p>\n        * The Foundation Center: [http://foundationcenter.org] (http://foundationcenter.org)</p><p>\n        * A Directory of State and Local Foundations: </p><p>\n        [http://foundationcenter.org/getstarted/topical/sl_dir.html] (http://foundationcenter.org/getstarted/topical/sl_dir.html)</p><p>\n        * The Council on Foundations Community Foundations List</p><p>\n     http://www.conf.org/whoweserve/community/resources/index.cfm?navitemNumber=15626#locator</p><p>\n     * The USDA offers a valuable Guide to Funding Resources [https://www.nal.usda.gov/ric/guide-to-funding-resources] (https://www.nal.usda.gov/ric/guide-to-funding-resources)</p><p>\n2. Check your institution\u2019s eligibility for a potential grants before beginning the application process. Eligibility requirements and restrictions are often found in grant guidelines.</p><p>\n3. Review the types of projects this program funds, and consider how your project fits with the agency or foundation\u2019s mission and strategic goals.</p><p>\n4. Review a potential grant program\u2019s deadlines and requirements (including proposal requirements and format for submission).</p><p>\n5. Identify funding levels/maxes, and keep them close at hand as you develop your budget.</p><p>\n6. Jenny Furlong Director of the Office of Career Services will be here tomorrow, and she is an excellent resource for those interested in external fellowships. </p>\n<h2>Activity</h2>\n<p>Find one or two grant opportunites in your subject area. Consider also looking for fellowship opportunities. </p>\n<h2>Short Project Proposal (2-3 pages)</h2>\n<p>What follows is a template for writing a short project proposal that, once developed, will position you to move forward with building partnerships with other institutions or for pursuing funding opportunities. Though this template does not directly reflect a specific grant narrative format, the short project proposal includes important project-development steps that can later form the basis for a wide variety of grant narratives.</p>\n<h2>Project Details</h2>\n<ul>\n<li>Title:</li>\n<li>Lead Applicant/PI:</li>\n<li>Funding Opportunity:</li>\n<li>Proposal Deadline</li>\n</ul>\n<h2>Abstract</h2>\n<p>150 word summary of project: (1 short paragraph)</p>\n<h2>The Need</h2>\n<p>Statement of the conditions that make the project necessary and beneficial for your key audiences (2-3 paragraphs).</p>\n<h2>Impact and Intended Results</h2>\n<p>A brief explanation that combines your environmental scan and your research goals. Why is what you are doing necessary and different in your field\u2014and maybe to more than just scholars in your field. (4-5 paragraphs)</p>\n<h2>The Plan</h2>\n<p>Rough outline and project calendar that includes project design and evaluation, and possibly a communications plan, depending on the grant with major deliverables (bullet-pointed list of phases and duration):\n* Phase 1 (month/year - month/year):\n* Phase 2 (month/year - month/year):\n* Phase 3 (month/year - month/year):</p>\n<h2>Project Resources: Personnel and Management</h2>\n<p>Description of the why the cooperating institutions and key personnel are well-suited to undertake this work (list of experience and responsibilities of each staff member, and institutional description).</p>\n<h2>Sustainability</h2>\n<p>If applicable, describe how this project will live beyond the grant period. Will it continue to be accessible? How so? A data management plan might need to be specified here.</p>", "order": 8}}, {"model": "lesson.lesson", "pk": 452, "fields": {"title": "Presentation Template", "created": "2020-07-15T22:01:25.428Z", "updated": "2020-07-15T22:01:25.428Z", "workshop": 51, "text": "<p><strong>Name:</strong> </p><p>\n<strong>Program:</strong> </p><p>\n<strong>Project title:</strong></p><p>\n<strong>2 Sentence abstract:</strong></p><p>\n<strong>What resources do you have now?</strong></p><p>\n<strong>What have you learned this week that will help you?</strong></p><p>\n<strong>What additional support will you need as you take your next steps?</strong></p>", "order": 9}}, {"model": "lesson.lesson", "pk": 453, "fields": {"title": "Presentation", "created": "2020-07-15T22:01:25.433Z", "updated": "2020-07-15T22:01:25.433Z", "workshop": 51, "text": "<h2><strong>Name:</strong> Lisa Rhody</h2>\n<h2><strong>Program:</strong> Digital Initiatives</h2>\n<h3><strong>Project title:</strong> Projects made Easy!</h3>\n<p><strong>2 Sentence abstract</strong></p><p>\nMy project is going to make every installation seamless. It will make all of your Python dreams come true, your databases tidy, and your Git Hub happy. </p><p>\n<strong>What resources do you have now?</strong></p><p>\n<strong>What have you learned this week that will help you?</strong></p><p>\n<strong>What additional support will you need as you take your next steps?</strong></p>\n<h2>Activity</h2>\n<ul>\n<li>Delete my information above and use this as a template for your own presentation. </li>\n<li>You may want to consult this <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#lists\">Markdown Cheat Sheet by Adam Pritchard</a> to help you format your slide better. </li>\n</ul>\n<h2>When you are done:</h2>\n<ul>\n<li>save this file with a new name (\"yourlastname.md\")</li>\n<li>add this file to your repository </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">add</span> <span class=\"n\">yourlastname</span><span class=\"p\">.</span><span class=\"n\">md</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">commit</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"ss\">\"my presentation file\"</span>\n</code></pre></div>\n<ul>\n<li>If you have used an image (and you can) don't forget to add your image to the image folder and then add it to your repo: </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">add</span> <span class=\"n\">images</span><span class=\"o\">/</span><span class=\"n\">myfile</span><span class=\"p\">.</span><span class=\"n\">jpg</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">commit</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"ss\">\"adding an image file\"</span>\n</code></pre></div>", "order": 10}}, {"model": "frontmatter.ethicalconsideration", "pk": 129, "fields": {"frontmatter": 51, "label": "Keralis, Spencer D. C., and Pamela Andrews. [\u201cLabor.\u201d](https://digitalpedagogy.mla.hcommons.org/keywords/labor/) Digital Pedagogy in the Humanities: Concepts Models, and Experiments, edited by Rebecca Frost Davis et al., Modern Language Association. digitalpedagogy.mla.hcommons.org, https://digitalpedagogy.mla.hcommons.org/keywords/labor/. Accessed 16 June 2020."}}, {"model": "frontmatter.ethicalconsideration", "pk": 130, "fields": {"frontmatter": 51, "label": "Ess, Charles, and Association of Internet Researchers. [Ethical Decision-Making and Internet Research.](http://aoir.org/reports/ethics.pdf) 27 Nov. 2002, http://aoir.org/reports/ethics.pdf."}}, {"model": "frontmatter.ethicalconsideration", "pk": 131, "fields": {"frontmatter": 51, "label": "Hoffmann, Anna Lauren. [\u201cData Violence and How Bad Engineering Choices Can Damage Society.\u201d](https://medium.com/s/story/data-violence-and-how-bad-engineering-choices-can-damage-society-39e44150e1d4) Medium, https://medium.com/s/story/data-violence-and-how-bad-engineering-choices-can-damage-society-39e44150e1d4. Accessed 23 May 2018."}}, {"model": "frontmatter.ethicalconsideration", "pk": 132, "fields": {"frontmatter": 51, "label": "Losh, Elizabeth. [\u201cHacktivism and the Humanities: Programming Protest in the Era of the Digital University](https://dhdebates.gc.cuny.edu/read/untitled-88c11800-9446-469b-a3be-3fdb36bfbd1e/section/f6fe2a59-8937-4446-a2fb-86dc6ba1975b#ch10) Debates in the Digital Humanities, edited by Matthew K. Gold and Lauren Klein, University of Minnesota Press, 2012. dhdebates.gc.cuny.edu, https://dhdebates.gc.cuny.edu/read/untitled-88c11800-9446-469b-a3be-3fdb36bfbd1e/section/f6fe2a59-8937-4446-a2fb-86dc6ba1975b#ch10."}}, {"model": "frontmatter.learningobjective", "pk": 355, "fields": {"frontmatter": 51, "label": "To identify the purpose of and need for your project"}}, {"model": "frontmatter.learningobjective", "pk": 356, "fields": {"frontmatter": 51, "label": "To place your project within the context of other existing work"}}, {"model": "frontmatter.learningobjective", "pk": 357, "fields": {"frontmatter": 51, "label": "To account for the resources already at your disposal and those you may need"}}, {"model": "frontmatter.learningobjective", "pk": 358, "fields": {"frontmatter": 51, "label": "To locate partners, collaborators, and audiences"}}, {"model": "frontmatter.learningobjective", "pk": 359, "fields": {"frontmatter": 51, "label": "To develop a work plan "}}, {"model": "frontmatter.learningobjective", "pk": 360, "fields": {"frontmatter": 51, "label": "To communicate your plan"}}, {"model": "frontmatter.learningobjective", "pk": 361, "fields": {"frontmatter": 51, "label": "To evaluate your progress"}}, {"model": "frontmatter.learningobjective", "pk": 362, "fields": {"frontmatter": 51, "label": "To describe how the work and data will be managed and sustained"}}, {"model": "frontmatter.learningobjective", "pk": 363, "fields": {"frontmatter": 51, "label": "To draft an initial project proposal"}}, {"model": "frontmatter.contributor", "pk": 184, "fields": {"first_name": "Lisa Marie", "last_name": "Rhody", "role": "Current author", "url": null}}, {"model": "frontmatter.contributor", "pk": 185, "fields": {"first_name": "Lisa Marie", "last_name": "Rhody", "role": "Original author", "url": null}}, {"model": "library.reading", "pk": 278, "fields": {"title": "\u201cEdition, Project, Database, Archive, Thematic Research Collection: What\u2019s in a Name?\u201d", "url": "<http://www.digitalhumanities.org/dhq/vol/3/3/000053/000053.html>", "annotation": "Price, Kenneth M. [\u201cEdition, Project, Database, Archive, Thematic Research Collection: What\u2019s in a Name?\u201d](<http://www.digitalhumanities.org/dhq/vol/3/3/000053/000053.html>) Digital Humanities Quarterly, vol. 003, no. 3, Sept. 2009.", "zotero_item": null}}, {"model": "library.reading", "pk": 279, "fields": {"title": "\u201cGetting Started in Digital Humanities Journal of Digital Humanities.\u201d", "url": "http://journalofdigitalhumanities.org/1-1/getting-started-in-digital-humanities-by-lisa-spiro", "annotation": "Spiro, Lisa. [\u201cGetting Started in Digital Humanities Journal of Digital Humanities.\u201d](http://journalofdigitalhumanities.org/1-1/getting-started-in-digital-humanities-by-lisa-spiro/) Journal of Digital Humanities, vol. 1, no. 1, Winter 2011, http://journalofdigitalhumanities.org/1-1/getting-started-in-digital-humanities-by-lisa-spiro/.", "zotero_item": null}}, {"model": "library.project", "pk": 130, "fields": {"title": "Provost's Digital Innovation Grants site", "url": "http://cuny.is/digitalgrants", "annotation": "The Graduate Center's [Provost's Digital Innovation Grants site](http://cuny.is/digitalgrants) features  proposal narratives from successfully funded projects by doctoral students. Look under \"Funded Projects\" for a list of digital project descriptions, narratives, and white papers for each academic year. ", "zotero_item": null}}, {"model": "library.project", "pk": 131, "fields": {"title": "Digital Humanities Advancement Grant Program", "url": "https://www.neh.gov/grants/odh/digital-humanities-advancement-grants", "annotation": "The NEH Office of Digital Humanities posts sample application narratives with its call for applications. You can find these at the bottom of the grant program announcements, for example, on the [Digital Humanities Advancement Grant Program](https://www.neh.gov/grants/odh/digital-humanities-advancement-grants) page.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 140, "fields": {"label": "DevDH.org \u2013 Development for the Digital Humanities", "url": "http://devdh.org", "annotation": "Appleford, Simon, and Jennifer Guiliano. DevDH.org, 2013. http://devdh.org.\n  In this online resource guide, Guiliano and Appleford share recorded lectures as podcasts, slides, and handouts to help scholars develop strong projects. Topics include \"Designing Your First Project,\" \"Building Budgets,\" \"Manage Your Project,\" and more. ", "zotero_item": null}}, {"model": "library.tutorial", "pk": 141, "fields": {"label": "PM4DH: Project Management for the Digital Humanities", "url": "https://scholarblogs.emory.edu/pm4dh", "annotation": "[PM4DH: Project Management for the Digital Humanities](https://scholarblogs.emory.edu/pm4dh/), Emory Center for Digital Scholarship, Accessed 13 June 2020. https://scholarblogs.emory.edu/pm4dh/\n    The staff of the Emory Center for Digital Scholarship has produced a helpful website that includes information on project proposals accompanied with information about project management. Considering how you might manage all aspects of the project's lifecycle will help to inform your own proposal. Consider reviewing a resource such as this one early on in your process.", "zotero_item": null}}, {"model": "library.reading", "pk": 280, "fields": {"title": "CUNY Digital Humanities Resource Guide List of Sample Projects", "url": "https://wiki.commons.gc.cuny.edu/Sample_Projects", "annotation": "[CUNY Digital Humanities Resource Guide List of Sample Projects](https://wiki.commons.gc.cuny.edu/Sample_Projects/)", "zotero_item": null}}, {"model": "library.reading", "pk": 281, "fields": {"title": "How to get a digital humanities project off the ground | HASTAC", "url": "https://www.hastac.org/blogs/paigecm/2014/06/06/how-get-digital-humanities-project-ground", "annotation": "Morgan, Paige. \u201cHow to Get a Digital Humanities Project off the Ground.\u201d HASTAC, 6 June 2014. https://www.hastac.org/blogs/paigecm/2014/06/06/how-get-digital-humanities-project-ground.", "zotero_item": null}}, {"model": "library.reading", "pk": 282, "fields": {"title": "\"Designing a DH Project.\"", "url": "https://repository.asu.edu/items/50759#embed", "annotation": "Grumbach, Elizabeth. [\"Designing a DH Project.\"](https://repository.asu.edu/items/50759#embed) Institute for Humanities Research Faculty Development Workshop Series, 26 September 2018. https://repository.asu.edu/items/50759", "zotero_item": null}}, {"model": "library.reading", "pk": 283, "fields": {"title": "Podcast, Johanna Drucker: \"Designing Digital Humanities\" - MIT Comparative Media Studies/Writing", "url": "https://cmsw.mit.edu/podcast-johanna-drucker-design", "annotation": "Whitacre, Andrew. Designing Digital Humanities. cmsw.mit.edu, https://cmsw.mit.edu/podcast-johanna-drucker-design/. Accessed 16 June 2020.", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 52, "fields": {"name": "Data And Ethics", "slug": "data-and-ethics", "created": "2020-07-15T22:01:26.215Z", "updated": "2020-07-15T22:01:26.215Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/data-and-ethics", "parent_branch": "v2.0-di-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 52, "fields": {"workshop": 52, "abstract": "What is data? Nearly all digital work requires dealing with data. In this workshop we will be discussing the basics of research data, in terms of material, transformation, and presentation.", "estimated_time": 0, "projects": [132, 133], "resources": [], "readings": [284, 285, 286], "contributors": [186, 187, 188], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 52, "fields": {"discussion_questions": "['What are some forms of data you use in your work? What about forms of data that you produce as your output? Perhaps there are some forms that are typical of your field? Where do you usually get your data from?', 'What is publically available data?', \"How do you decide the formats to store your data when you transition from 'raw' to 'processed/transformed' data? What are some of your considerations?\", 'How do we know when our data is cleaned enough? What happens to the data that is removed? What are we choosing to say about our dataset as we prepare them for analysis?', 'As we consider the types of analysis that we choose to apply onto our data set, what are we representing and leaving out? How do we guide our decisions of interpretation with our choices of analyses? Are we comfortable with the (un)intended use of our research? What are potential misuses of our outputs? ', 'What can happen when we are trying to just go for the next big thing (tool/methods/algorithms) or just ran out of time and/or budget for our project?', 'What are we assuming when we choose to visually represent data in particular ways? How can data visualization mislead us?']", "next_steps": "[]", "workshop": 52, "further_readings": [287, 288, 289], "more_projects": [], "more_resources": [], "tutorials": [142, 143, 144]}}, {"model": "lesson.lesson", "pk": 454, "fields": {"title": "Data is Foundational", "created": "2020-07-15T22:01:26.218Z", "updated": "2020-07-15T22:01:26.218Z", "workshop": 52, "text": "<p>In this brief workshop we will be discussing the basics of research data, in terms of material, transformation, and presentation. We will also be focusing on the ethics of data cleaning and representation. Because everyone has a different approach to data and ethics, this workshop will also include multiple sites for discussions to help us think together as a group.</p>\n<h2>What Constitutes Research Data?</h2>\n<p>\"Material or information on which an argument, theory, test or hypothesis, or another research output is based.\"</p><p>\n<a href=\"http://www.mopp.qut.edu.au/D/D_02_08.jsp\">Queensland University of Technology. Manual of Procedures and Policies. Section 2.8.3.</a></p><p>\n\"What constitutes such data will be determined by the community of interest through the process of peer review and program management. This may include, but is not limited to: data, publications, samples, physical collections, software and models\"</p><p>\n<a href=\"http://www.slideshare.net/MariekeGuy/bridging-the-gap-between-researchers-and-research-data-management\">Marieke Guy.</a></p><p>\n\"(i) Research data is defined as the recorded factual material commonly accepted in the scientific community as necessary to validate research findings, but not any of the following: preliminary analyses, drafts of scientific papers, plans for future research, peer reviews, or communications with colleagues.\"</p><p>\n<a href=\"http://www.whitehouse.gov/omb/circulars_a110/\">OMB-110, Subpart C, section 36, (d) (i)</a></p><p>\n\"The short answer is that we can\u2019t always trust empirical measures at face value: data is always biased, measurements always contain errors, systems always have confounders, and people always make assumptions.\" <a href=\"https://medium.com/@angebassa/data-alone-isnt-ground-truth-9e733079dfd4\">Angela Bassa</a></p><p>\nIn summary, research data is</p><p>\n<strong>material or information necessary to come to your conclusion.</strong></p>\n<h2>Forms of Data</h2>\n<p>There are many ways to represent data, just as there are many sources of data. After processing our data, we turn it into a number of products. For example:\n* Non-digital text (lab books, field notebooks)\n* Digital texts or digital copies of text\n* Statistical analysis (SPSS, SAS, R)\n* Scientific sample collections\n* Data visualizations\n* Computer code\n* Standard operating procedures and protocols\n* Protein or genetic sequences\n* Artistic products\n* Curriculum materials\n* Spreadsheets (e.g. .xlsx, .csv, .tsv)\n* Audio (e.g. .mp3, .wav, .aac)\n* Video (e.g. .mov, .mp4)\n* Computer Aided Design/CAD (.cad)\n* Databases (e.g. .sql)\n* Geographic Information Systems (GIS) and spatial data (e.g. .shp, .dbf, .shx)\n* Digital copies of images (e.g. .png, .jpeg, .tiff)\n* Web files (e.g. .html, .asp, .php)\n* Matlab files &amp; 3D Models (e.g. .stl, .dae, .3ds)\n* Metadata &amp; Paradata (e.g. .xml, .json)\n* Collection of digital objects acquired and generated during research</p><p>\nAdapted from: Georgia Tech</p>\n<h3>Challenge: Forms of Data</h3>\n<p>These are some (most!) of the shapes your research data might transform into. </p><p>\n1. What are some forms of data you use in your work? </p><p>\n2. What about forms of data that you produce as your output? Perhaps there are some forms that are typical of your field. </p><p>\n3. Where do you usually get your data from?</p>", "order": 1}}, {"model": "lesson.lesson", "pk": 455, "fields": {"title": "Stages of Data", "created": "2020-07-15T22:01:26.220Z", "updated": "2020-07-15T22:01:26.220Z", "workshop": 52, "text": "<p>We begin without data. Then it is observed, or made, or imagined, or generated. After that, it goes through further transformations:</p>\n<h2>Raw</h2>\n<p>Raw data is yet to be processed, meaning it has yet to be manipulated by a human or computer. Received or collected data could be in any number of formats, locations, etc.. It could be in any of the forms listed above.</p><p>\nBut \"raw data\" is a relative term, inasmuch as when one person finishes processing data and presents it as a finished product, another person may take that product and work on it further, and for them that data is \"raw data\". </p>\n<h2>Data and Labor</h2>\n<p>As we think about data collecction, we should also consider the labor involved in the process. Many researchers rely on Amazon Mechanical Turk (sometimes also refered to as MTurk) for data collection, <a href=\"https://www.theatlantic.com/business/archive/2018/01/amazon-mechanical-turk/551192/\">often paying less than minimum wage for the task.</a> Often the assumption made of these workers is someone who is retired, bored, and participating in online gig work for fun or to kill time. While this may be true for some, <a href=\"https://www.pewresearch.org/internet/2016/11/17/labor-platforms-technology-enabled-gig-work/\">more than half of those surveyed in a Pew Research study cite that the income from this work is essential or important.</a> Often, those who view the income from this work as essential or important are also from underserved communities. </p><p>\nIn addition to being mindful of paying a fair wage to the workers on such platforms, this working environment also brings some further considerations to the data that is collected. Often times, for workers to get close to minimum wage, they cannot afford to spend much time on each task, increasing potential errors in the collected data. </p>\n<h3>Challenge: Raw Data and Labor</h3>\n<ol>\n<li>For example, is \"big data\" \"raw data\"? How do we understand data that we have \"scraped\"? </li>\n</ol>\n<h2>Processed/Transformed</h2>\n<p>Processing data puts it into a state more readily available for analysis, and makes the data legible. For instance it could be rendered as <strong>structured data</strong>. This can also take many forms, e.g., a table. </p><p>\nHere are a few you're likely to come across, all representing the same data:</p><p>\n<strong>XML</strong></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">&lt;Cats&gt;</span> \n    <span class=\"nt\">&lt;Cat&gt;</span> \n        <span class=\"nt\">&lt;firstName&gt;</span>Smally<span class=\"nt\">&lt;/firstName&gt;</span> <span class=\"nt\">&lt;lastName&gt;</span>McTiny<span class=\"nt\">&lt;/lastName&gt;</span> \n    <span class=\"nt\">&lt;/Cat&gt;</span> \n    <span class=\"nt\">&lt;Cat&gt;</span> \n        <span class=\"nt\">&lt;firstName&gt;</span>Kitty<span class=\"nt\">&lt;/firstName&gt;</span> <span class=\"nt\">&lt;lastName&gt;</span>Kitty<span class=\"nt\">&lt;/lastName&gt;</span> \n    <span class=\"nt\">&lt;/Cat&gt;</span> \n    <span class=\"nt\">&lt;Cat&gt;</span> \n        <span class=\"nt\">&lt;firstName&gt;</span>Foots<span class=\"nt\">&lt;/firstName&gt;</span> <span class=\"nt\">&lt;lastName&gt;</span>Smith<span class=\"nt\">&lt;/lastName&gt;</span> \n    <span class=\"nt\">&lt;/Cat&gt;</span> \n    <span class=\"nt\">&lt;Cat&gt;</span> \n        <span class=\"nt\">&lt;firstName&gt;</span>Tiger<span class=\"nt\">&lt;/firstName&gt;</span> <span class=\"nt\">&lt;lastName&gt;</span>Jaws<span class=\"nt\">&lt;/lastName&gt;</span> \n    <span class=\"nt\">&lt;/Cat&gt;</span> \n<span class=\"nt\">&lt;/Cats&gt;</span> \n</code></pre></div>\n<p><strong>JSON</strong></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"Cats\"</span><span class=\"p\">:[</span> \n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Smally\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"McTiny\"</span> <span class=\"p\">},</span> \n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Kitty\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Kitty\"</span> <span class=\"p\">},</span> \n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Foots\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Smith\"</span> <span class=\"p\">},</span> \n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Tiger\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Jaws\"</span> <span class=\"p\">}</span> \n<span class=\"p\">]}</span> \n</code></pre></div>\n<p><strong>CSV</strong></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">First</span> <span class=\"n\">Name</span><span class=\"p\">,</span><span class=\"k\">Last</span> <span class=\"n\">Name</span><span class=\"o\">/</span><span class=\"n\">n</span>\n<span class=\"n\">Smally</span><span class=\"p\">,</span><span class=\"n\">McTiny</span><span class=\"o\">/</span><span class=\"n\">n</span>\n<span class=\"n\">Kitty</span><span class=\"p\">,</span><span class=\"n\">Kitty</span><span class=\"o\">/</span><span class=\"n\">n</span>\n<span class=\"n\">Foots</span><span class=\"p\">,</span><span class=\"n\">Smith</span><span class=\"o\">/</span><span class=\"n\">n</span>\n<span class=\"n\">Tiger</span><span class=\"p\">,</span><span class=\"n\">Jaws</span><span class=\"o\">/</span><span class=\"n\">n</span>\n</code></pre></div>\n<h3>The importance of using open data formats</h3>\n<p>A small detour to discuss (the ethics of?) data formats. For accessibility, future-proofing, and preservation, keep your data in open, sustainable formats. A demonstration:</p><p>\n1. Open <a href=\"files/cats.csv\">this file</a> in a text editor, and then in an app like Excel. This is a CSV, an open, text-only, file format.</p><p>\n2. Now do the same with <a href=\"files/cats.xlsx\">this one</a>. This is a proprietary format! </p><p>\nSustainable formats are generally unencrypted, uncompressed, and follow an open standard. A small list:\n* ASCII\n* PDF \n* .csv\n* FLAC\n* TIFF\n* JPEG2000\n* MPEG-4\n* XML\n* RDF\n* .txt\n* .r</p>\n<h3>Challenge: Processed/Transformed</h3>\n<ol>\n<li>How do you decide the formats to store your data when you transition from 'raw' to 'processed/transformed' data? </li>\n<li>What are some of your considerations?</li>\n</ol>\n<h2>Tidy Data</h2>\n<p>There are guidelines to the processing of data, sometimes referred to as <strong>Tidy Data</strong>.<sup>1</sup> One manifestation of these rules:</p><p>\n1. Each variable is in a column.</p><p>\n2. Each observation is a row.</p><p>\n3. Each value is a cell.</p><p>\nLook back at our example of cats to see how they may or may not follow those guidelines. <strong>Important note</strong>: some data formats allow for more than one dimension of data! How might that complicate the concept of <strong>Tidy Data</strong>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"Cats\"</span><span class=\"p\">:[</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"Calico\"</span><span class=\"p\">:[</span>\n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Smally\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"McTiny\"</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Kitty\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Kitty\"</span> <span class=\"p\">}],</span>\n    <span class=\"nt\">\"Tortoiseshell\"</span><span class=\"p\">:[</span>\n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Foots\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Smith\"</span> <span class=\"p\">},</span> \n    <span class=\"p\">{</span> <span class=\"nt\">\"firstName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Tiger\"</span><span class=\"p\">,</span> <span class=\"nt\">\"lastName\"</span><span class=\"p\">:</span><span class=\"s2\">\"Jaws\"</span> <span class=\"p\">}]}]}</span>\n</code></pre></div>\n<p><sup>1</sup>Wickham, Hadley. \"Tidy Data\". Journal of Statistical Software.</p>", "order": 2}}, {"model": "lesson.lesson", "pk": 456, "fields": {"title": "More Stages of Data", "created": "2020-07-15T22:01:26.221Z", "updated": "2020-07-15T22:01:26.221Z", "workshop": 52, "text": "<h2>Cleaned</h2>\n<p>High quality data is measured in its <strong>validity</strong>, <strong>accuracy</strong>, <strong>completeness</strong>, <strong>consistency</strong>, and <strong>uniformity</strong>.</p><p>\nProcessed data, even in a table, is going to be full of errors:</p><p>\n1. Empty fields</p><p>\n2. Multiple formats, such as \"yes\" or \"y\" or \"1\" for a positive response.</p><p>\n3. Suspect answers, like a date of birth of 00/11/1234</p><p>\n4. Impossible negative numbers, like an age of \"-37\"</p><p>\n5. Dubious outliers</p><p>\n6. Duplicated rows</p><p>\n7. And many more!</p><p>\nCleaning data is the work of correcting the errors listed above, and moving towards high quality. This work can be done manually or programatically. </p><p>\n<strong>Validity</strong></p><p>\nMeasurements must be valid, in that they must conform to set constraints:</p><p>\n1. The aforementioned \"yes\" or \"y\" or \"1\" should all be changed to one response.</p><p>\n2. Certain fields cannot be empty, or the whole observation must be thrown out.</p><p>\n3. Uniqueness, for instance no two people should have the same social security number.</p><p>\n<strong>Accuracy</strong></p><p>\nMeasurements must be accurate, in that they must represent the correct values. While an observation may be valid, it might at the same time be inaccurate. 123 Fake street is a valid, inaccurate street address.</p><p>\nUnfortunately, accuracy is mostly acheived in the observation process. To be achieved in the cleaning process, an outside trusted source would have to be cross-referenced.</p><p>\n<strong>Completeness</strong></p><p>\nMeasurements must be complete, in that they must represent everything that might be known. This also is nearly impossible to achieve in the cleaning process! For instance in a survey, it would be necessary to re-interview someone whose previous answer to a question was left blank. </p><p>\n<strong>Consistency</strong></p><p>\nMeasurements must be consistent, in that different observations must not contradict each other. For instance, one person cannot be represented as both dead and still alive in different observations. </p><p>\n<strong>Uniformity</strong></p><p>\nMeasurements must be uniform, in that the same unit of measure must be used in all relevant measurements. If one person's height is listed in meters and another in feet, one measurement must be converted.</p>\n<h3>Challenge: When do we stop cleaning?</h3>\n<ol>\n<li>How do we know when our data is cleaned enough? </li>\n<li>What happens to the data that is removed? </li>\n<li>What are we choosing to say about our dataset as we prepare them for analysis?</li>\n</ol>\n<h2>Analyzed</h2>\n<p>Analysis can take many forms (just like the rest of this stuff!), but many techniques fall within a couple of categories:</p>\n<h3>Descriptive Analysis</h3>\n<p>Techniques geared towards summarizing a data set, such as:\n* Mean\n* Median\n* Mode\n* Average\n* Standard deviation</p>\n<h3>Inferential Analysis</h3>\n<p>Techniques geared towards testing a hypothesis about a population, based on your data set, such as:\n* Extrapolation\n* P-Value calculation</p>\n<h3>Challenge: Analysis</h3>\n<ol>\n<li>As we consider the types of analysis that we choose to apply onto our data set, what are we representing and leaving out? </li>\n<li>How do we guide our decisions of interpretation with our choices of analyses? </li>\n<li>Are we comfortable with the intended use of our research? Are we comfortable with the unintended use of our research? What are potential misuses of our outputs? </li>\n<li>What can happen when we are trying to just go for the next big thing (tool/methods/algorithms) or just ran out of time and/or budget for our project?</li>\n</ol>\n<h2>Visualized</h2>\n<p>Visualizing your data helps you tell a story and construct a narrative that guides your audience in understanding your interpretation of a collected, cleaned, and analyzed dataset. Depending on the type of analysis you ran, different kinds of visualization can be more effective than others. Below are some examples of data visualization that can help you convey the message of your data.</p><p>\n</p><table class=\"table\"></p><p>\n<caption>Examples of Data Visualization</caption></p><p>\n<tr></p><p>\n<th>Types of Analysis</th></p><p>\n<th>Types of Visualization</th></p><p>\n<th>When to Use</th></p><p>\n<th>Example of Visualization</th></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<th rowspan=\"3\">Comparisons</th></p><p>\n<td>Bar charts</td></p><p>\n<td>Comparison across distinct categories</td></p><p>\n<td><img alt=\"Bar Chart\" src=\"/static/images/lessons/data-and-ethics/D4PG_bar.png\"/><figcaption>From The Data for Public Good at the Graduate Center.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Histograms</td></p><p>\n<td>Comparison across continuous variable</td></p><p>\n<td><img alt=\"Histogram\" src=\"/static/images/lessons/data-and-ethics/PolicyViz_histogram.png\"/><figcaption>From Policy Viz.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Scatter plots</td></p><p>\n<td>Useful to check for correlation (not causation!)</td></p><p>\n<td><img alt=\"Scatter plot\" src=\"/static/images/lessons/data-and-ethics/538_scatter.png\"/><figcaption>From FiveThirtyEight.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<th rowspan=\"3\">Time</th></p><p>\n<td>Stacked area charts</td></p><p>\n<td>Evolution of value across different groups</td></p><p>\n<td><img alt=\"Stacked area chart\" src=\"/static/images/lessons/data-and-ethics/DatatoViz_stackedarea.png\"/><figcaption>From From Data to Viz.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Sankey Diagrams</td></p><p>\n<td>Displaying flows of changes</td></p><p>\n<td><img alt=\"Sankey\" src=\"/static/images/lessons/data-and-ethics/DatatoViz_sankey.png\"/><figcaption>From From Data to Viz.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Line graphs</td></p><p>\n<td>Tracking changes over time</td></p><p>\n<td><img alt=\"Line Graph\" src=\"/static/images/lessons/data-and-ethics/D4PG_line.jpg\"/><figcaption>From The Library of Congress.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<th rowspan=\"2\">Small numbers/percentages</th></p><p>\n<td>Pie charts</td></p><p>\n<td>Demonstrate proportions between categories</td></p><p>\n<td><img alt=\"Pie chart\" src=\"/static/images/lessons/data-and-ethics/DB_pie.jpg\"/><figcaption>From The Library of Congress.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Tree maps</td></p><p>\n<td>Demonstrate hierarchy and proportion</td></p><p>\n<td><img alt=\"Tree map\" src=\"/static/images/lessons/data-and-ethics/DataViz_treemap.png\"/><figcaption>From The Data Visualization Catalogue.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<th rowspan=\"2\">Survey responses</th></p><p>\n<td>Stacked bar charts</td></p><p>\n<td>Compares total amount across each group (e.g. plotting Likert scale)</td></p><p>\n<td><img alt=\"Stacked bar charts\" src=\"/static/images/lessons/data-and-ethics/DB_stackedbar.jpg\"/><figcaption>From The Library of Congress.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Nested area graphs</td></p><p>\n<td>Visualize branching/nested questions</td></p><p>\n<td><img alt=\"Nested area graph\" src=\"/static/images/lessons/data-and-ethics/evergreen_nestedarea.jpg\"/><figcaption>From Evergreen Data.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<th rowspan=\"2\">Place</th></p><p>\n<td>Choropleth maps</td></p><p>\n<td>Visualize values over a geographic area to demonstrate pattern</td></p><p>\n<td><img alt=\"Choropleth map\" src=\"/static/images/lessons/data-and-ethics/DB_choropleth.jpg\"/><figcaption>From The Library of Congress.</figcaption></td></p><p>\n</tr></p><p>\n<tr height=\"300px\"></p><p>\n<td>Hex(bin) or Tile maps</td></p><p>\n<td>Similar to Choropleth with the hexbin/tile representing regions equally rather than by geographic size</td></p><p>\n<td><img alt=\"Hexbin graph\" src=\"/static/images/lessons/data-and-ethics/rgraph_hexbin.png\"/><figcaption>From R Graph Gallery.</figcaption></td></p><p>\n</tr></p><p>\n<tr></p><p>\n<th colspan=\"4\"> Adapted from <a href=\"https://us.sagepub.com/en-us/nam/effective-data-visualization/book265203_\"> Stephanie D. Evergreen (2019) Effective data visualization : The right chart for the right data</a>, <a href=\"https://datavizcatalogue.com/\">The Data Visualisation Catalogue</a>, and <a href=\"https://www.data-to-viz.com/\">From Data to Viz</a></th></p><p>\n</tr><tr></p><p>\n</tr></table></p><p>\nThis table is a teaser for the many possibilities of what data visualization can be. Creating a visual for your data is an art form and you can sometimes find yourself spending a significant amount of time looking for the best ways to visualize your data.</p><p>\nAn example of effective data visualization can be seen in W.E.B. Du Bois <a href=\"https://www.loc.gov/pictures/search/?q=%22lot%2011931%22%20NOT%20medal&amp;st=grid&amp;co=anedub&amp;loclr=blogpic\">data potraits at the Paris Exposition in 1900</a>, as part of <a href=\"https://en.wikipedia.org/wiki/The_Exhibit_of_American_Negroes_\">the Exhibit of American Negroes</a>. Using engaging hand-drawn visualizations, he tells the narrative of what it meant to be Black in post-Emancipation America as he translates sociological research and census data to reach beyond the academy. Head <a href=\"https://hyperallergic.com/476334/how-w-e-b-du-bois-meticulously-visualized-20th-century-black-america/\">here</a> to read more about Du Bois' project. \n<h3>Challenge: Visualizations</h3>\n<p>As we transform our results into visuals, we are also trying to tell a narrative about the data we collected. Data visualization can help us to decode information and share quickly and simply. </p><p>\n1. What are we assuming when we choose to visually represent data in particular ways? </p><p>\n2. As you may have realized, many of the visualization examples work with quantitative data, as such, how do you think we can visualize qualitative data? (e.g. Word Clouds, Heat Map)</p><p>\n2. How can data visualization mislead us? (for e.g. <a href=\"https://flowingdata.com/2017/02/09/how-to-spot-visualization-lies/\">Nathan Yau discusses how data visualization can lie</a></p>", "order": 3}}, {"model": "lesson.lesson", "pk": 457, "fields": {"title": "Data Literacy and Ethics", "created": "2020-07-15T22:01:26.223Z", "updated": "2020-07-15T22:01:26.223Z", "workshop": 52, "text": "<p>Throughout the workshop we have been thinking together through some of</p><p>\nthe potential ethical concerns that might crop up as we proceed with our</p><p>\nown projects. Just as we have disucssed thus far, we hope that you see</p><p>\nthat data and ethics is an ongoing process throughout the lifespans of</p><p>\nyour project(s) and don\u2019t often come with easy answers.</p>\n<h2>Activity</h2>\n<p>In this final activity, we would like for you to think about some of the</p><p>\npotential concerns that might come up in the scenario below and discuss</p><p>\nhow you might approach them:</p><p>\nYou are interested in looking at the reactions to the democratic party</p><p>\npresidential debates across time. You decided that you would use data</p><p>\nfrom twitter to analyze the responses. After collecting your data, you</p><p>\nlearned that your data has information from users who were later banned</p><p>\nand included some tweets that were removed/deleted from the site.</p>\n<h3>If you would like some guiding questions:</h3>\n<ul>\n<li>Would your approach differ if the responses were anonymized v. not?</li>\n<li>Would the number of tweets generated impact your decisions?</li>\n<li>How might where you are at in your project (e.g. \"raw\" data v. \"cleaned\" data v. analysed) affect your choices?</li>\n</ul>\n<h2>Some concluding thoughts</h2>\n<p>Data and ethics are contextually driven. As such, there isn\u2019t always a risk-free approach. We often have to work through ethical dilemmas while thinking through information that we may not have (what are the risks of doing/not doing this work?). We may be approaching a moment where the question is no longer what we could do but what we should do.</p>", "order": 4}}, {"model": "frontmatter.ethicalconsideration", "pk": 133, "fields": {"frontmatter": 52, "label": "Data and data analysis is [not free from bias](https://medium.com/@angebassa/data-alone-isnt-ground-truth-9e733079dfd4). There is no magic blackbox for which data emerges from and is contextually driven. As we think about the automation process of looking at \"big\" data, we have to be aware of [the biases that gets reproduced that is \"hidden.\"](https://www.propublica.org/article/machine-bias-risk-assessments-in-criminal-sentencing)"}}, {"model": "frontmatter.ethicalconsideration", "pk": 134, "fields": {"frontmatter": 52, "label": "De-identified information can be [reconstructed from piecemeal data](https://techscience.org/a/2015092903/)found across different sources. When we consider what we are doing with the data we have collected, we also need to think about the possible re-identification of our participants. "}}, {"model": "frontmatter.ethicalconsideration", "pk": 135, "fields": {"frontmatter": 52, "label": "Big data projects often times requiring sharing data sets across different individuals and teams. In addition, to ensure that our work is reproducable and accountable, we may also feel inclined to share the data collected. As such, figuring out [how to share such data](https://techscience.org/a/2015101601/) is crucial in the project planning stage."}}, {"model": "frontmatter.learningobjective", "pk": 364, "fields": {"frontmatter": 52, "label": "Understand the stages of data analysis."}}, {"model": "frontmatter.learningobjective", "pk": 365, "fields": {"frontmatter": 52, "label": "Understand the beginning of cleaning/tidying data"}}, {"model": "frontmatter.learningobjective", "pk": 366, "fields": {"frontmatter": 52, "label": "Experience the difference between proprietary and open data formats."}}, {"model": "frontmatter.learningobjective", "pk": 367, "fields": {"frontmatter": 52, "label": "Become familiar with the specific requirements of \"high quality data.\""}}, {"model": "frontmatter.learningobjective", "pk": 368, "fields": {"frontmatter": 52, "label": "Have an understanding of potential ethical concerns around working with different types of data and analysis."}}, {"model": "frontmatter.contributor", "pk": 186, "fields": {"first_name": "Stephen", "last_name": "Zweibel", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 187, "fields": {"first_name": "Di", "last_name": "Yoong", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 188, "fields": {"first_name": "Ian", "last_name": "Phillips", "role": null, "url": null}}, {"model": "library.reading", "pk": 284, "fields": {"title": "Big? Smart? Clean? Messy? Data in the Humanities", "url": "http://journalofdigitalhumanities.org/2-3/big-smart-clean-messy-data-in-the-humanities", "annotation": "[Big? Smart? Clean? Messy? Data in the Humanities](http://journalofdigitalhumanities.org/2-3/big-smart-clean-messy-data-in-the-humanities/)", "zotero_item": null}}, {"model": "library.reading", "pk": 285, "fields": {"title": "Bit By Bit: Social Research in Digital Age", "url": "https://www.bitbybitbook.com/en/1st-ed/preface", "annotation": "[Bit By Bit: Social Research in Digital Age](https://www.bitbybitbook.com/en/1st-ed/preface/)", "zotero_item": null}}, {"model": "library.reading", "pk": 286, "fields": {"title": "Ten Simple Rules for Responsible Big Data Research", "url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5373508", "annotation": "[Ten Simple Rules for Responsible Big Data Research](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5373508/)", "zotero_item": null}}, {"model": "library.project", "pk": 132, "fields": {"title": "Data for Public Good", "url": "https://dataforgood.commons.gc.cuny.edu", "annotation": "[Data for Public Good](https://dataforgood.commons.gc.cuny.edu/): Graduate student fellows creates a semester-long collaborative project that makes public-interest dataset useful and informative to a public audience.", "zotero_item": null}}, {"model": "library.project", "pk": 133, "fields": {"title": "SAFElab", "url": "https://safelab.socialwork.columbia.edu", "annotation": "[SAFElab](https://safelab.socialwork.columbia.edu/): Uses computational and social work approaches to understand mechanisms of violence and how to prevent and intervene in violence that occur in neighbourhoods and on social media.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 142, "fields": {"label": "Computational social science with R", "url": "https://compsocialscience.github.io/summer-institute/curriculum#day_2", "annotation": "[Computational social science with R](https://compsocialscience.github.io/summer-institute/curriculum#day_2) by the Summer Institutes in Computational Social Science", "zotero_item": null}}, {"model": "library.tutorial", "pk": 143, "fields": {"label": "The Data Visualisation Catalogue", "url": "https://datavizcatalogue.com/search.html", "annotation": "[The Data Visualisation Catalogue](https://datavizcatalogue.com/search.html) by Severino Ribecca", "zotero_item": null}}, {"model": "library.tutorial", "pk": 144, "fields": {"label": "From Data to Viz", "url": "https://www.data-to-viz.com", "annotation": "[From Data to Viz](https://www.data-to-viz.com/) by From Data to Viz", "zotero_item": null}}, {"model": "library.reading", "pk": 287, "fields": {"title": "data management presentation", "url": "https://www.slideshare.net/MariekeGuy/bridging-the-gap-between-researchers-and-research-data-management", "annotation": "Marieke Guy's [data management presentation](https://www.slideshare.net/MariekeGuy/bridging-the-gap-between-researchers-and-research-data-management)", "zotero_item": null}}, {"model": "library.reading", "pk": 288, "fields": {"title": "Management of Research Data", "url": "http://www.mopp.qut.edu.au/D/D_02_08.jsp", "annotation": "Queensland University of Technology's [Management of Research Data](http://www.mopp.qut.edu.au/D/D_02_08.jsp).", "zotero_item": null}}, {"model": "library.reading", "pk": 289, "fields": {"title": "Perspectives on Big Data, Ethics, and Society", "url": "https://bdes.datasociety.net/council-output/perspectives-on-big-data-ethics-and-society", "annotation": "The Council for Big Data, Ethics, and Society's publication [Perspectives on Big Data, Ethics, and Society](https://bdes.datasociety.net/council-output/perspectives-on-big-data-ethics-and-society/).", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 53, "fields": {"name": "Text Analysis", "slug": "text-analysis", "created": "2020-07-15T22:01:28.194Z", "updated": "2020-07-15T22:01:28.194Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/text-analysis", "parent_branch": "v2.0-rafa-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 53, "fields": {"workshop": 53, "abstract": "Digital technologies have made vast amounts of text available to researchers, and this same technological moment has provided us with the capacity to analyze that text. The first step in that analysis is to transform texts designed for human consumption into a form a computer can analyze. Using Python and the Natural Language ToolKit (commonly called NLTK), this workshop introduces strategies to turn qualitative texts into quantitative objects. Through that process, we will present a variety of strategies for simple analysis of text-based data.", "estimated_time": "10", "projects": [134, 135, 136], "resources": [], "readings": [290, 291], "contributors": [189, 190, 191, 192, 193, 194, 195, 196, 197], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 53, "fields": {"discussion_questions": "['Content TBD']", "next_steps": "[]", "workshop": 53, "further_readings": [292, 293], "more_projects": [], "more_resources": [], "tutorials": [145, 146, 147]}}, {"model": "lesson.lesson", "pk": 458, "fields": {"title": "Overview", "created": "2020-07-15T22:01:28.195Z", "updated": "2020-07-15T22:01:28.195Z", "workshop": 53, "text": "<p>This tutorial will give a brief overview of the considerations and tools involved in basic text analysis with Python. By completing this tutorial, you will have a general sense of how to turn text into data using the Python package, NLTK. You will also be able to take publicly available text files and transform them into a corpus that you can perform your own analysis on. Finally, you will have some insight into the types of questions that can be addressed with text analysis.</p>\n<h2>Setup and installation</h2>\n<p>If you have not already installed the <a href=\"https://www.anaconda.com/download/\">Anaconda</a> distribution of Python 3, please do so.</p><p>\nYou will also need <a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/nltk.md\"><code>nltk</code></a> and <a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/conda.md\"><code>matplotlib</code></a> to complete this tutorial. Both packages come installed with Anaconda. To check to be sure you have them, open a new Jupyter Notebook (or any IDE to run Python).</p><p>\nFind Anaconda Navigator on your computer (it should be located in the folder with your other applications), and from Acadonda Navigator's interface, launch a Jupyter Notebook.</p><p>\n<img alt=\"jupyter notebook launch screen\" src=\"/static/images/lessons/text-analysis/jupyter.png\"/></p><p>\nIt will open in the browser. All of the directories (folders) in your home directory will appear \u2014 we'll get to that later. For now, select <code>New</code> &gt;&gt; <code>Python3</code> in the upper right corner.</p><p>\n<img alt='jupyter notebook \"open new file\" screen' src=\"/static/images/lessons/text-analysis/jupyter1.png\"/></p><p>\nA blank page with an empty box should appear.</p><p>\n<img alt=\"empty box on jupyter notebook new file\" src=\"/static/images/lessons/text-analysis/jupyter2.png\"/></p><p>\nIn the box, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nltk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n</code></pre></div>\n<p>Press <code>Shift + Enter</code> to run the cell (or click run at the top of the page). Don't worry too much about what this is doing - that will be explained later in this tutorial. For now, we just want to make sure the packages we will need are installed.</p><p>\n<img alt=\"commands above in a jupyter notebook cell\" src=\"/static/images/lessons/text-analysis/jupyter3.png\"/></p><p>\nIf nothing happens, they are installed and you are ready to move on! If you get an error message, either you have a typo or they are not installed. If it is the latter, open the command line and type:</p>\n<div class=\"codehilite\"><pre><span></span><code>conda install nltk -y\nconda install matplotlib -y\n</code></pre></div>\n<p>Now we need to install the nltk corpus. This is very large and may take some time if you are on a weak connection.</p><p>\nIn the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>and run the cell.</p><p>\nThe NLTK downloader should appear. Please install all of the packages. If you are short on time, focus on \"book\" for this tutorial\u2014you can download the other packages at another time for later use.</p><p>\nYours will look a little different, but the same interface. Click on the 'all' option and then 'Download'. Once they all trun green, you can close the Downloader dialogue box.</p><p>\n<img alt=\"nltk downloader screen\" src=\"/static/images/lessons/text-analysis/nltk.png\"/></p><p>\nReturn to your Jupyter Notebook and type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.book</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</code></pre></div>\n<p>A list of books should appear. If this happens, great! If not, return to the downloader to make sure everything is ok.</p><p>\nClose this Notebook without saving \u2014 the only purpose was to check if we have the appropriate packages installed.</p>", "order": 1}}, {"model": "lesson.lesson", "pk": 459, "fields": {"title": "Text as Data", "created": "2020-07-15T22:01:28.197Z", "updated": "2020-07-15T22:01:28.197Z", "workshop": 53, "text": "<p>When we think of \"data,\" we often think of numbers, things that can be summarized, statisticized, and graphed. Rarely when I ask people \"what is data?\" do they respond \"<em>Moby Dick</em>.\" And yet, more and more, text is data. Whether it is <em>Moby Dick</em>, or every romance novel written since 1750, or today's newspaper or twitter feed, we are able to transform written (and spoken) language into data that can be quantified and visualized.</p>\n<h2>Corpora</h2>\n<p>The first step in gathering insights from texts is to create a <strong>corpus</strong>. A corpus is a collection of texts that are somehow related to each other. For example, the <a href=\"https://corpus.byu.edu/coca/\">Corpus of Contemporary American English</a>, <a href=\"http://www.trumptwitterarchive.com/\">Donald Trump's Tweets</a>, <a href=\"https://byts.commons.gc.cuny.edu/\">text messages</a> sent by bilingual young adults, <a href=\"https://chroniclingamerica.loc.gov/newspapers/\">digitized newspapers</a>, or <a href=\"https://www.gutenberg.org/\">books</a> in the public domain are all corpora. There are infinitely many corpora, and, sometimes, you will want to make your own\u2014that is, one that best fits your research question.</p><p>\nThe route you take from here will depend on your research question. Let's say, for example, that you want to examine gender differences in writing style. Based on previous linguistic research, you hypothesize that male-identified authors use more definitives than female-identified. So you collect two corpora\u2014one written by men, one written by women\u2014and you count the number of <em>the</em>s, <em>this</em>s, and <em>that</em>s compared to the number of <em>a</em>s, <em>an</em>s, and <em>one</em>s. Maybe you find a difference, maybe you don't. We can already see that this is a relatively crude way of going about answering this question, but it is a start. (More likely, you'd use a <em>supervised classification task</em>, which you will learn about in the <a href=\"https://www.github.com/DHRI-Curriculum/machine-learning\">Machine Learning Tutorial</a>.)</p><p>\nThere has been some research about how the <a href=\"http://science.sciencemag.org/content/sci/331/6014/176.full.pdf\">linguistic complexity of written language</a> in long-form pieces (i.e., books, articles, letters, etc.) has decreased over time. Simply put, people today use shorter sentences with fewer embedded clauses and complex tense constructions than people did in the past. (Note that this is not necessarily a bad or good thing.) Based on this research, we want to know if short-form platforms are emblematic of the change (we predict that they are based on our own experience with short-form platforms like email and Twitter). One way to do this would be to use Part-of-Speech tagging. Part-of-Speech (POS) tagging is a way to identify the category of words in a given text.</p><p>\nFor example, the sentence:</p>\n<blockquote>\n<p>I like the red bicycle.</p><p>\nhas one pronoun, one verb, one determiner, one adjective, and one noun.</p><p>\n(I : Pronoun), (like : Verb), (the : Determiner), (red : Adjective), (bicycle : Noun)</p><p>\nNLTK uses the <a href=\"https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html\">Penn Tree Bank Tag Set</a>. This is a very detailed tag list that goes far beyond just nouns, verbs, and adjectives, but gives insight into different types of nouns, prepositions, and verbs as well. Virtually all POS taggers will create a list of (word, POS) pairs. If newspaper articles have a higher ratio of function words (prepositions, auxiliaries, determiners, etc.) to semantic words (nouns, verbs, adjectives), than tweets, then we have one piece of evidence supporting our hypothesis. It's important to note here that we must use either ratios or otherwise normalized data (in the sense that raw numbers will not work). Because of the way that language works (function words are often repeated, for example), a sample of 100 words will have more unique words than a sample of 1,000. Therefore, to compare different data types (articles vs. tweets), this fact should be taken into account.</p>\n</blockquote>", "order": 2}}, {"model": "lesson.lesson", "pk": 460, "fields": {"title": "Cleaning and Normalizing", "created": "2020-07-15T22:01:28.198Z", "updated": "2020-07-15T22:01:28.198Z", "workshop": 53, "text": "<p>Generally, however, our questions are more about topics rather than writing style. So, once we have a corpus\u2014whether that is one text or millions\u2014we usually want to clean and normalize it. There are three terms we are going to need:</p><p>\n- <strong>Text normalization</strong> is the process of taking a list of words and transforming it into a more uniform sequence. Usually, this involves removing punctuation, making the words all the same case, removing <em>stop words</em>, and either <em>stemming</em> or <em>lemmatizing</em> the words. It can also include expanding abbreviations or matching misspellings (but these are advanced practices that we will not cover).</p><p>\nYou probably know what removing punctuation and capitalization refer to, but the other terms may be new:</p><p>\n- <strong>Stop words</strong> are words that appear frequently in a language, often adding grammatical structure, but little semantic content. There is no official list of stop words for any language, though there are some common, all-purpose lists built in to NLTK. However, different tasks require different lists. The purpose of removing stop words is to remove words that are so common that their meaning is diminished across a large number of texts.</p><p>\n- <strong>Stemming and lemmatizing</strong> both of these processes try to consolidate words like \"laughs\" and \"laughing\" to  \"laugh\" since they all mean essentially the same thing, they are just inflected differently. So again, in an attempt to reduce the number of words, and get a realistic understanding of the meaning of a text, these words are collapsed. Stemming does this by cutting off the end (very fast), lemmatizing does this by looking up the dictionary form (very slow).</p><p>\nLanguage is messy, and created for and by people, not computers. There is a lot of grammatical information in a sentence that a computer cannot use. For example, I could say to you:</p>\n<blockquote>\n<p>The house is burning.</p><p>\nand you would understand me. You would also understand if I say</p><p>\nhouse burn.</p><p>\nThe first has more information about tense, and which house in particular, but the sentiment is the same either way.</p><p>\nIn going from the first sentence to the normalized words, we removed the stop words (<em>the</em> and <em>is</em>), and removed punctuation and case, and lemmatized what was left (<em>burning</em> becomes <em>burn</em>\u2014though we might have stemmed this, its impossible to tell from the example). This results in what is essentially a \"bag of words,\" or a corpus of words without any structure. Because normalizing your text reduces the number of words (and therefore the number of dimensions in your data), and keeps only the words that contribute meaning to the document, this cleaning is usually desirable.</p><p>\nAgain, this will be covered more in depth in the Machine Learning Tutorial, but for the time being, we just need to know that there is \"clean\" and \"dirty\" versions of text data. Sometimes our questions are about the clean data, but sometimes our questions are in the \"dirt.\"</p>\n</blockquote>\n<h2>Words into numbers</h2>\n<p>In the next section, we are going to go through a series of methods that come built-in to NLTK that allow us to turn our words into numbers and visualizations. This is just scratching the surface, but should give you an idea of what is possible beyond just counting words.</p>", "order": 3}}, {"model": "lesson.lesson", "pk": 461, "fields": {"title": "NLTK Methods with the NLTK Corpus", "created": "2020-07-15T22:01:28.202Z", "updated": "2020-07-15T22:01:28.202Z", "workshop": 53, "text": "<p>All of the code for this section is in a Jupyter Notebook in the GitHub repository. I encourage you to follow along by retyping all of the code, but if you get lost, or want another reference, the code is there as well.</p><p>\nTo open the notebook, first create a <code>projects</code> folder if you don't already have one by entering this command in your terminal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">mkdir -p ~/Desktop/projects</span>\n</code></pre></div>\n<p>If you already have a projects folder, you can skip this step.</p><p>\nNext, clone the text analysis session repository into your projects folder by entering this command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">git clone https://github.com/DHRI-Curriculum/text-analysis.git ~/Desktop/projects/text-analysis</span>\n</code></pre></div>\n<p>Then move to the new directory:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cd ~/Desktop/projects/text-analysis</span>\n</code></pre></div>\n<p>Now launch the Jupyter Notebook application by typing this into the terminal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">jupyter notebook</span>\n</code></pre></div>\n<p>If it's your first time opening the notebook, you may be prompted to enter a URL into your browser. Copy out the URL and paste it into the Firefox or Google Chrome search bar.</p><p>\nFinally, in the Jupyter Notebook file browser, find the notebook file and open it. It should be called <code>TextAnalysis.ipynb</code>. You will use this file for reference in case you get stuck in the next few sections, so keep it open.</p><p>\nReturn to the Jupyter Home Tab in your Browser (or Launch the Jupyter Notebook again), and start a New Python3 Notebook using the <code>New</code> button in the upper right corner.</p><p>\nEven though Jupyter Notebook doesn't force you to do so, it is very important to name your file, or you will end up later with a bunch of untitled files and you will have no idea what they are about. In the top left, click in the word <code>Untitled</code> and give your file a name such as \"intro_nltk\".</p><p>\nIn the first blank cell, type the following to import the NLTK library:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nltk</span>\n</code></pre></div>\n<p><strong>Libraries</strong> are sets of instructions that Python can use to perform specialized functions. The Natural Language ToolKit (<code>nltk</code>) is one such library. As the name suggests, its focus is on language processing.</p><p>\nWe will also need the matplotlib library later on, so import it now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n</code></pre></div>\n<p><code>matplotlib</code> is a library for making graphs. In the middle of this tutorial, we are going to make a dispersion plot of words in our texts.</p><p>\nFinally, because of a quirk of Jupyter notebooks, we need to specify that matplotlib should display its graphs in the notebook (as opposed to in a separate window), so we type this command (this is technically a Jupyter command, not Python):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n</code></pre></div>\n<p>All three of these commands can be written in the same cell and run all at once (<code>Shift + Enter</code>) or in different cells.</p><p>\n<img alt=\"Image showing that the three lines given above can be written in a single cell in the Jupyter notebook, one after another\" src=\"/static/images/lessons/text-analysis/imports.png\"/></p><p>\nIf you don't see an error when you run the notebook\u2014that is, if nothing happens\u2014you can move on to the next step.</p><p>\nNext, we need to load all of the NLTK corpora into our program. Even though we downloaded them to our computer, we need to tell Python we want to use them.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.book</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</code></pre></div>\n<p>The pre-loaded NLTK texts should appear again. These are preformatted data sets. We will still have to do some minor processing, but having the data in this format saves us a few steps. At the end of this tutorial, we will make our own corpus. This is a special type of python object specific to NLTK (it isn't a string, list, or dictionary). Sometimes it will behave like a string, and sometimes like a list of words. How it is behaving is noted for each function as we try it out.</p><p>\n<img alt='Image showing a second cell with the output of \"from nltk.book import *\"' src=\"/static/images/lessons/text-analysis/nltkbook.png\"/></p><p>\nLet's start by analyzing <em>Moby Dick</em>, which is <code>text1</code> for NLTK.</p>", "order": 4}}, {"model": "lesson.lesson", "pk": 462, "fields": {"title": "Searching For Words", "created": "2020-07-15T22:01:28.205Z", "updated": "2020-07-15T22:01:28.205Z", "workshop": 53, "text": "<p>The first function we will look at is <code>concordance</code>. \"Concordance\" in this context means the characters on either side of the word. Our text is behaving like a string. As discussed in the <a href=\"https://github.com/DHRI-Curriculum/python\">Python tutorial LINK</a>, Python does not <em>evaluate</em> strings, so it just counts the number of characters on either side. By default, this is 25 characters on either side of our target word (including spaces).</p><p>\nIn the Jupyter Notebook, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1</span><span class=\"o\">.</span><span class=\"n\">concordance</span><span class=\"p\">(</span><span class=\"s2\">\"whale\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The output shows us the 25 characters on either side of the word \"whale\" in <em>Moby Dick</em>. Let's try this with another word, \"love.\" Just replace the word \"whale\" with \"love,\" and we get the contexts in which Melville uses \"love\" in <em>Moby Dick</em>. <code>concordance</code> is used (behind the scenes) for several other functions, including <code>similar</code> and <code>common_contexts</code>.</p><p>\nLet's now see which words appear in similar contexts as the word \"love.\" NLTK has a built-in function for this as well: <code>similar</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1</span><span class=\"o\">.</span><span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"s2\">\"love\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Behind the scenes, Python found all the contexts where the word \"love\" appears. It also finds similar environments, and then what words were common among the similar contexts. This gives a sense of what other words appear in similar contexts. This is somewhat interesting, but more interesting if we can compare it to something else. Let's take a look at another text. What about <em>Sense and Sensibility</em>? Let's see what words are similar to \"love\" in Jane Austen's writing. In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text2</span><span class=\"o\">.</span><span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"s2\">\"love\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We can compare the two and see immediately that Melville and Austen use the word \"love\" differently.</p>\n<h2>Investigating \"lol\"</h2>\n<p>Let's expand from novels for a minute and take a look at the NLTK Chat Corpus. In chats, text messages, and other digital communication platforms, \"lol\" is exceedingly common. We know it doesn't simply mean \"laughing out loud\"\u2014maybe the <code>similar</code> function can provide some insight into what it does mean.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text5</span><span class=\"o\">.</span><span class=\"n\">similar</span><span class=\"p\">(</span><span class=\"s2\">\"lol\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The resulting list is a lot of greetings, indicating that \"lol\" probably has more of a <a href=\"http://www.oxfordreference.com/view/10.1093/oi/authority.20110803100321840\">phatic function</a>. Phatic language is language primarily for communicating social closeness. Phatic words stand in contrast to semantic words, which contribute meaning to the utterance.</p><p>\nIf you are interested in this type of analysis, take a look at the <code>common_contexts</code> function in the <a href=\"https://www.nltk.org/book/\">NLTK book</a> or in the <a href=\"https://www.nltk.org/\">NLTK docs</a>.</p>", "order": 5}}, {"model": "lesson.lesson", "pk": 463, "fields": {"title": "Positioning Words", "created": "2020-07-15T22:01:28.207Z", "updated": "2020-07-15T22:01:28.207Z", "workshop": 53, "text": "<p>In many ways, <code>concordance</code> and <code>similar</code> are heightened word searches that tell us something about what is happening near the target words. Another metric we can use is to visualize where the words appear in the text. In the case of <em>Moby Dick</em>, we want to compare where \"whale\" and \"monster\" appear throughout the text. In this case, the text is functioning as a list of words, and will make a mark where each word appears, offset from the first word. We will <em>pass</em> this <em>function</em> a <em>list</em> of <em>strings</em> to plot. This will likely help us develop a visual of the story \u2014 where the whale goes from being a whale to being a monster to being a whale again. In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1</span><span class=\"o\">.</span><span class=\"n\">dispersion_plot</span><span class=\"p\">([</span><span class=\"s2\">\"whale\"</span><span class=\"p\">,</span> <span class=\"s2\">\"monster\"</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>A graph should appear with a tick mark everywhere that \"whale\" appears and everywhere that \"monster\" appears. Knowing the story, we can interpret this graph and align it to what we know of how the narrative progresses. If we did not know the story, this could give us a picture of the narrative arc.</p><p>\nTry this with <code>text2</code>, <em>Sense and Sensibility</em>. Some relevant words are \"marriage,\" \"love,\" \"home,\" \"mother,\" \"husband,\" \"sister,\" and \"wife.\" Pick a few to compare. You can compare an unlimited number, but it's easier to read a few at a time. (Note that the comma in our writing here is <em>inside</em> the quotation mark but for Python, this would be unreadable and you would have to put commas outside of quotation marks to create a <em>list</em>.)</p><p>\nNLTK has many more functions built-in, but some of the most powerful functions are related to cleaning, part-of-speech tagging, and other stages in the text analysis pipeline (where the pipeline refers to the process of loading, cleaning, and analyzing text).</p>", "order": 6}}, {"model": "lesson.lesson", "pk": 464, "fields": {"title": "Built-In Python Functions", "created": "2020-07-15T22:01:28.208Z", "updated": "2020-07-15T22:01:28.208Z", "workshop": 53, "text": "<p>We will now turn our attention away from the NLTK library and work with our text using the built-in Python functions\u2014the ones that come included with the Python language, rather than the NLTK library.</p>\n<h2>Types vs. tokens</h2>\n<p>First, let's find out how many times a given word appears in the corpus. In this case (and all cases going forward), our text will be treated as a list of words. Therefore, we will use the <code>count</code> function. We could just as easily do this with a text editor, but performing this in Python allows us to save it to a variable and then utilize this statistic in other calculations (for example, if we want to know what percentage of words in a corpus are 'lol', we would need a count of the 'lol's). In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">\"whale\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We see that \"whale\" occurs 906 times, but that seems a little low. Let's check on \"Whale\" and see how often that appears:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">\"Whale\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>\"Whale\" with a capital \"W\" appears 282 times. This is a problem for us\u2014we actually want them to be collapsed into one word, since \"whale\" and \"Whale\" really are the same for our purposes. We will deal with that in a moment. For the time being, we will accept that we have two entries for \"whale.\"</p><p>\nThis gets at a distinction between <strong>type</strong> and <strong>token</strong>. \"Whale\" and \"whale\" are different types (as of now) because they do not match identically. Every instance of \"whale\" in the corpus is another <strong>token</strong>\u2014it is an instance of the type, \"whale.\" Therefore, there are 906 tokens of \"whale\" in our corpus.</p><p>\nLet's fix this by making all of the words lowercase. We will make a new list of words, and call it \"text1_tokens\". We will fill this list with all the words in text1, but in their lowercase form. Python has a built-in function, <code>lower()</code> that takes all letters and makes them lowercase. In this same step, we are going to do a kind of tricky move, and only keep the words that are alphabetical and pass over anything that is punctuation or numbers. There is a built-in function, <code>isalpha()</code>, that will allow us to save only those words that are made of letters. If <code>isalpha()</code> is true, we'll make the word lowercase, and keep the word. If not, we'll pass over it and move to the next one.</p><p>\nType the following code into a new cell in your notebook. Pay special attention to the indentation, which must appear as below. (Note that in Jupyter Notebook, indentation usually comes automatically. If not, make sure to type the <code>space</code> key 4 times)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_tokens</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1</span><span class=\"p\">:</span>\n  <span class=\"k\">if</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">():</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"n\">text1_tokens</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</code></pre></div>\n<p><img alt=\"image with code above in a jupyter notebook cell\" src=\"/static/images/lessons/text-analysis/for_loop_tokens.png\"/></p><p>\nAnother way to perform the same action more tersely is to use what's called a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\">list comprehension</a>. A list comprehension is a shorter, faster way to write a for-loop. It is syntactically a little more difficult to read (for a human), but, in this case, it's much faster to process. Don't worry too much about understanding the syntax of list comprehensions right now. For every example, we will show both the for loop and list comprehension options.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_tokens</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1</span> <span class=\"k\">if</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">()]</span>\n</code></pre></div>\n<p>Great! Now <code>text1_tokens</code> is a list of all of the tokens in our corpus, with the punctuation removed, and all the words in lowercase.</p><p>\nNow we want to know how many words there are in our corpus\u2014that is, how many tokens in total. Therefore, we want to ask, \"What is the length of that list of words?\" Python has a built-in <code>len</code> function that allows you to find out the length of many types. Pass it a list, and it will tell you how many items are in the list. Pass it a string, and it will tell you how many characters are in the string. Pass it a dictionary, and it will tell you how many items are in the dictionary. In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1_tokens</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Just for comparison, check out how many words were in \"text1\"\u2014before we removed the punctuation and the numbers.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>We see there are over 218,000 words in <em>Moby Dick</em> (including metadata). But this is the number of words total\u2014we want to know the number of unique words. That is, we want to know how many <em>types</em>, not just how many tokens.</p><p>\nIn order to get unique words, rather than just all words in general, we will make a <strong>set</strong> from the list. A <code>set</code> in Python work just like it would <a href=\"https://en.wikipedia.org/wiki/Set_(mathematics)\">in math</a>, it's all the unique values, with any duplicate items removed.</p><p>\nSo let's find out the length of our set. just like in math, we can also nest our functions. So, rather than saying <code>x = set(text1_tokens)</code> and then finding the length of \"x\", we can do it all in one step.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_tokens</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Great! Now we can calculate the <strong>lexical density</strong> of <em>Moby Dick</em>. <a href=\"https://pdfs.semanticscholar.org/c2a8/56959d7f5880c98ccd4cfeb4b4f5b7133ec7.pdf\">Statistical studies</a> have shown that lexical density (the number of unique words per total words) is a good metric to approximate lexical diversity\u2014the range of vocabulary an author uses. For our first pass at lexical density, we will simply divide the number of unique words by the total number of words:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_tokens</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1_tokens</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>If we want to use this metric to compare texts, we immediately notice a problem. Lexical density is dependent upon the length of a text and therefore is strictly a comparative measure. It is possible to compare 100 words from one text to 100 words from another, but because language is finite and repetitive, it is not possible to compare 100 words from one to 200 words from another. Even with these restrictions, lexical density is a useful metric in grade level estimations, <a href=\"http://www.mdpi.com/2226-471X/2/3/7\">vocabulary use</a> and genre classification, and a reasonable proxy for lexical diversity.</p><p>\nLet's take this constraint into account by working with only the first 10,000 words of our text. First we need to slice our list, returning the words in position 0 to position 9,999 (we'll actually write it as \"up to, but not including\" 10,000).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_slice</span> <span class=\"o\">=</span> <span class=\"n\">text1_tokens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">10000</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Now we can do the same calculation we did above:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_slice</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1_slice</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is a much higher number, though the number itself is arbitrary. When comparing different texts, this step is essential to get an accurate measure.</p>", "order": 7}}, {"model": "lesson.lesson", "pk": 465, "fields": {"title": "Making Your Own Corpus: Data Cleaning", "created": "2020-07-15T22:01:28.213Z", "updated": "2020-07-15T22:01:28.213Z", "workshop": 53, "text": "<p>Thus far, we have been asking questions that take stopwords and grammatical features into account. For the most part, we want to exclude these features since they don't actually contribute very much semantic content to our models. Therefore, we will:</p><p>\n1. Remove capitalization and punctuation (we've already done this).</p><p>\n2. Remove stop words.</p><p>\n3. Lemmatize (or stem) our words, i.e. \"jumping\" and \"jumps\" become \"jump.\"</p>\n<h2>Removing Stopwords</h2>\n<p>We already completed step one, and are now working with our <code>text1_tokens</code>. Remember, this variable, <code>text1_tokens</code>, contains a list of strings that we will work with. We want to remove the stop words from that list. The NLTK library comes with fairly comprehensive lists of stop words for many languages. Stop words are function words that contribute very little semantic meaning and most often have grammatical functions. Usually, these are function words such as determiners, prepositions, auxiliaries, and others.</p><p>\nTo use NLTK's stop words, we need to import the list of words from the corpus. (We could have done this at the beginning of our program, and in more fully developed code, we would put it up there, but this works, too.) In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.corpus</span> <span class=\"kn\">import</span> <span class=\"n\">stopwords</span>\n</code></pre></div>\n<p>We need to specify the English list, and save it into its own variable that we can use in the next step:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">stops</span> <span class=\"o\">=</span> <span class=\"n\">stopwords</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">(</span><span class=\"s1\">'english'</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Now let's take a look at those words:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">stops</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Now we want to go through all of the words in our text, and if that word is in the stop words list, remove it from our list. Otherwise, we want it to skip it. (The code below is VERY slow, so it may take some time to process). The way we can write this in Python is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_stops</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_tokens</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">stops</span><span class=\"p\">:</span>\n        <span class=\"n\">text1_stops</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>A faster option, if you are feeling bold, would be using <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\">list comprehensions</a>: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_stops</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_tokens</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">stops</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>To check the result:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">text1_stops</span><span class=\"p\">[:</span><span class=\"mi\">30</span><span class=\"p\">])</span>\n</code></pre></div>\n<h3>Verifying List Contents</h3>\n<p>Now that we removed our stop words, let's see how many words are left in our list:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1_stops</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>You should get a much lower number.</p><p>\nFor reference, let's also check how many unique words there are. We will do this by making a set of words. Sets are the same in Python as they are in math, they are all of the unique words rather than all the words. So, if \"whale\" appears 200 times in the list of words, it will only appear once in the set.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_stops</span><span class=\"p\">))</span>\n</code></pre></div>\n<h2>Lemmatizing Words</h2>\n<p>Now that we've removed the stop words from our corpus, the next step is to stem or lemmatize the remaining words. This means that we will strip off the grammatical structure from the words. For example, <code>cats \u2014&gt; cat</code>, and <code>walked \u2014&gt; walk</code>. If that was all we had to do, we could stem the corpus and achieve the correct result, because stemming (as the name implies) really just means cutting off affixes to find the root (or the stem). Very quickly, however, this gets complicated, such as in the case of <code>men \u2014&gt; man</code> and <code>sang \u2014&gt; sing</code>. Lemmatization deals with this by looking up the word in a reference and finding the appropriate root (though note that this still is not entirely accurate). Lemmatization, therefore, takes a relatively long time, since each word must be looked up in a reference. NLTK comes with pre-built stemmers and lemmatizers.</p><p>\nWe will use the WordNet Lemmatizer from the NLTK Stem library, so let's import that now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.stem</span> <span class=\"kn\">import</span> <span class=\"n\">WordNetLemmatizer</span>\n</code></pre></div>\n<p>Because of the way that it is written \"under the hood,\" an instance of the lemmatizer needs to be called. We know this from reading <a href=\"https://www.nltk.org/\">the docs</a>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wordnet_lemmatizer</span> <span class=\"o\">=</span> <span class=\"n\">WordNetLemmatizer</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Let's quickly see what lemmatizing does.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"children\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Now try this one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"better\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>It didn't work, but...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"better\"</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>... sometimes we can get better results if we define a specific part of speech(pos). \"a\" is for \"adjective\", as we learned <a href=\"http://www.nltk.org/_modules/nltk/corpus/reader/wordnet.html\">here</a>.</p><p>\nNow we will lemmatize the words in the list.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_clean</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_stops</span><span class=\"p\">:</span>\n    <span class=\"n\">t_lem</span> <span class=\"o\">=</span> <span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">text1_clean</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t_lem</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>And again, there is a faster version for you to use once you feel comfortable with list comprehensions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">text1_clean</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_stops</span><span class=\"p\">]</span>\n</code></pre></div>\n<h3>Verifying Clean List Contents</h3>\n<p>Let's check now to see the length of our final, cleaned version of the data, and then check the unique set of words. Notice how we will use the <code>print</code> function this time. Jupyter Notebook does print commands without the <code>print</code> function, but it will only print one thing per cell (the last command), and we wanted to print two different things:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text1_clean</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_clean</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>If everything went right, you should have the same length as before, but a smaller number of unique words. That makes sense since we did not remove any word, we only changed some of them.</p><p>\nNow if we were to calculate lexical density, we would be looking at how many word stems with semantic content are represented in <em>Moby Dick</em>, which is a different question than the one in our first analysis of lexical density.</p><p>\nWhy don't you try that by yourself? Try to remember how to calculate lexical density without looking back first. It is ok if you have forgotten.</p><p>\nNow let's have a look at the words Melville uses in <em>Moby Dick</em>. We'd like to look at all of the <em>types</em>, but not necessarily all of the <em>tokens.</em> We will order this set so that it is in an order we can handle. In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">text1_clean</span><span class=\"p\">))[:</span><span class=\"mi\">30</span><span class=\"p\">]</span>\n</code></pre></div>\n<p><code>Sorted</code> + <code>set</code> should give us a list of list of all the words in <em>Moby Dick</em> in alphabetical order, but we only want to see the first ones. Notice how there are some words we wouldn't have expected, such as 'abandon', 'abandoned', 'abandonedly', and 'abandonment'. This process is far from perfect, but it is useful. However, depending on your goal, a different process, like <code>stemming</code> might be better. </p>\n<h2>Stemming Words</h2>\n<p>The code to implement this and view the output is below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.stem</span> <span class=\"kn\">import</span> <span class=\"n\">PorterStemmer</span>\n<span class=\"n\">porter_stemmer</span> <span class=\"o\">=</span> <span class=\"n\">PorterStemmer</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>The Porter is the most common Stemmer. Let's see what stemming does to words and compare it with lemmatizers:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'berry'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'berries'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"berry\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"s2\">\"berries\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Stemmer doesn't look so good, right? But how about checking how stemmer handles some of the words that our lemmatized \"failed\" us?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'abandon'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'abandoned'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'abandonedly'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"s1\">'abandonment'</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Still not perfect, but a bit better. So the question is, how to choose between stemming and lemmatizing? As many things in text analysis, that depends. The best way to go is experimenting, seeing the results and chosing the one that better fits your goals.</p><p>\nAs a general rule, stemming is faster while lemmatizing is more accurate (but not always, as we just saw). For academics, usually the choice goes for the latter.</p><p>\nAnyway, let's stem our text with the Porter Stemmer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">t1_porter</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_clean</span><span class=\"p\">:</span>\n    <span class=\"n\">t_stemmed</span> <span class=\"o\">=</span> <span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t1_porter</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t_stemmed</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Or, if we want a faster way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">t1_porter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">porter_stemmer</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">text1_clean</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>And let's check the results:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">t1_porter</span><span class=\"p\">)))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">t1_porter</span><span class=\"p\">))[:</span><span class=\"mi\">30</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>A very different list of words is produced. This list is shorter than the list produced by the lemmatizer, but is also less accurate, and some of the words will completely change their meaning (like 'berry' becoming 'berri').</p>\n<h2>Back to the Lemmatized text</h2>\n<p>Now that we've seen some of the differences between both, we will proceed using our lemmatized corpus, which we saved as \"text1_clean\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">my_dist</span> <span class=\"o\">=</span> <span class=\"n\">FreqDist</span><span class=\"p\">(</span><span class=\"n\">text1_clean</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>If nothing happened, that is normal. Check to make sure it is there by calling for the type of the \"my_dist\" object.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">my_dist</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The result should say it is a nltk probability distribution (<code>nltk.probability.FreqDist</code>). It doesn't matter too much right now what that is, only that it worked. We can now plot this with the matplotlib function, <code>plot</code>. We want to plot the first 20 entries of the my_dist object.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">my_dist</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</code></pre></div>\n<p><img alt=\"nltk plot distribution\" src=\"/static/images/lessons/text-analysis/nltk_plot.png\"/></p><p>\nWe've made a nice image here, but it might be easier to comprehend as a list. Because this is a special probability distribution object we can call the <code>most_common</code> on this, too. Let's find the twenty most common words:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">my_dist</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What about if we are interested in a list of specific words\u2014perhaps to identify texts that have biblical references. Let's make a (short) list of words that might suggest a biblical reference and see if they appear in <em>Moby Dick</em>. Set this list equal to a variable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">b_words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'god'</span><span class=\"p\">,</span> <span class=\"s1\">'apostle'</span><span class=\"p\">,</span> <span class=\"s1\">'angel'</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Then we will loop through the words in our cleaned corpus, and see if any of them are in our list of biblical words. We'll then save into another list just those words that appear in both.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">b_words</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">text1_clean</span><span class=\"p\">:</span>\n        <span class=\"n\">my_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</code></pre></div>\n<p>And then we will print the results.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>You can obviously do this with much larger lists and even compare entire novels if you wish, though it would take a while with this approach. You can use this to get similarity measures and answer related questions.</p>", "order": 8}}, {"model": "lesson.lesson", "pk": 466, "fields": {"title": "Make Your Own Corpus", "created": "2020-07-15T22:01:28.217Z", "updated": "2020-07-15T22:01:28.217Z", "workshop": 53, "text": "<p>Now that we have seen and implemented a series of text analysis techniques, let's go to the Internet to find a new text. You could use something such as historic newspapers, or Supreme Court proceedings, or use any txt file on your computer. Here we will use <a href=\"http://www.gutenberg.org\">Project Gutenberg</a>. Project Gutenberg is an archive of public domain written works, available in a wide variety of formats, including .txt. You can download these to your computer or access them via the url. We'll use the url method. We found <em>Don Quixote</em> in the archive, and will work with that.</p><p>\nThe Python package, urllib, comes installed with Python, but is inactive by default, so we still need to import it to utilize the functions. Since we are only going to use the urlopen function, we will just import that one.</p><p>\nIn the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">urllib.request</span> <span class=\"kn\">import</span> <span class=\"n\">urlopen</span>\n</code></pre></div>\n<p>The <code>urlopen</code> function allows your program to interact with files on the internet by opening them. It does not read them, however\u2014they are just available to be read in the next line. This is the default behavior any time a file is opened and read by Python. One reason is that you might want to read a file in different ways. For example, if you have a <strong>really</strong> big file\u2014think big data\u2014you might want to read line-by-line rather than the whole thing at once.</p><p>\nNow let's specify which URL we are going to use. Though you might be able to find <em>Don Quixote</em> in the Project Gutenberg files, please type this in so that we are all using the same format (there are multiple .txt files on the site, one with utf-8 encoding, another with ascii encoding). We want the utf-8 encoded one. The difference between these is beyond the scope of this tutorial, but you can check out this <a href=\"https://www.w3.org/International/questions/qa-what-is-encoding\">introduction to character encoding</a> from The World Wide Web Consortium (W3C) if you are interested.</p><p>\nSet the URL we want to a variable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">my_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://www.gutenberg.org/files/996/996-0.txt\"</span>\n</code></pre></div>\n<p>We still need to open the file and read the file. You will have to do this with files stored locally as well. (in which case, you would type the path to the file (i.e., <code>data/texts/mytext.txt</code>) in place of <code>my_url</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">file</span> <span class=\"o\">=</span> <span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">my_url</span><span class=\"p\">)</span>\n<span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>This file is in bytes, so we need to decode it into a string. In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don</span> <span class=\"o\">=</span> <span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Now let's check on what kind of object we have in the \"don\" variable. Type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">don</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This should be a string. Great! We have just read in our first file and now we are going to transform that string into a text that we can perform NLTK functions on. Since we already imported nltk at the beginning of our program, we don't need to import it again, we can just use its functions by specifying <code>nltk</code> before the function. The first step is to tokenize the words, transforming the giant string into a list of words. A simple way to do this would be to split on spaces, and that would probably be fine, but we are going to use the NLTK tokenizer to ensure that edge cases are captured (i.e., \"don't\" is made into 2 words: \"do\" and \"n't\"). In the next cell, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don_tokens</span> <span class=\"o\">=</span> <span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">word_tokenize</span><span class=\"p\">(</span><span class=\"n\">don</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>You can check out the type of <code>don_tokens</code> using the <code>type()</code> function to make sure it worked\u2014it should be a list. Let's see how many words there are in our novel:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">don_tokens</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Since this is a list, we can look at any slice of it that we want. Let's inspect the first ten words:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don_tokens</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>That looks like metadata\u2014not what we want to analyze. We will strip this off before proceeding. If you were doing this to many texts, you would want to use <a href=\"https://regexone.com/\">Regular Expressions</a>. Regular Expressions are an extremely powerful way to match text in a document. However, we are just using this text, so we could either guess, or cut and paste the text into a text reader and identify the position of the first content (i.e., how many words in is the first word). That is the route we are going to take. We found that the content begins at word 315, so let's make a slice of the text from word position 315 to the end.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dq_text</span> <span class=\"o\">=</span> <span class=\"n\">don_tokens</span><span class=\"p\">[</span><span class=\"mi\">315</span><span class=\"p\">:]</span>\n</code></pre></div>\n<p>Finally, if we want to use the NLTK specific functions:</p><p>\n- <code>concordance</code></p><p>\n- <code>similar</code></p><p>\n- <code>dispersion_plot</code></p><p>\n- or others from the <a href=\"https://www.nltk.org/book/\">NLTK book</a></p><p>\nwe would have to make a specific NLTK <code>Text</code> object.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dq_nltk_text</span> <span class=\"o\">=</span> <span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">dq_text</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>If we wanted to use the built-in Python functions, we can just stick with our list of words in <code>dq_text</code>. Since we've already covered all of those functions, we are going to move ahead with cleaning our text.</p><p>\nJust as we did earlier, we are going to remove the stopwords based on a list provided by NLTK, remove punctuation, and capitalization, and lemmatize the words. You can do it one by one as we did before, and that is totally fine. You can also merge some of the steps as you see below.</p><p>\n1. Lowercase, remove punctuation and stopwords</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dq_clean</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">dq_text</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">stops</span><span class=\"p\">:</span>\n            <span class=\"n\">dq_clean</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dq_clean</span><span class=\"p\">[:</span><span class=\"mi\">50</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>2. Lemmatize</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">nltk.stem</span> <span class=\"kn\">import</span> <span class=\"n\">WordNetLemmatizer</span>\n<span class=\"n\">wordnet_lemmatizer</span> <span class=\"o\">=</span> <span class=\"n\">WordNetLemmatizer</span><span class=\"p\">()</span>\n<span class=\"n\">dq_lemmatized</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">dq_clean</span><span class=\"p\">:</span>\n    <span class=\"n\">dq_lemmatized</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">wordnet_lemmatizer</span><span class=\"o\">.</span><span class=\"n\">lemmatize</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>From here, you could perform all of the operations that we did after cleaning our text in the previous session. Instead, we will perform another type of analysis: part-of-speech (POS) tagging.</p>", "order": 9}}, {"model": "lesson.lesson", "pk": 467, "fields": {"title": "Part-of-Speech Tagging", "created": "2020-07-15T22:01:28.220Z", "updated": "2020-07-15T22:01:28.220Z", "workshop": 53, "text": "<p><em>Note that we are going to use the pre-cleaned, <code>dq_text</code> object for this section.</em></p><p>\nPOS tagging is going through a text and identifying which part of speech each word belongs to (i.e., Noun, Verb, or Adjective). Every word belongs to a part of speech, but some words can be confusing.</p><p>\n- Floyd is happy.</p><p>\n- Happy is a state of being.</p><p>\n- Happy has five letters.</p><p>\n- I'm going to Happy Cat tonight.</p><p>\nTherefore, part of speech is as much related to the word itself as its relationship to the words around it. A good part-of-speech tagger takes this into account, but there are some impossible cases as well:</p><p>\n- Wanda was entertaining last night.</p><p>\nPart of Speech tagging can be done very simply: with a very small <em>tag set</em>, or in a very complex way: with a much more elaborate tag set. We are going to implement a compromise, and use a neither small nor large tag set, the <a href=\"https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html\">Penn Tree Bank POS Tag Set</a>.</p><p>\nThis is the tag set that is pre-loaded into NLTK. When we call the tagger, we expect it to return an object with the word and the tag associated. Because POS tagging is dependent upon the stop words, we have to use a text that includes the stop words. Therefore, we will go back to using the <code>dq_text</code> object for this section. Let's try it out. Type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dq_tagged</span> <span class=\"o\">=</span> <span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">pos_tag</span><span class=\"p\">(</span><span class=\"n\">dq_text</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Let's inspect what we have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dq_tagged</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>This is a list of ordered tuples. (A tuple is like a list, but can't be changed once it is created.) Each element in the list is a pairing of <code>(word, POS-tag)</code>. (Tuples are denoted with parentheses, rather than square brackets.) This is great, but it is very detailed. I would like to know how many Nouns, Verbs, and Adjectives I have. </p><p>\nFirst, I'll make an empty dictionary to hold my results. Then I will go through this list of tuples and count the number of times each tag appears. Every time I encounter a new tag, I'll add it to a dictionary and then increment by one every time I encounter that tag again. Let's see what that looks like in code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tag_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"c1\"># For every word/tag pair in my list,</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">dq_tagged</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tag_dict</span><span class=\"p\">:</span>\n        <span class=\"n\">tag_dict</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">tag_dict</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Now let's see what we got:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tag_dict</span>\n</code></pre></div>\n<p>This would be better with some order to it, but dictionaries are made to be unordered. When we google \"sort dictionaries python\" we find a solution in our great friend <a href=\"https://stackoverflow.com/a/613218\">stack overflow</a>. Even though we cannot sort a dictionary, we can get a representation of a dictionary that is sorted. Don't worry too much about understanding the following code, as it uses things we have not discussed, and are out of the scope of this course. It is useful to see how we can reuse pieces of code even when we don't fully understand them.</p><p>\nNow let's do it and find out what the most common tag is.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tag_dict_sorted</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">tag_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span>\n             <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n             <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">kv</span><span class=\"p\">:</span> <span class=\"n\">kv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tag_dict_sorted</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Now check out what we have. It looks like NN is the most common tag. We can look up what NN means in the <a href=\"https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html\">Penn Tree Bank</a>. Looks like NN is a Noun, singular or mass. Great! This information will likely help us with genre classification, or identifying the author of a text, or a variety of other functions.</p>", "order": 10}}, {"model": "lesson.lesson", "pk": 468, "fields": {"title": "Conclusion", "created": "2020-07-15T22:01:28.221Z", "updated": "2020-07-15T22:01:28.221Z", "workshop": 53, "text": "<p>At this point, you should have a familiarity with what is possible with text analysis, and some of the most important functions (i.e., cleaning and part-of-speech tagging). Yet, this tutorial has only scratched the surface of what is possible with text analysis and natural language processing. It is a rapidly growing field, if you are interested, be sure to work through the online <a href=\"https://www.nltk.org/book/\">NLTK Book</a> as well as peruse the resources in the Zotero Library.</p>\n<h2>More Resources</h2>\n<ul>\n<li><a href=\"http://www.nltk.org/index.html\">NLTK Documentation</a></li>\n<li><a href=\"http://nlp.lsi.upc.edu/freeling/index.php\">FreeLing</a>, an open source language analysis tool suite.</li>\n<li><a href=\"https://programminghistorian.org/en/lessons/sentiment-analysis\">\"Sentiment Analysis for Exploratory Data Analysis\"</a>, a lesson to conduct \u2018sentiment analysis\u2019 on texts with Python and NLTK.</li>\n<li><a href=\"http://journalofdigitalhumanities.org/2-1/\">Journal of Digital Humanities, Vol. 2, No. 1 Winter 2012</a> contains interesting several interesting articles about topic modeling and text analysis.</li>\n<li><a href=\"https://github.com/cltk\">Classical Language Toolkit on GitHub</a>, Natural Language Processing specifically for Classical languages.</li>\n<li><a href=\"https://medium.com/agatha-codes/a-bossy-sort-of-voice-3c3a18de3093\">\"A Bossy Sort of Voice\"</a>, describes a Python/NLTK project quantifying gender bias in <em>Harry Pottery</em> with Python and NLTK.</li>\n<li><a href=\"https://kite.com/blog/python/python-digital-humanities-gothic-literature-nltk\">\"Finding Patterns in Gothic Literature\"</a>, describes a Python/NLTK project analyzing color in Gothic Literature.</li>\n<li><a href=\"https://www.pitt.edu/~naraehan/python3/faq.html\">\"Python and NLTK FAQs\"</a>, resources compiled by Na-Rae Han.</li>\n</ul>", "order": 11}}, {"model": "lesson.challenge", "pk": 72, "fields": {"lesson": 464, "title": "", "text": "<p>Let's compare the lexical density of <em>Moby Dick</em> with <em>Sense and Sensibility</em>. Make sure to:</p>\n<ol>\n<li>Make all the words lowercase and remove punctuation.</li>\n<li>Make a slice of the first 10,000 words.</li>\n<li>Calculate lexical density by dividing the length of the set of the slice by the length of the slice.</li>\n</ol>"}}, {"model": "frontmatter.ethicalconsideration", "pk": 136, "fields": {"frontmatter": 53, "label": "In working with massive amounts of text, it is natural to lose the original context. We must be aware of that and be careful when analizing it."}}, {"model": "frontmatter.ethicalconsideration", "pk": 137, "fields": {"frontmatter": 53, "label": "It is important to constantly question our assumptions and the indexes we are using. Numbers and graphs do not tell the story, our analysis does. We must be careful not to draw hasty and simplistic conclusions for things that are complex. Just because we found out that author A uses more unique words than author B, does it mean that A is a better writer than B?"}}, {"model": "frontmatter.learningobjective", "pk": 369, "fields": {"frontmatter": 53, "label": "Identify strategies for transforming texts into numbers"}}, {"model": "frontmatter.learningobjective", "pk": 370, "fields": {"frontmatter": 53, "label": "Explain what a concordance is, how to find one, and why it matters"}}, {"model": "frontmatter.learningobjective", "pk": 371, "fields": {"frontmatter": 53, "label": "Compare frequency distribution of words in a text to quantify the narrative arc"}}, {"model": "frontmatter.learningobjective", "pk": 372, "fields": {"frontmatter": 53, "label": "Explain what stop words are and why they are often removed"}}, {"model": "frontmatter.learningobjective", "pk": 373, "fields": {"frontmatter": 53, "label": "Remove stop words in a variety of languages"}}, {"model": "frontmatter.learningobjective", "pk": 374, "fields": {"frontmatter": 53, "label": "Utilize Part-of-Speech tagging to gather insights about a text"}}, {"model": "frontmatter.learningobjective", "pk": 375, "fields": {"frontmatter": 53, "label": "Transform any document that you have (or have access to) in a .txt format into a text that can be analyzed computationally"}}, {"model": "frontmatter.contributor", "pk": 189, "fields": {"first_name": "Michelle", "last_name": "McSweeney", "role": null, "url": "https://github.com/michellejm"}}, {"model": "frontmatter.contributor", "pk": 190, "fields": {"first_name": "Rachel", "last_name": "Rakov", "role": null, "url": "https://github.com/rachelrakov"}}, {"model": "frontmatter.contributor", "pk": 191, "fields": {"first_name": "Rafael Davis", "last_name": "Portela", "role": null, "url": "https://github.com/rafadavis"}}, {"model": "frontmatter.contributor", "pk": 192, "fields": {"first_name": "Kalle", "last_name": "Westerling", "role": null, "url": "https://github.com/kallewesterling"}}, {"model": "frontmatter.contributor", "pk": 193, "fields": {"first_name": "Patrick", "last_name": "Smyth", "role": null, "url": "https://github.com/smythp"}}, {"model": "frontmatter.contributor", "pk": 194, "fields": {"first_name": "Hannah", "last_name": "Aizenman", "role": null, "url": "https://github.com/story645"}}, {"model": "frontmatter.contributor", "pk": 195, "fields": {"first_name": "Lisa", "last_name": "Rhody", "role": null, "url": "https://github.com/lmrhody"}}, {"model": "frontmatter.contributor", "pk": 196, "fields": {"first_name": "Kelsey", "last_name": "Chatlosh", "role": null, "url": "https://github.com/kchatlosh"}}, {"model": "frontmatter.contributor", "pk": 197, "fields": {"first_name": "Filipa", "last_name": "Calado", "role": null, "url": "https://github.com/gofilipa"}}, {"model": "library.reading", "pk": 290, "fields": {"title": "A Beginner\u2019s Tutorial to Jupyter Notebooks", "url": "https://towardsdatascience.com/a-beginners-tutorial-to-jupyter-notebooks-1b2f8705888a", "annotation": "[A Beginner\u2019s Tutorial to Jupyter Notebooks](https://towardsdatascience.com/a-beginners-tutorial-to-jupyter-notebooks-1b2f8705888a)", "zotero_item": null}}, {"model": "library.reading", "pk": 291, "fields": {"title": "What is text analysis", "url": "https://www.scribbr.com/methodology/textual-analysis", "annotation": "[What is text analysis](https://www.scribbr.com/methodology/textual-analysis/) <!--- I don't love this one, but haven't found a better one yet -->", "zotero_item": null}}, {"model": "library.project", "pk": 134, "fields": {"title": "Short list of academic Text & Data mining projects", "url": "https://libguides.bc.edu/textdatamining/projects", "annotation": "[Short list of academic Text & Data mining projects](https://libguides.bc.edu/textdatamining/projects) ", "zotero_item": null}}, {"model": "library.project", "pk": 135, "fields": {"title": "Building a Simple Chatbot from Scratch in Python", "url": "https://github.com/parulnith/Building-a-Simple-Chatbot-in-Python-using-NLTK", "annotation": "[Building a Simple Chatbot from Scratch in Python](https://github.com/parulnith/Building-a-Simple-Chatbot-in-Python-using-NLTK)", "zotero_item": null}}, {"model": "library.project", "pk": 136, "fields": {"title": "Classifying personality type by social media posts", "url": "https://github.com/TGDivy/MBTI-Personality-Classifier", "annotation": "[Classifying personality type by social media posts](https://github.com/TGDivy/MBTI-Personality-Classifier)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 145, "fields": {"label": "Sentiment Analysis for Exploratory Data Analysis", "url": "https://programminghistorian.org/en/lessons/sentiment-analysis", "annotation": "[Sentiment Analysis for Exploratory Data Analysis](https://programminghistorian.org/en/lessons/sentiment-analysis)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 146, "fields": {"label": "A collection of Jupyter Notebooks on Mining the Social Web", "url": "https://github.com/mikhailklassen/Mining-the-Social-Web-3rd-Edition", "annotation": "[A collection of Jupyter Notebooks on Mining the Social Web](https://github.com/mikhailklassen/Mining-the-Social-Web-3rd-Edition)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 147, "fields": {"label": "Introduction to Stylometry", "url": "https://programminghistorian.org/en/lessons/introduction-to-stylometry-with-python", "annotation": "[Introduction to Stylometry](https://programminghistorian.org/en/lessons/introduction-to-stylometry-with-python)", "zotero_item": null}}, {"model": "library.reading", "pk": 292, "fields": {"title": "A bit more advanced Jupyter Notebook tips and tricks", "url": "https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts", "annotation": "[A bit more advanced Jupyter Notebook tips and tricks](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/)", "zotero_item": null}}, {"model": "library.reading", "pk": 293, "fields": {"title": "The NLTK documentation", "url": "https://www.nltk.org", "annotation": "[The NLTK documentation](https://www.nltk.org/)", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 54, "fields": {"name": "Command Line", "slug": "command-line", "created": "2020-07-15T22:01:30.181Z", "updated": "2020-07-15T22:01:30.181Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/command-line", "parent_branch": "v2.0-smorello-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 54, "fields": {"workshop": 54, "abstract": "By this point in our academic careers, most of us have figured out some ways we like to interact with computers. Whether that involves avoiding them as much as possible or constantly testing new software, we likely have some ideas about how we feel comfortable getting things done. How would you show a person who had never seen a computer, say [Kimmy Schmidt](https://youtu.be/LIdFa1qLgNQ) or [Brendan Fraser in *Blast from the Past*](https://youtu.be/Xq29uTtKW4M), how to *do* something on your computer?\nMany of us would explain what a screen and a cursor are, and then show how to point and click on icons. This approach relies on a graphical user interface, or GUI (pronounced \"gooey!\").\nToday we're going to explore another way to make your computer do things: through the command line. Instead of pointing and clicking, we'll be typing in either git bash (Windows) or terminal (macOS) to tell the computer directly what task we'd like it to perform.\nWhile this new technique can seem intimidating if you haven't used text-based interfaces before, luckily, you can use 90% of the functionality of the command line by becoming comfortable with a very small set of the most common commands.", "estimated_time": "3", "projects": [137, 138, 139, 140], "resources": [], "readings": [294, 295, 296], "contributors": [198, 199, 200, 201, 202], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 54, "fields": {"discussion_questions": "['Content TBD']", "next_steps": "[]", "workshop": 54, "further_readings": [297, 298, 299, 300], "more_projects": [], "more_resources": [], "tutorials": [148, 149, 150, 151]}}, {"model": "lesson.lesson", "pk": 469, "fields": {"title": "What Is the Command Line?", "created": "2020-07-15T22:01:30.183Z", "updated": "2020-07-15T22:01:30.183Z", "workshop": 54, "text": "<p>The command line is a text-based way of interacting with your computer. You may hear it called different names, such as the terminal, the shell, or bash. In practice, you can use these terms interchangeably. (If you're curious, though, you can read more about them <a href=\"https://github.com/DHRI-Curriculum/glossary/blob/master/sections/command-line.md\">in the glossary</a>.) The shell we use (whether terminal, shell, or bash) is a program that accepts commands as text input and converts commands into appropriate operating system functions.</p><p>\nThe command line (of computers today) receives these commands as text that is typed in.</p>\n<h2>What does \"text-based\" mean?</h2>\n<p>For those of us comfortable reading and writing, the idea of \"text-based\" in the context of computers can seem a bit strange. As we start to get comfortable typing commands to the computer, it's important to distinguish \"text\" from word processed, desktop publishing (think Microsoft Word or Google Docs) in which we use software that displays what we want to produce without showing us the code the computer is reading to render the formatting. Plain text has the advantage of being manipulable in different contexts.</p><p>\nLet's take a quick moment to discuss text and text editors.</p>", "order": 1}}, {"model": "lesson.lesson", "pk": 470, "fields": {"title": "Text editors", "created": "2020-07-15T22:01:30.185Z", "updated": "2020-07-15T22:01:30.185Z", "workshop": 54, "text": "<h2>What is text?</h2>\n<p>Before we explain which program we'll be using for editing text, we want to give a general sense of this \"text\" we keep mentioning. For those of us in the humanities, whether we follow literary theorists who read any object as a \"text\" or we dive into philology, paleography, codicology or any of the fields <a href=\"https://en.wikipedia.org/wiki/David_Greetham_(textual_scholar)\">David Greetham</a> lays out in <em>Textual Scholarship</em>, \"text\" has its specific meanings. As scholars working with computers, we need to be aware of the ways plain text and formatted text differ. Words on a screen may have hidden formatting. Many of us grew up using Microsoft Word and don't realize how much is going on behind the words shown on the screen. For the purposes of communicating with the computer and for easier movement between different programs, we need to use text without hidden formatting.</p><p>\n<img alt=\"Word Doc\" src=\"/static/images/lessons/command-line/worddoc.png\"/></p><p>\nUsers with visual disabilities, <a href=\"https://github.com/DHRI-Curriculum/command-line/blob/v2.0-smorello-edits/WordProcessorExample.docx?raw=true\">click here</a> to dowload the Word file.</p><p>\nIf you ask the command line to read that file, this Word .docx file will look something like this</p><p>\n<img alt=\"Word Doc as visualized by Command Line\" src=\"/static/images/lessons/command-line/CatWordDoc.png\"/></p><p></p><p>\nUsers with visual disabilities, <a href=\"PK.md\">click here</a> to dowload the text file.</p><p>\nWord documents which look like \"just words!\" are actually comprised of an archive of extensible markup language (XML) instructions that only Microsoft Word can read. Plain text files can be opened in a number of different editors and can be read within the command line.</p>\n<h2>Plain text</h2>\n<p>For the purposes of communicating with machines and between machines, we need characters to be as flexible as possible. Plain text include characters of readable material but not graphical representation.</p><p>\nAccording to the <a href=\"https://www.unicode.org/versions/Unicode12.1.0/\">Unicode Standard</a>,</p>\n<blockquote>\n<p>Plain text is a pure sequence of character codes; plain Unicode-encoded text is therefore a sequence of Unicode character codes.</p><p>\nPlain text has two main properties in regard to rich text:</p><p>\nplain text is the underlying content stream to which formatting can be applied. Plain text is public, standardized, and universally readable.</p><p>\nPlain text shows its cards\u2014if it's marked up, the markup will be human readable. Plain text can be moved between programs more fluidly and can respond to programmatic manipulations. Because it is not tied to a particular font or color or placement, plain text can be styled externally.</p><p>\nA counterpoint to plain text is rich text (sometimes denoted by the Microsoft rich text format .rtf file extension) or \"enriched text\" (sometimes seen as an option in email programs). In rich text files, plain text is elaborated with formatting specific to the program in which they are made.</p>\n</blockquote>\n<h2>Choosing a text editor</h2>\n<p>An important tool for programming and working in the command line is a text editor. A text editor is a program that allows you to edit plain text files, such as .txt, .csv, or .md. Text editors are not used to edit rich text documents, such as .docx or .rtf, and rich text editors should not be used to edit plain text files. This is because rich text editors will add many invisible special characters that will prevent programs from running and configuration files from being read correctly.</p><p>\nWhile it doesn't really matter which text editor you choose, you should try to become comfortable with at least one text editor.</p><p>\nChoosing a text editor has as much to do with personality as it does with functionality. Graphical user interfaces (GUIs), user options, and \"hackability\" vary from program to program.</p>\n<h2>Default recommendation</h2>\n<p>For our workshops, we will be using <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>. Not only is Visual Studio Code free and open source, but it is also consistent across OSX, Windows, and Linux systems.</p><p>\nYou will have downloaded VS Code according to the <a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/vscode.md\">instructions</a> on the installations page. We won't be using the editor a lot in this tutorial, so don't worry about getting to know the editor now. In later workshops we will discuss syntax highlighting and version control, which Visual Studio Code supports. For now we will get back to working in the command line itself.</p>", "order": 2}}, {"model": "lesson.lesson", "pk": 471, "fields": {"title": "Why is the command line useful?", "created": "2020-07-15T22:01:30.186Z", "updated": "2020-07-15T22:01:30.186Z", "workshop": 54, "text": "<p>Initially, for some of us, the command line can feel a bit unfamiliar. Why step away from a point-and-click workflow? By using the command line, we move into an environment where we have more minute control over each task we'd like the computer to perform. Instead of ordering your food in a restaurant, you're stepping into the kitchen. It's more work, but there are also more possibilities.</p><p>\nThe command line allows you to...</p><p>\n- Easily automate tasks such as creating, copying, and converting files.</p><p>\n- Set up your programming environment.</p><p>\n- Run programs you create.</p><p>\n- Access the (many) programs and utilities that do not have graphical equivalents.</p><p>\n- Control other computers remotely.</p><p>\nIn addition to being a useful tool in itself, the command line gives you access to a second set of programs and utilities and is a complement to learning programming.</p><p>\nWhat if all these cool possibilities seem a bit abstract to you right now? That's alright! On a very basic level, most uses of the command line are about <strong>showing information</strong> that the computer has, or <strong>modifying or making</strong> things (files, programs, etc.) on the computer.</p><p>\nIn the next section, we'll make this a little more clear by getting started with the command line.</p>", "order": 3}}, {"model": "lesson.lesson", "pk": 472, "fields": {"title": "Getting to the command line", "created": "2020-07-15T22:01:30.189Z", "updated": "2020-07-15T22:01:30.189Z", "workshop": 54, "text": "<h2>macOS</h2>\n<p>If you're using macOS:</p><p>\n1. Click the Spotlight Search button (the magnifying glass) in the top right of your desktop.</p><p>\n2. Type \"terminal\" into the bar that appears.</p><p>\n3. Select the first item that appears in the list.</p><p>\n4. When the Terminal pops up, you will likely see either a window with black text over white background or colored text over a black background.</p><p>\n<img alt=\"Terminal in Mac OS\" src=\"/static/images/lessons/command-line/osx_term.png\"/></p><p>\nWhen you see the <code>$</code>, you're in the right place. We call the <code>$</code> the command prompt; the <code>$</code> lets us know the computer is ready to receive a command.</p><p>\n<em>You can change the color of your Terminal or BashShell background and text by selecting <code>Shell</code> from the top menu bar, then selecting a theme from the menu under <code>New Window</code>.</em></p><p>\nBonus points: if you really want to get the groove of just typing instead of pointing and clicking, you can press \"Command (\u2318)\" and the space bar at the same time to pull up Spotlight search, start typing \"Terminal,\" and then hit \"Enter\" to open a terminal window. This will pull up a terminal window without touching your mousepad. For super bonus points, try to navigate like this for the next fifteen minutes, or even the rest of this session\u2014it is tricky and sometimes a bit tiring when you start, but you can really pick up speed when you practice!</p>\n<h2>Windows</h2>\n<p>We won't be using Windows's own non-UNIX version of the command line. We installed Git Bash, following <a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/git.md\">these instructions</a>, so that we can work in the cross-platform Unix command line for this session.</p><p>\n1. Look for Git Bash in your programs menu and open.</p><p>\n2. If you can't find the git folder, just type \"git bash\" in the search box and select \"git bash\" when it appears.</p><p>\n3. Open the program.</p><p>\n4. When the terminal pops up, you will likely see either a window with black text over white background or colored text over a black background.You know you're in the right place when you see the <code>$</code>.</p>\n<h2>Command prompt <code>$</code></h2>\n<p><code>$</code>, which we will refer to as the \"command prompt,\" is the place you type commands you wish the computer to execute. We will now learn some of the most common commands.</p><p>\nIn the next section, we'll learn how to navigate the filesystem in the command line.</p>", "order": 4}}, {"model": "lesson.lesson", "pk": 473, "fields": {"title": "Navigation", "created": "2020-07-15T22:01:30.192Z", "updated": "2020-07-15T22:01:30.192Z", "workshop": 54, "text": "<h2>Prefatory pro tips</h2>\n<p>Go slow at first and check your spelling!</p><p>\nOne of the biggest things you can do to make sure your code runs correctly and you can use the command line successfully is to make sure you check your spelling! Keep this in mind today, this week, and your whole life. If at first something doesn't work, check your spelling! Unlike in human reading, where letters operate simultaneously as atomistic symbols and as complex contingencies (check <a href=\"https://genius.com/Johanna-drucker-from-a-to-screen-annotated\">Johanna Drucker</a> on the alphabet), in coding, each character has a discrete function including (especially!) spaces.</p><p>\nKeep in mind that the command line and file systems on macOS and Unix are usually pre-configured as cAsE-pReSeRvInG\u2014so capitalizations also matter when typing commands and file and folder names.</p><p>\nAlso, while copying and pasting from this handy tutorial may be tempting to avoid spelling errors and other things, we encourage you not to! Typing out each command will help you remember them and how they work.</p>\n<h3>Getting started: know thyself</h3>\n<p>You may also see your username to the left of the command prompt <code>$</code>. Let's try our first command. Type the following and press the <code>enter</code> key:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> whoami\n</code></pre></div>\n<p>The <code>whoami</code> command should print out your username. Congrats, you've executed your first command! This is a basic pattern of use in the command line: type a command, press <code>enter</code> on your keyboard, and receive output.</p>\n<h2>Orienting yourself in the command line: folders</h2>\n<p>OK, we're going to try another command. But first, let's make sure we understand some things about how your computer's filesystem works.</p><p>\nYour computer's files are organized in what's known as a hierarchical filesystem. That means there's a top level or \"root\" folder on your system. That folder has other folders in it, and those folders have folders in them, and so on. You can draw these relationships in a tree:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Users</span>\n<span class=\"o\">|</span>\n <span class=\"err\">\u2014\u2014</span> <span class=\"n\">your</span><span class=\"o\">-</span><span class=\"n\">username</span>\n   <span class=\"o\">|</span>\n    <span class=\"err\">\u2014\u2014</span> <span class=\"n\">Applications</span>\n    <span class=\"err\">\u2014\u2014</span> <span class=\"n\">Desktop</span>\n    <span class=\"err\">\u2014\u2014</span> <span class=\"n\">Documents</span>\n</code></pre></div>\n<p>The root or highest-level folder on macOS is just called <code>/</code>. We won't need to go in there, though, since that's mostly just files for the operating system. On Windows, the root directory is usually called <code>C:</code> (<a href=\"http://www.todayifoundout.com/index.php/2015/04/c-drive-default-windows-based-computers-2/\">More on why C is default on Windows</a>).</p><p>\nNote that we are using the word \"directory\" interchangeably with \"folder\"\u2014they both refer to the same thing.</p><p>\nOK, let's try a command that tells us where we are in the filesystem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n</code></pre></div>\n<p>You should get output like <code>/Users/your-username</code>. That means you're in the <code>your-username</code> directory in the <code>Users</code> folder inside the <code>/</code> or root directory. On Windows, your output would instead be <code>C:/Users/your-username</code>. The folder you're in is called the working directory, and <code>pwd</code> stands for \"print working directory.\"</p><p>\nThe command <code>pwd</code> won't actually print anything except on your screen. This command is easier to grasp when we interpret \"print\" as \"display.\"</p><p>\nOK, we know where we are. But what if we want to know what files and folders are in the <code>your-username</code> directory, a.k.a. the working directory?</p><p>\nTry entering:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> ls\n</code></pre></div>\n<p>You should see a number of folders, probably including <code>Documents</code>, <code>Desktop</code>, and so on. You may also see some files. These are the contents of the current working directory. <code>ls</code> will \"list\" the contents of the directory you are in.</p><p>\nWonder what's in the Desktop folder? Let's try navigating to it with the following command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">cd</span> Desktop\n</code></pre></div>\n<p>The <code>cd</code> command lets us \"change directory.\" (Make sure the \"D\" in \"Desktop\" is capitalized.) If the command was successful, you won't see any output. This is normal\u2014often, the command line will succeed silently.</p><p>\nSo how do we know it worked? That's right, let's use our <code>pwd</code> command again. We should get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/Desktop</span>\n</code></pre></div>\n<p>Now try <code>ls</code> again to see what's on your desktop. These three commands\u2014<code>pwd</code>, <code>ls</code>, and <code>cd</code>\u2014are the most commonly used in the terminal. Between them, you can orient yourself and move around.</p><p>\nBefore we move on, let's take a minute to navigate through our computer's file system using the command line.</p>\n<h3>Compare with the GUI</h3>\n<p>It's important to note that this is the same old information you can get by pointing and clicking displayed to you in a different way.</p><p>\nGo ahead and use pointing and clicking to navigate to your working directory\u2014you can get there a few ways, but try starting from \"My Computer\" and clicking down from there. You'll notice that the folder names should match the ones that the command line spits out for you, since it's the same information! We're just using a different mode of navigation around your computer to see it.</p>\n<hr/>", "order": 5}}, {"model": "lesson.lesson", "pk": 474, "fields": {"title": "Creating files and folders", "created": "2020-07-15T22:01:30.197Z", "updated": "2020-07-15T22:01:30.197Z", "workshop": 54, "text": "<h2>Creating a file</h2>\n<p>So far, we've only performed commands that give us information. Let's use a command that creates something on the computer.</p><p>\nFirst, make sure you're in the home directory:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username</span>\n</code></pre></div>\n<p>Let's move to the Desktop folder, or \"change directory\" with <code>cd</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cd Desktop</span>\n</code></pre></div>\n<p>Once you've made sure you're in the Desktop folder with <code>pwd</code>, let's try a new command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">touch foo.txt</span>\n</code></pre></div>\n<p>If the command succeeds, you won't see any output. Now move the terminal window and look at your \"real\" desktop, the graphical one. See any differences? If the command was successful and you were in the right place, you should see an empty text file called \"foo.txt\" on the desktop. Pretty cool, right?</p>\n<h2>Handy tip: up arrow</h2>\n<p>Let's say you liked that \"foo.txt\" file so much you'd like another! In the terminal window, press the \"up arrow\" on your keyboard. You'll notice this populates the line with the command that you just wrote. You can hit \"Enter\" to create another \"foo.txt,\" (note - <a href=\"https://en.wikipedia.org/wiki/Touch_(Unix)\"><code>touch</code></a> command will not overwrite your document nor will it add another document to the same directory, but it will update info about that file.) or you could use your left/right arrows to change the file name to \"foot.txt\" to create something different.</p><p>\nAs we start to write more complicated and longer commands in our terminal, the \"up arrow\" is a great shortcut so you don't have to spend lots of time typing.</p>\n<h2>Creating folders</h2>\n<p>OK, so we're going to be doing a lot of work during the Digital Research Institute. Let's create a project folder in our Desktop so that we can keep all our work in one place.</p><p>\nFirst, let's check to make sure we're still in the Desktop folder with <code>pwd</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/Desktop</span>\n</code></pre></div>\n<p>Once you've double-checked you're in Desktop, we'll use the <code>mkdir</code> or \"make directory\" command to make a folder called \"projects\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">mkdir projects</span>\n</code></pre></div>\n<p>Now run <code>ls</code> to see if a projects folder has appeared. Once you confirm that the projects folder was created successfully, <code>cd</code> into it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">cd</span> projects\n<span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/Desktop/projects</span>\n</code></pre></div>\n<h2>OK, now you've got a projects folder that you can use throughout the Institute. It should be visible on your graphical desktop, just like the <code>foo.txt</code> file we created earlier.</h2>", "order": 6}}, {"model": "lesson.lesson", "pk": 475, "fields": {"title": "Creating a cheat sheet", "created": "2020-07-15T22:01:30.201Z", "updated": "2020-07-15T22:01:30.201Z", "workshop": 54, "text": "<p>In this section, we'll create a text file that we can use as a cheat sheet. You can use it to keep track of all the awesome commands you're learning.</p>\n<h2><code>Echo</code></h2>\n<p>Instead of creating an empty file like we did with <code>touch</code>, let's try creating a file with some text in it. But first, let's learn a new command: <code>echo</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"Hello from the command line\"</span>\n<span class=\"go\">Hello from the command line</span>\n</code></pre></div>\n<h2>Redirect (<code>&gt;</code>)</h2>\n<p>By default, the echo command just prints out the text we give it. Let's use it to create a file with some text in it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">echo \"This is my cheat sheet\" &gt; cheat-sheet.txt</span>\n</code></pre></div>\n<p>Now let's check the contents of the directory:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">pwd</span>\n<span class=\"go\">/Users/your-username/projects</span>\n<span class=\"gp\">$</span> ls\n<span class=\"go\">cheat-sheet.txt</span>\n</code></pre></div>\n<p>OK, so the file has been created. But what was the <code>&gt;</code> in the command we used? On the command line, a <code>&gt;</code> is known as a \"redirect.\" It takes the output of a command and puts it in a file. Be careful, since it's possible to overwrite files with the <code>&gt;</code> command.</p><p>\nIf you want to add text to a file but <em>not</em> overwrite it, you can use the <code>&gt;&gt;</code> command, known as the redirect and append command, instead. If there's already a file with text in it, this command can add text to the file <em>without</em> destroying and recreating it.</p>\n<h2><code>Cat</code></h2>\n<p>Let's check if there's any text in cheat-sheet.txt.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cat cheat-sheet.txt</span>\n<span class=\"go\">This is my cheat sheet</span>\n</code></pre></div>\n<p>As you can see, the <code>cat</code> command prints the contents of a file to the screen. <code>cat</code> stands for \"concatenate,\" because it can link strings of characters or files together from end to end.</p>\n<h2>A note on file naming</h2>\n<p>Your cheat sheet is titled <code>cheat-sheet.txt</code> instead of <code>cheat sheet.txt</code> for a reason. Can you guess why?</p><p>\nTry to make a file titled <code>cheat sheet.txt</code> and report to the class what happens.</p><p>\nNow imagine you're attempting to open a very important data file using the command line that is titled <code>cheat sheet.txt</code></p><p>\nFor your digital best practices, we recommend making sure that file names contain no spaces\u2014you can use creative capitalization, dashes, or underscores instead. Just keep in mind that the macOS and Unix file systems are usually pre-configured as cAsE-pReSeRvInG, which means that capitalization matters when you type commands to navigate between or do things to directories and files.</p>\n<h2>Using a text editor</h2>\n<p>The challenge for this section will be using a text editor, specifically Visual Studio Code (<a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/vscode.md\">install guide here</a>), to add some of the commands that we've learned to the newly created cheat sheet. Text editors are programs that allow you to edit plain text files, such as .txt, .py (Python scripts), and .csv (comma-separated values, also known as spreadsheet files). Remember not to use programs such as Microsoft Word to edit text files, since they add invisible characters that can cause problems.</p>\n<h1>Pipes</h1>\n<p>So far, you've learned a number of commands and one special symbol, the <code>&gt;</code> or redirect. Now we're going to learn another, the <code>|</code> or \"pipe.\"</p><p>\nPipes let you take the output of one command and use it as the input for another.</p><p>\nLet's start with a simple example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"Hello from the command line\"</span> <span class=\"p\">|</span> wc -w\n<span class=\"go\">5</span>\n</code></pre></div>\n<p>In this example, we take the output of the <code>echo</code> command (\"Hello from the command line\") and pipe it to the <code>wc</code> or word count command, adding a flag <code>-w</code> for number of words. The result is the number of words in the text that we entered.</p><p>\nLet's try another. What if we wanted to put the commands in our cheat sheet in alphabetical order?</p><p>\nUse <code>pwd</code> and <code>cd</code> to make sure you're in the folder with your cheat sheet. Then try:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cat cheat-sheet.txt | sort</span>\n</code></pre></div>\n<p>You should see the contents of the cheat sheet file with each line rearranged in alphabetical order. If you wanted to save this output, you could use a <code>&gt;</code> to print the output to a file, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cat cheat-sheet.txt | sort &gt; new-cheat-sheet.txt</span>\n</code></pre></div>\n<hr/>\n<h2>Example</h2>\n<h2><img alt=\"Pipes example\" src=\"/static/images/lessons/command-line/pipes.gif\"/></h2>\n<h1>Exploring text data</h1>\n<p>So far the only text file we've been working with is our cheat sheet. Now, this is where the command line can be a very powerful tool: let's try working with a large text file, one that would be too large to work with by hand.</p><p>\nLet's download the data we're going to work with:</p><p>\n<a href=\"https://github.com/DHRI-Curriculum/command-line/blob/v2.0-smorello-edits/nypl_items.csv?raw=true\">Download nypl_items.csv</a></p><p>\nOur data set is a list of public domain items from the New York Public Library. It's in .csv format, which is a plain text spreadsheet format. CSV stands for \"comma separated values,\" and each field in the spreadsheet is separated with a comma. It's all still plain text, though, so we can manipulate the data using the command line.</p>\n<h2>Move command</h2>\n<p>Once the file is downloaded, move it from your <code>Downloads</code> folder to the <code>projects</code> folder on your desktop\u2014either through the command line, or drag and drop in the GUI. Since this is indeed a command line workshop, you should try the former!</p><p>\nTo move this file using the command line, you first need to navigate to your <code>Downloads</code> folder where that file is saved. Then type the <code>mv</code> command followed by the name of the file you want to move and then the file path to your <code>projects</code> folder on your desktop, which is where you want to move that file to (note that <code>~</code> refers to your home folder):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">mv nypl_items.csv ~/Desktop/projects/</span>\n</code></pre></div>\n<p>You can then navigate to that <code>projects</code> folder and use the <code>ls</code> command to check that the file is now there.</p>\n<h2>Viewing data in the command line</h2>\n<p>Try using <code>cat</code> to look at the data. You'll find it all goes by too fast to get any sense of it. (You can click <code>Control</code> and <code>C</code> on your keyboard to cancel the output if it's taking too long.)</p><p>\nInstead, let's use another tool, the <code>less</code> command, to get the data one page at a time:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> less nypl_items.csv\n<span class=\"go\">...</span>\n</code></pre></div>\n<p><code>less</code> gives you a paginated view of the data; it will show you contents of a file or the output from a command or string of commands, page by page.</p><p>\nTo view the file contents page by page, you may use the following keyboard shortcuts (that should work on Windows using Git Bash or on macOS terminal):</p><p>\nClick the <code>f</code> key to view forward one page, or the <code>b</code> key to view back one page.</p><p>\nOnce you're done, click the <code>q</code> key to return to the command line.</p><p>\nLet's try two more commands for viewing the contents of a file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> head nypl_items.csv\n<span class=\"go\">...</span>\n<span class=\"gp\">$</span> tail nypl_items.csv\n<span class=\"go\">...</span>\n</code></pre></div>\n<p>These commands print out the very first (the \"head\") and very last (the \"tail\") sections of the file, respectively.</p>\n<h2>Interlude for a favorite command line feature: tab completion</h2>\n<p>When you are navigating in the command line, typing folder and file names can seem to go against the promise of easier communication with your computer. Here comes <code>tab</code> completion, stage right!</p><p>\nWhen you need to type out a file or folder name\u2014for example, the name of that csv file we've been working with: nypl_items.csv\u2014in the command line and want to move more quickly, you can just type out the beginning characters of that file name up until it's distinct in that folder and then click the <code>tab</code> key. And voil\u00e0! Clicking that <code>tab</code> key will complete the rest of that name for you, and it only works if that file or folder already exists within your working directory.</p><p>\nIn other words, anytime in the command line you can type as much of the file or folder name that is unique within that directory, and <code>tab</code> complete the rest!</p>\n<h2>Note: Clearing Text</h2>\n<p>If all the text remaining in your terminal window is starting to overwhelm you, you have some options. You may type the <code>clear</code> command into the command line, or click the <code>command</code> and <code>k</code> keys to clear the scrollback. In macOS terminal, clicking the <code>command</code> and <code>l</code> keys will clear the output from your most recent command.</p>\n<h2>Cleaning the data</h2>\n<p>We didn't tell you this before, but there are duplicate lines in our data! Two, to be exact. Before we try removing them, let's see how many entries are in our .csv file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> wc -l\n<span class=\"go\">100001</span>\n</code></pre></div>\n<p>This tells us there are 100,001 lines in our file. The <code>wc</code> tool stands for \"word count,\" but it can also count characters and lines in a file. We tell <code>wc</code> to count lines by using the <code>-l</code> flag. If we wanted to count characters, we could use <code>wc -m</code>. Flags marked with hyphens, such as <code>-l</code> or <code>-m</code>, indicate options which belong to specific commands. See the <a href=\"https://github.com/DHRI-Curriculum/glossary/blob/master/sections/command-line.md\">glossary</a> for more information about flags and options.</p><p>\nTo find and remove duplicate lines, we can use the <code>uniq</code> command. Let's try it out:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> uniq <span class=\"p\">|</span> wc -l\n<span class=\"go\">99999</span>\n</code></pre></div>\n<p>OK, the count went down by two because the <code>uniq</code> command removed the duplicate lines. But which lines were duplicated?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> uniq -d\n<span class=\"go\">...</span>\n</code></pre></div>\n<p>The <code>uniq</code> command with the <code>-d</code> flag prints out the lines that have duplicates.</p><p>\n<img alt=\"exploring data\" src=\"/static/images/lessons/command-line/data.gif\"/></p>\n<h1>Searching text data</h1>\n<p>So we've cleaned our data set, but how do we find entries that use a particular term?</p><p>\nLet's say I want to find all the entries in our data set that use the term \"Paris.\"</p><p>\nHere we can use the <code>grep</code> command. <code>grep</code> stands for \"global regular expression print.\" The <code>grep</code> command processes text line by line and prints any lines which match a specified pattern. Regular expressions are infamously human-illegible commands that use character by character matching to return a pattern. <code>grep</code> gives us access to the power of regular expressions as we search for text.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> grep -i <span class=\"s2\">\"paris\"</span>\n<span class=\"go\">...</span>\n</code></pre></div>\n<p>This will print out all the lines that contain the word \"Paris.\" (The <code>-i</code> flag makes the command ignore capitalization.) Let's use our <code>wc -l</code> command to see how many lines that is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> cat nypl_items.csv <span class=\"p\">|</span> grep -i <span class=\"s2\">\"paris\"</span> <span class=\"p\">|</span> wc -l\n<span class=\"go\">191</span>\n</code></pre></div>\n<p>Here we have asked <code>cat</code> to read nypl_items.csv, take the output and pipe it into the <code>grep -i</code> command, which will ignore capitalization and find all instances of the word \"paris.\" We then take the output of that <code>grep</code> command and pipe it into the word count <code>wc</code> command with the <code>-l</code> lines option. The pipeline returns <code>191</code> letting us know that Paris (or paris) occurs on 191 lines of our data set.</p>\n<h2>Example</h2>\n<p><img alt=\"Searching a text file with grep\" src=\"/static/images/lessons/command-line/grep.gif\"/></p>\n<h1>What we've learned</h1>\n<p>You've made it through your introduction to the command line! By now, you have experienced some of the power of communicating with your computer using text commands. The basic steps you learned today will help as you move forward through the week\u2014you'll work with the command line interface to set up your <a href=\"https://github.com/DHRI-Curriculum/git\">version control with git</a> and you'll have your text editor open while <a href=\"https://github.com/DHRI-Curriculum/python\">writing python scripts</a> and building basic websites with <a href=\"https://github.com/DHRI-Curriculum/html-css\">HTML and CSS</a>.</p><p>\nNow is a good time to do a quick review!</p><p>\nIn this session, we learned:</p><p>\n- how to use <code>touch</code> and <code>echo</code> to create files </p><p>\n- how to use <code>mkdir</code> to create folders</p><p>\n- how to navigate our file structure by <code>cd</code>(change directory), <code>pwd</code> (print working directory), and <code>ls</code> (list)</p><p>\n- how to use redirects (<code>&gt;</code>) and pipes (<code>|</code>) to create a pipeline</p><p>\n- how to explore a comma separated values (.csv) dataset using word and line counts, <code>head</code> and <code>tail</code>, and the concatenate command <code>cat</code></p><p>\n- how to search text files using the <code>grep</code> command</p><p>\nAnd we made a <a href=\"?page=12\">cheat sheet</a> for reference!</p><p>\nWhen we started, we reviewed what text is\u2014whether plain or enriched. We learned that text editors that don't fix formatting of font, color, and size, do allow for more flexible manipulation and multi-program use. If text is allowed to be a string of characters (and not specific characters chosen for their compliance with a designer's intention), that text can be fed through programs and altered with automated regularity. Text editors are different software than Bash (or Terminal), which is a text-based shell that allows you to interact directly with your operating system giving direct input and receiving output.</p><p>\nHaving a grasp of command line basics will not only make you more familiar with how your computer and basic programming work, but it will also give you access to tools and communities that will expand your research.</p>", "order": 7}}, {"model": "lesson.challenge", "pk": 73, "fields": {"lesson": 473, "title": "", "text": "<p>Use the three commands you've just learned\u2014<code>pwd</code>, <code>ls</code> and <code>cd</code>\u2014eight (8) times each. Go poking around your Photos folder, or see what's so special about that root <code>/</code> directory. When you're done, come back to the home folder with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cd ~</span>\n</code></pre></div>\n\n\n<p>(That's a tilde, on the top left of your keyboard.) One more command you might find useful is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">cd ..</span>\n</code></pre></div>\n\n\n<p>which will move you one directory up in the filesystem. That's a <code>cd</code> with two periods after it.</p>"}}, {"model": "lesson.challenge", "pk": 74, "fields": {"lesson": 474, "title": "", "text": "<p>Try and create a sub-folder and file on your own!</p>"}}, {"model": "lesson.challenge", "pk": 75, "fields": {"lesson": 475, "title": "", "text": "<p>You <em>could</em> use the GUI to open your Visual Studio Code text editor\u2014from your programs menu, via Finder or Applications or Launchpad in Mac OSX, or via the Windows button in Windows\u2014and then click \"File\" and then \"Open\" from the drop-down menu and navigate to your Desktop folder and click to open the cheat-sheet.txt file.</p>\n<p><em>Or</em>, you can open that specific cheat-sheet.txt file in the Visual Studio Code text editor directly from the command line! Let's try that by using the <code>code</code> command followed by the name of your file in the command line.</p>\n<p>Once you've got your cheat sheet open in the Visual Studio Code text editor, type to add the commands we've learned so far to the file. Include descriptions about what each command does. Remember, this cheat sheet is for you. Write descriptions that make sense to you or take notes about questions.</p>\n<p>Save the file.</p>\n<p>Once you're done, check the contents of the file on the command line with the <code>cat</code> command followed by the name of your file. </p>\n<p>Use the commands you've learned so far to create a new version of the <code>nypl_items.csv</code> file with the duplicated lines removed. (Hint: <a href=\"07-creating_a_cheat_sheet.md#redirect-\">redirects</a> are your friend.)</p>\n<p>Use the <code>grep</code> command to explore our .csv file a bit. What areas are best covered by the data set?</p>"}}, {"model": "lesson.solution", "pk": 49, "fields": {"challenge": 73, "title": "", "text": "<p>Type <code>pwd</code> to see where on your computer you are located </p><p></p><p>\nType <code>cd name-of-your-folder</code> to enter a subfolder </p><p></p><p>\nType <code>ls</code> to see the content of that folder </p><p></p><p>\nType <code>cd ..</code> to leave that folder </p><p></p><p>\nType <code>pwd</code> to make sure you are back to the folder where you wish to be </p><p></p><p>\nType <code>cd ~</code> to go back to your home folder </p><p></p><p>\nType <code>pwd</code> to make sure you are in the folder where you wish to be </p><p></p><p>\nType <code>cd /</code> to go back to your root folder </p><p></p><p>\nType <code>ls</code> to see the content of folder you are currently in </p><p></p><p>\nType <code>pwd</code> to make sure you are in the folder where you wish to be </p><p></p><p>\nType <code>cd name-of-your-folder</code> to enter a subfolder </p><p></p>\n<p><img alt=\"Navigating the command line\" src=\"sections/images/nav.gif\" /></p>\n<hr />"}}, {"model": "lesson.solution", "pk": 50, "fields": {"challenge": 74, "title": "", "text": "<p>Type <code>pwd</code> to see where on your computer you are located. If you are not in the \"projects\" folder we just created, navigate to that folder using the commands you learned in the previous <a href=\"https://github.com/DHRI-Curriculum/command-line/blob/v2.0-smorello-edits/lessons.md#navigation\">lesson</a> </p><p></p><p>\nType <code>mkdir name-of-your-subfolder</code> to create a subfolder </p><p></p><p>\nType <code>cd name-of-your-folder</code> to navigate to that folder </p><p></p><p>\nType <code>challenge.txt</code> to create a new text file </p><p></p><p>\nType <code>ls</code> to check whether you created the file correctly</p><p></p>\n<p><img alt=\"Creating files and folders\" src=\"sections/images/make-file-folder.gif\" /></p>\n<hr />"}}, {"model": "lesson.solution", "pk": 51, "fields": {"challenge": 75, "title": "", "text": "<ul>\n<li>Step 1 </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> code cheat-sheet.txt\n</code></pre></div>\n\n\n<ul>\n<li>Step 2 </p><p>\n ```console</p><p>\n$ cat cheat-sheet.txt</p><p>\nMy Institute Cheat Sheet</li>\n</ul>\n<p>ls</p><p>\nlists files and folders in a directory</p>\n<p>cd ~</p><p>\nchange directory to home folder</p>\n<p>...</p><p>\n```</p>\n<hr />\n<p>Type <code>pwd</code> to see where on your computer you are located. If you are not in the \"projects\" folder we just created, navigate to that folder using the commands you learned in the previous <a href=\"https://github.com/DHRI-Curriculum/command-line/blob/v2.0-smorello-edits/lessons.md#navigation\">lesson</a> </p><p></p><p>\nType <code>ls</code> to check whether the file <code>nypl_items.csv</code> is in your projects folder </p><p></p><p>\nType <code>cat nypl_items.csv | uniq -d &gt; new_nypl_items.csv</code> </p><p> to create a new version of the <code>nypl_items.csv</code> file with the duplicated lines removed.</p>\n<p>If you want to get a little more milage out of the grep command, refer to <a href=\"https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux\">this tutorial on grep and regular expressions</a>. Regular expressions (or regex) provide methods to search for text in more advanced ways, including specific wildcards, matching ranges of characters such as letters and numbers, and detecting features such as the beginning and end of lines. If you want to experiment with regular expressions in an easy-to-use environment, numerous regex test interfaces are available from <a href=\"https://www.google.com/search?w&amp;q=regex+tester\">a simple google search</a>, such as <a href=\"https://regexr.com/\">RegExr</a>, which includes a handy cheat sheet.</p>\n<hr />"}}, {"model": "frontmatter.learningobjective", "pk": 376, "fields": {"frontmatter": 54, "label": "Learn common commands to create files (`touch` and `echo`)"}}, {"model": "frontmatter.learningobjective", "pk": 377, "fields": {"frontmatter": 54, "label": "Learn commands to create directories (`mkdir`)"}}, {"model": "frontmatter.learningobjective", "pk": 378, "fields": {"frontmatter": 54, "label": "Navigate our file structure using change directory (`cd`), print working directory (`pwd`), and list (`ls`)"}}, {"model": "frontmatter.learningobjective", "pk": 379, "fields": {"frontmatter": 54, "label": "Move content from one place to another using redirects (`>`) and pipes (`|`)"}}, {"model": "frontmatter.learningobjective", "pk": 380, "fields": {"frontmatter": 54, "label": "Explore a comma separated values (.csv) dataset using word and line counts, `head` and `tail`, and the concatenate command `cat`"}}, {"model": "frontmatter.learningobjective", "pk": 381, "fields": {"frontmatter": 54, "label": "Search text files using the `grep` command"}}, {"model": "frontmatter.learningobjective", "pk": 382, "fields": {"frontmatter": 54, "label": "Create and sort cheat sheets for the commands we learn"}}, {"model": "frontmatter.contributor", "pk": 198, "fields": {"first_name": "Stefano", "last_name": "Morello", "role": "Current Author", "url": null}}, {"model": "frontmatter.contributor", "pk": 199, "fields": {"first_name": "Kelsey", "last_name": "Chatlosh", "role": "Contributing Author", "url": null}}, {"model": "frontmatter.contributor", "pk": 200, "fields": {"first_name": "Patrick", "last_name": "Smyth", "role": "Contributing Author", "url": null}}, {"model": "frontmatter.contributor", "pk": 201, "fields": {"first_name": "Mary Catherine", "last_name": "McKinniburgh", "role": "Contributing Author", "url": null}}, {"model": "frontmatter.contributor", "pk": 202, "fields": {"first_name": "Jojo", "last_name": "Karlin", "role": "Contributing Author", "url": null}}, {"model": "library.reading", "pk": 294, "fields": {"title": "Neal Stephenson, \"In the Beginning Was the Command Line\"", "url": "http://cristal.inria.fr/~weis/info/commandline.html", "annotation": "[Neal Stephenson, \"In the Beginning Was the Command Line\"](http://cristal.inria.fr/~weis/info/commandline.html)", "zotero_item": null}}, {"model": "library.reading", "pk": 295, "fields": {"title": "Douglas Rushkoff, *Program or Be Programmed*", "url": "https://rushkoff.com/books/program-or-be-programmed", "annotation": "[Douglas Rushkoff, *Program or Be Programmed*](https://rushkoff.com/books/program-or-be-programmed/)", "zotero_item": null}}, {"model": "library.reading", "pk": 296, "fields": {"title": "Free Code Camp, A Brief History of the Command Line", "url": "https://www.freecodecamp.org/news/the-command-line-1fdbc692b3bf", "annotation": "[Free Code Camp, A Brief History of the Command Line](https://www.freecodecamp.org/news/the-command-line-1fdbc692b3bf/)", "zotero_item": null}}, {"model": "library.project", "pk": 137, "fields": {"title": "", "url": null, "annotation": "Most Python- and R-based projects will require you to have some knowledge of the command line. At a very basic level, you will be invoking a Python script and will be using values of command line arguments when creating and running your scripts.", "zotero_item": null}}, {"model": "library.project", "pk": 138, "fields": {"title": "Omeka", "url": "www.omeka.org", "annotation": "The command line is also useful for setting up installations of server side software like [Omeka](www.omeka.org). The command line will allow you to navigate the file structure of your server. Commands like ls, mkdir, rmdir, cd, etc. are really important. For example, grep could help you find a plugin directory that you might have accidentally placed in the wrong location.", "zotero_item": null}}, {"model": "library.project", "pk": 139, "fields": {"title": "command line", "url": "https://academicworks.cuny.edu/gc_etds/3786", "annotation": "A recent digital capstone project by Christofer Gass runs a Python script on the [command line](https://academicworks.cuny.edu/gc_etds/3786/)", "zotero_item": null}}, {"model": "library.project", "pk": 140, "fields": {"title": "Awesome Bash", "url": "https://github.com/awesome-lists/awesome-bash", "annotation": "[Awesome Bash](https://github.com/awesome-lists/awesome-bash), \"a curated list of delightful Bash scripts and resources.\"", "zotero_item": null}}, {"model": "library.tutorial", "pk": 148, "fields": {"label": "Ryans Tutorials, Linux Tutorial", "url": "https://ryanstutorials.net/linuxtutorial", "annotation": "[Ryans Tutorials, Linux Tutorial](https://ryanstutorials.net/linuxtutorial/)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 149, "fields": {"label": "The Linux command line for Beginners", "url": "https://ubuntu.com/tutorials/command-line-for-beginners#1-overview", "annotation": "[The Linux command line for Beginners](https://ubuntu.com/tutorials/command-line-for-beginners#1-overview)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 150, "fields": {"label": "Data Science at the Command Line", "url": "https://www.datascienceatthecommandline.com", "annotation": "[Data Science at the Command Line](https://www.datascienceatthecommandline.com/)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 151, "fields": {"label": "BashGuide", "url": "http://mywiki.wooledge.org/BashGuide", "annotation": "[BashGuide](http://mywiki.wooledge.org/BashGuide)", "zotero_item": null}}, {"model": "library.reading", "pk": 297, "fields": {"title": "Free Software Foundation, The Bash Manual", "url": "https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html", "annotation": "[Free Software Foundation, The Bash Manual](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html)", "zotero_item": null}}, {"model": "library.reading", "pk": 298, "fields": {"title": "Dennis Tenen and Grant Wythoff, Sustainable Authorship in Plain Text using Pandoc and Markdown", "url": "https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown", "annotation": "[Dennis Tenen and Grant Wythoff, Sustainable Authorship in Plain Text using Pandoc and Markdown](https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown)", "zotero_item": null}}, {"model": "library.reading", "pk": 299, "fields": {"title": "Stephen Ramsay, Life on the Command Line", "url": "https://files.zotero.net/eyJleHBpcmVzIjoxNTkyNjY1MDk3LCJoYXNoIjoiODFkNDJmZmU1ZjU3YzRmMDE2YTQ1ZmQwY2YzOTUwYmIiLCJjb250ZW50VHlwZSI6InRleHRcL2h0bWwiLCJjaGFyc2V0IjoidXRmLTgiLCJ6aXAiOjF9/07826342b83ea870f846cfa48f1b0eb8d3d51b78ceb1b05b1e014467d7241904/life-on-the-command-line.html", "annotation": "[Stephen Ramsay, Life on the Command Line](https://files.zotero.net/eyJleHBpcmVzIjoxNTkyNjY1MDk3LCJoYXNoIjoiODFkNDJmZmU1ZjU3YzRmMDE2YTQ1ZmQwY2YzOTUwYmIiLCJjb250ZW50VHlwZSI6InRleHRcL2h0bWwiLCJjaGFyc2V0IjoidXRmLTgiLCJ6aXAiOjF9/07826342b83ea870f846cfa48f1b0eb8d3d51b78ceb1b05b1e014467d7241904/life-on-the-command-line.html)", "zotero_item": null}}, {"model": "library.reading", "pk": 300, "fields": {"title": "Stephen Ramsay, Programming with Humanists: Reflections on Raising an Army of Hacker-Scholars in the Digital Humanities", "url": "https://www.openbookpublishers.com/htmlreader/DHP/chap09.html", "annotation": "[Stephen Ramsay, Programming with Humanists: Reflections on Raising an Army of Hacker-Scholars in the Digital Humanities](https://www.openbookpublishers.com/htmlreader/DHP/chap09.html)", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 55, "fields": {"name": "Python", "slug": "python", "created": "2020-07-15T22:01:35.684Z", "updated": "2020-07-15T22:01:35.684Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/python", "parent_branch": "v2.0-filipa-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 55, "fields": {"workshop": 55, "abstract": "Python is a general-purpose programming language that is suitable for a wide variety of core tasks in the digital humanities. Learning Python fundamentals is a gateway to analyzing data, creating visualizations, composing interactive websites, scraping the internet, and engaging in distant reading of texts.", "estimated_time": "10", "projects": [141, 142, 143], "resources": [], "readings": [301, 302], "contributors": [203, 204, 205], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 55, "fields": {"discussion_questions": "['What kind of data do you use in your research, and how do you acquire that data?', 'What questions do you have about your data? What kind of manipulations would you want to perform on that data?', 'What are the limitations of your data? Does your data suffice to show the full picture of your topic? What does it fail to capture?']", "next_steps": "[]", "workshop": 55, "further_readings": [303], "more_projects": [], "more_resources": [], "tutorials": [152, 153, 154, 155, 156]}}, {"model": "lesson.lesson", "pk": 476, "fields": {"title": "Interacting with Python", "created": "2020-07-15T22:01:35.688Z", "updated": "2020-07-15T22:01:35.688Z", "workshop": 55, "text": "<p>Let's begin by starting an \"interactive session\" session with Python. This means we will be using Python in the terminal, which is a special space that allows us to run little bits of Python, experimenting and exploring what it can do, without having to save it. Think of this interactive space as a playground. Later on, we will be working with Python in a more robust way, doing what we call saving and executing Python scripts.</p><p>\nFor now, though, let's start an interactive session with Python, which is accessed through the terminal. </p><p>\nOpen your terminal and type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> python\n</code></pre></div>\n<p>at the prompt. You should see something like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">Python 3.6.3 |Anaconda, Inc.| (default, Oct 13 2017, 12:02:49)</span>\n<span class=\"go\">[GCC 7.2.0] on Linux</span>\n<span class=\"go\">Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</code></pre></div>\n<p>Unlike the normal <code>$</code> terminal prompt, the Python prompt looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">&gt;&gt;&gt;</span>\n</code></pre></div>\n<p>These carrots are how you know that you have entered an interactive session with Python. Now you are interacting directly with Python, rather than in the regular terminal. Keep an eye on these carrots, as a common early source of confusion is entering terminal commands into the Python prompt or entering Python commands into the terminal.</p>\n<h2>A Little Math</h2>\n<p>Let's try a little math at the Python prompt. In the example below, type the text that appears after the Python prompt (the <code>&gt;&gt;&gt;</code>). The line below is the output that is returned. This will be a standard convention when giving examples using the Python prompt.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span>\n<span class=\"go\">5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">14</span> <span class=\"o\">-</span> <span class=\"mi\">10</span>\n<span class=\"go\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n<span class=\"go\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">6</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">21</span> <span class=\"o\">%</span> <span class=\"mi\">4</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n<p>The first four operations above are addition, subtraction, multiplication, and division, respectively. The last operation is modulo, or mod, which returns the remainder after division.</p><p>\nNote the way you interact with Python at the prompt. After entering an expression such as <code>2 + 3</code>, Python \"evaluates\" it to a simpler form, <code>5</code>, and then prints out the answer for you. <strong>This process is called the Read Eval Print Loop, or REPL</strong>. Reading takes commands from you, the input is evaluated or run, the result is printed out, and the prompt is shown again to wait for more input. The normal terminal (the one with the <code>$</code>) is another example of a REPL. </p><p>\nThe REPL is useful for quick tests and, later, can be used for exploring and debugging your programs interactively. You might consider it a kind of playground for testing and experimenting with python expressions. </p>", "order": 1}}, {"model": "lesson.lesson", "pk": 477, "fields": {"title": "Types", "created": "2020-07-15T22:01:35.699Z", "updated": "2020-07-15T22:01:35.699Z", "workshop": 55, "text": "<p>Types are classifications that let the computer know how a programmer intends to use a piece of data. You can just think of them as, well, types of data.</p><p>\nWe've already seen one type in the last section: the integer. In this section, we'll learn four more: the floating point number, the string, the boolean, and the list.</p><p>\nEnter these lines as you see them below:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class 'int'&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class 'float'&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s2\">\"Hello there!\"</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class 'str'&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class 'bool'&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;class 'list'&gt;</span>\n</code></pre></div>\n<p>Each of these represents a different type:</p><p>\n<strong>Integer</strong>: <code>1</code></p><p>\nIntegers are whole numbers.</p><p>\n<strong>Float</strong>: <code>1.0</code></p><p>\nFloats are numbers with decimals, and are treated a little differently than integers.</p><p>\n<strong>String</strong>: <code>\"Hello there!\"</code></p><p>\nStrings are arbitrary sets of characters, such as letters and numbers. You can think of them as a way to store text.</p><p>\n<strong>Boolean</strong>: <code>True</code> and <code>False</code></p><p>\nBoolean is a fancy term for values representing \"true\" and \"false,\" or \"truthiness\" and \"falsiness.\"</p><p>\n<strong>List</strong>: <code>[1, 2, 3]</code></p><p>\nA list is an ordered collection of values. You can put any type in a list: <code>[\"hello\", \"goodbye\", \"see ya later\"]</code> is also a valid list.</p><p>\nDon't worry about trying to actively remember these types. We'll be working with each in turn in the following sections.</p>\n<h2>What's the deal with type()?</h2>\n<p><code>type()</code> is a function. You can think of functions in Python in a few different ways:</p><p>\n1. A way of doing something in Python.</p><p>\n2. A way of saving some code for reuse.</p><p>\n3. A way of taking an input, transforming that input, and returning an output. The input goes in the parentheses <code>()</code>.</p><p>\nThese are all valid ways of thinking about functions. We'll be learning more about functions in later sections.</p>", "order": 2}}, {"model": "lesson.lesson", "pk": 478, "fields": {"title": "Variables", "created": "2020-07-15T22:01:35.701Z", "updated": "2020-07-15T22:01:35.701Z", "workshop": 55, "text": "<!-- changed the content of the list example to \"books\" ---><p>A variable is <strong>a symbol that refers to an object</strong>, such as a string, integer, or list. If you're not already at the Python prompt, open your terminal and type <code>python</code> at the <code>$</code>. You're in the right place when you see <code>&gt;&gt;&gt;</code>.</p><p>\nTry these commands in order:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span>\n<span class=\"go\">5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">10</span>\n<span class=\"go\">15</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span>\n<span class=\"go\">'hello'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"s2\">\" and goodbye\"</span>\n<span class=\"go\">'hello and goodbye'</span>\n</code></pre></div>\n<p>As you can see above, the <code>=</code> sign lets you assign symbols like <code>x</code> and <code>y</code> to data.</p><p>\nVariables can be longer words as well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span><span class=\"s1\">'Living a</span>\n<span class=\"go\">&gt;Feminist Life']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">books</span>\n<span class=\"go\">['Gender Trouble', 'Cruising Utopia', 'Living a Feminist</span>\n<span class=\"go\">&gt;Life']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class 'list'&gt;</span>\n</code></pre></div>\n<p>Variables can have letters, numbers, and underscores, <strong>but should start with a letter</strong>.</p><p>\nIf you are curious about learning more about naming conventions for variables, you can check out the PEP8 style guide's section on <a href=\"https://www.python.org/dev/peps/pep-0008/#naming-conventions\">Naming Conventions</a>. PEP8 is the widely accepted guide for Python programmers everywhere.</p>", "order": 3}}, {"model": "lesson.lesson", "pk": 479, "fields": {"title": "Running scripts", "created": "2020-07-15T22:01:35.704Z", "updated": "2020-07-15T22:01:35.704Z", "workshop": 55, "text": "<p>So far, you've interacted with Python one line at a time in the REPL. This is what we call the Interactive Mode, which is like a playground for experimenting and exploring different Python expressions,  like <code>2 + 2</code> or <code>type(\"some stuff\")</code>. The code that we write in the REPL is not saved after you exit, which means that this space is for running Python expressions and <em>not</em> for writing longer programs. </p><p>\nFor the rest of this session, we're going to expand beyond the REPL to write and execute longer programs. To do this, we will begin to work with text editor, where we write out longer Python scripts, and run those scripts from the terminal. </p><p>\nThis is a big move, so let's take it slow. The major change is that we will be working across two spaces, the terminal and the text editor, rather than just the terminal alone. We will be writing our scripts into the text editor, and using the terminal to run those scripts. </p>\n<h2>Your first script</h2>\n<p>First, let's begin with the text editor. Open your text editor of choice (such as VS Code) and create a new file with this line:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world!\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Save it with the name <code>hello.py</code> to a known location, such as your desktop. Open your terminal and move to the desktop directory:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> <span class=\"nb\">cd</span> Desktop\n</code></pre></div>\n<p>Once you're in the folder with your <code>hello.py</code> file, move to the terminal. Do <em>not</em> enter the Python Interactive Mode (the REPL), which is unecessary to run python scripts. Instead, lookout for the <code>$</code> symbol that lets you know you're in the terminal. If you find yourself in the Interactive mode (<code>&gt;&gt;&gt;</code>), then exit it with <code>control-D</code>. You should see the <code>$</code> symbol, letting you know you're back in the terminal.</p><p>\nNow that you're in the terminal, type the following, and press enter:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> python hello.py\n<span class=\"go\">Hello world!</span>\n</code></pre></div>\n<p>You should see the text <code>Hello world!</code> appear as output in the terminal window. </p><p>\nCongratulations! You've written your first script. That's kind of a big deal.</p><p>\nThere are a couple of important things to note here. First, it bears repeating that you are moving between two different spaces, the text editor and the terminal. You wrote your Python script in the text editor, and used the terminal to run the script. Second, within in the text editor, you included the <code>print()</code> function  because, unlike in the REPL, things aren't automatically printed out when writing scripts. When you're in the text editor, you always need to include the <code>print()</code> function so that your output will appear in the terminal. </p>\n<h2>A Note on Text</h2>\n<p>Fundamentally, Python programs are just text files. You can write them in any text editor, like VS Code or Notepad on Windows. When you pass the text file to Python, it runs the code in the file one line at a time. There's nothing special about <code>.py</code> files\u2014they're just regular text files. This makes them work well with command line tools like Git. The tools you've learned so far\u2014the command line, Git, markdown, grep\u2014are all designed to work well together, and the medium through which they all work is plain text.</p>", "order": 4}}, {"model": "lesson.lesson", "pk": 480, "fields": {"title": "Errors in Python", "created": "2020-07-15T22:01:35.708Z", "updated": "2020-07-15T22:01:35.708Z", "workshop": 55, "text": "<p>Our usual response when seeing an error on a computer screen is a stress response. Our heart rate elevates and, if we cannot do what we were asking the computer to do, our frustration mounts. This is because many errors when interacting with programs are not useful or informative, and because we often have no capability to fix the program in front of us.</p><p>\nIn Python, errors are our friends. This might be hard to accept initially, but the errors you see when running Python scripts generally do a good job of pointing you to what's going wrong in your program. When you see an error in Python, therefore, try not to fall into the stress response you may be used to when interacting with your computer normally.</p>\n<h2>Two kinds of errors</h2>\n<p>In Python, there are two kinds of errors you will encounter frequently. One appears before the program runs, and the other appears during the execution of a program.</p><p>\n<strong>syntax errors</strong> - When you ask Python to run a program or execute a line in the REPL, it will first check to see if the program is valid Python code\u2014that is, that it follows the grammatical or syntactical rules of Python. If it doesn't, before the program even runs, you'll see a syntax error printed out to the screen.</p><p>\nIn this below example, the syntax error is a common one\u2014mismatched single and double quotes, which is not allowed in Python. You can replicate the below error by opening the REPL (type <code>python</code> in the command line) and entering the line after the <code>&gt;&gt;&gt;</code> prompt.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">'This string has mismatched quotes. But Python will help us figure out this bug.\")</span>\n  File <span class=\"nb\">\"&lt;stdin&gt;\"</span>, line <span class=\"m\">1</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">'This string has mismatched quotes. But Python will help us figure out this bug.\")</span>\n                                                                                           <span class=\"o\">^</span>\n<span class=\"gr\">SyntaxError</span>: <span class=\"n\">EOL while scanning string literal</span>\n</code></pre></div>\n<p>Note the caret (<code>^</code>) underneath the mismatched quote, helpfully pointing out where the error lies. Similarly, if this error happened when running a script, Python would tell us the filename and the line number for the line on which the error occurs.</p><p>\n<strong>Traceback errors</strong> - These errors occur during the execution of a Python program when the program finds itself in an untenable state and must stop. Traceback errors are often logical inconsistencies in a program that is valid Python code. A common traceback error is referring to a variable that hasn't been defined, as below.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">not_a_variable</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">\"&lt;stdin&gt;\"</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"gr\">NameError</span>: <span class=\"n\">name 'not_a_variable' is not defined</span>\n</code></pre></div>\n<p>Traceback errors try to tell you a little about what happened in the program that caused the problem, including the category of error, such as <code>NameError</code> or <code>TypeError</code>.</p>\n<h2>Debugging</h2>\n<p>Debugging is a fancy word for fixing problems with a program. Here are some common strategies for debugging a program when first learning Python:</p><p>\n- If the error is a syntax error, look at where the caret is pointing.</p><p>\n- If the error is a syntax error, pay attention to grammatical features such as quotes, parentheses, and indentation.</p><p>\n- If the error is a syntax error, consider reading the program, or the offending line, backward. It's surprising, but this often helps to detect the issue.</p><p>\n- If the error is a traceback error, first look at the line where the error occured, then consider the general category of error. What could have gone wrong?</p><p>\n- If the error is a name error (NameError), check your spelling.</p><p>\n- If the error is a traceback error, try copying the last line of the error and pasting it into Google. You'll often find a quick solution this way.</p><p>\n- If you changed the program and expect a different output, but are getting old output, you may not have saved the file. Go back and make sure the file has been correctly saved.</p>", "order": 5}}, {"model": "lesson.lesson", "pk": 481, "fields": {"title": "Lists and Loops", "created": "2020-07-15T22:01:35.713Z", "updated": "2020-07-15T22:01:35.713Z", "workshop": 55, "text": "<h2>Lists</h2>\n<p><!--- changing variables and strings to be relevant to participant research ---></p><p>\nRemember lists? They look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span> <span class=\"s1\">'Living a Feminist Life'</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>For now, let's just create a list and print it out. In a text editor, our script will look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span> <span class=\"s1\">'Living a Feminist Life'</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Save this to a new file called <code>loop.py</code> and run it with <code>python loop.py</code>. You should see the list printed out in the terminal.</p><p>\nSo far, we've only learned one function: <code>type()</code>. Let's try out another:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span> <span class=\"s1\">'Living a Feminist Life'</span><span class=\"p\">]</span>\n<span class=\"c1\"># print(books)</span>\n<span class=\"n\">list_length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">list_length</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The <code>len()</code> function returns the number of items in a list or the number of characters in a string.</p><p>\nNotice that, if you run the code above, you won't see the <code>books</code> list printed out. That's because that line has become a comment. If you put a <code>#</code> (hash or pound) at the beginning of a line, that line will be ignored.</p>\n<h2>List Indexing</h2>\n<p>A useful property of a list is the list index. This allows you to pick out an item from within the list by a number starting from zero:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># Gender Trouble</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># Cruising Utopia</span>\n</code></pre></div>\n<p>Note that the first item in the list is item [0]. The second item is item [1]. That's because counting in Python, and in almost all programming languages, starts from 0.</p><p>\nYou can print out the last item in a list using negative numbers:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"c1\"># Living a Feminist Life</span>\n</code></pre></div>\n<!-- Adding some practice with slicing -->\n<h3>Slicing Lists</h3>\n<p>There are many things you can do with list indexing. Let's play around with slicing. Slicing consists of taking a section of a list, using the list index to pick out a range of list items. For example, you could take out the first <em>two</em> items of a list with a slice that begins with <code>0</code> and ends with <code>2</code>. </p><p>\nThe slice syntax consists of square brakets, start point and end point, and a colon to indicate the gap in between. This should print out the first two items of your list. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>Note a couple of things. First, the start point is <em>inclusive</em>, meaning that Python will include the <code>[0]</code> item in your range, and the end point is <em>exclusive</em>, so Python won't print the <code>[2]</code> item. Instead, it will print everything up until that <code>[2]</code> item. </p><p>\nFor ultimate brevity, you can also write this expression as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</code></pre></div>\n<p>The empty value before the colon allows Python to assume the range starts at the first list item, at <code>[0]</code>. You can also end the slice with <code>:</code>, if you want the list range to include all subseuquent items until the end of the list. The example below will print everything from the second item to the end of the list. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n</code></pre></div>\n<p>With a list that contains three items total, list slicing might not seem very impressive right now. However, this will become a powerful tool once we get to Text Analysis and start to encounter lists that contain hundreds (or thousands!) of items.</p>\n<h2>Loops</h2>\n<p>What if we want to print out each item in the list separately? For that, we'll need something called a loop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span> <span class=\"s1\">'Living a Feminist Life'</span><span class=\"p\">]</span>\n<span class=\"c1\"># print(books)</span>\n<span class=\"k\">for</span> <span class=\"n\">book</span> <span class=\"ow\">in</span> <span class=\"n\">books</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"My favorite book is \"</span> <span class=\"o\">+</span> <span class=\"n\">book</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What's happening here? This kind of loop is called a \"for\" loop, and tells Python: \"for each item in the list, do something.\" Let's break it down:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">for &lt;variable name&gt; in &lt;list name&gt;:</span>\n<span class=\"go\">    &lt;do something&gt;</span>\n</code></pre></div>\n<p>Indented code like this is known as a \"code block.\" Python will run the <code>&lt;do something&gt;</code> code in the code block once for each item in the list. You can also refer to <code>&lt;variable name&gt;</code> in the <code>&lt;do something&gt;</code> block.</p><p>\nYou can also perform more complicated operations. Let's tackle one in a challenge. But first, a note on naming variables.</p>\n<h2>A Note on Variable Names</h2>\n<p>In this section, we've discussed books in the context of a list. Why do we use the variable name <code>books</code> in this section for our list of book names? Why not just use the variable name <code>x</code>, or perhaps <code>f</code>?</p><p>\nWhile the computer might not care if our list of books is called <code>x</code>, giving variables meaningful names makes a program considerably easier to read than it would be otherwise. Consider this for loop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Gender Trouble'</span><span class=\"p\">,</span> <span class=\"s1\">'Cruising Utopia'</span><span class=\"p\">,</span> <span class=\"s1\">'Living a Feminist Life'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Which is easier to read, this for loop or the one used in the example?</p><p>\nWhen variable names accurately reflect what they represent, and are therefore meaningful, we call them \"semantic.\" Always try to create semantic variable names whenever possible.</p>", "order": 6}}, {"model": "lesson.lesson", "pk": 482, "fields": {"title": "Conditionals", "created": "2020-07-15T22:01:35.723Z", "updated": "2020-07-15T22:01:35.723Z", "workshop": 55, "text": "<p>Conditionals allow programs to change their behavior based on whether some statement is true or false. Let's try this out by writing a script that will give different outputs based on the book titles:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">random_book</span> <span class=\"o\">=</span> <span class=\"s2\">\"The Undercommons\"</span>\n<span class=\"k\">if</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"The Undercommons\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is the correct book\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I don't know which book it is! I'm just a little program...\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In our first line, we set a variable <code>random_book</code> to the string \"The Undercommons,\" representing a random book on our bookshelf. The <code>if</code> statement checks whether the random book is set to the title \"The Undercommons.\" If it is, the code in the block beneath is executed, so the text \"This is the corrent book will be printed.</p><p>\nThe <code>else</code> statement handles any inputs that aren't \"The Undercommons\"\u2014the program merely prints out that it doesn't know what you should bring. Try this script out both with the variable set to \"The Undercommons\" and the variable set to some other value. </p><p>\nWhat if we want our program to handle other books, giving different messages for each one? Other cases after the first <code>if</code> statement are handled with <code>elif</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">random_book</span> <span class=\"o\">=</span> <span class=\"s2\">\"The Undercommons\"</span>\n<span class=\"k\">if</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"The Undercommons\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is the correct book, well done!\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"Gramophone, Film, Typewriter\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is not the correct book. Please attempt with another title.\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"Radiant Textuality\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Welp. Try again.\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I don't know which book you're talking about! I'm just a little program...\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>You can add as many <code>elif</code> statements as you need, meaning that conditionals in Python have one <code>if</code> statement, any number of <code>elif</code> statements, and one <code>else</code> statement that catches any input not covered by <code>if</code> or <code>elif</code>. Over the next sections, we'll work on improving this little application, making it able to handle user input directly.</p>", "order": 7}}, {"model": "lesson.lesson", "pk": 483, "fields": {"title": "Input", "created": "2020-07-15T22:01:35.729Z", "updated": "2020-07-15T22:01:35.729Z", "workshop": 55, "text": "<!-- \nchanging the input to \"what do you want to do with your books today?\" \nMoving ask repeatedly (while and break) to challenge and adding methods to work with lists: sort(), count(), append(), pop()\n--><p><strong>Note:</strong> If you're using Python 2.7, replace all <code>input()</code> functions in the code below with <code>raw_input()</code>. You can check your version by running <code>python --version</code> in the command line.</p><p>\nPython allows you to take input directly from the user using the <code>input</code> function. Let's use it to improve our book application by asking for the book before displaying the output.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">random_book</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Which book do you want to read today? \"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"The Undercommons\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is the correct book, well done!\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"Gramophone, Film, Typewriter\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is not the correct book. Please attempt with another name.\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">\"Radiant Textuality\"</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Welp. Wrong book. Try again.\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I don't know which book you're talking about! I'm just a little program...\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>When you run this program, Python should ask you for some input with the prompt <code>\"Which book do you want to read today? \"</code> (The space before the second <code>\"</code> makes the prompt look more tidy in the console.) It will then return some advice based on the input. Try running it now.</p>\n<h2>Doing Things to Lists</h2>\n<p>Okay. Let's make our little book application a little more robust. We are going to create a list of books (remember lists?) that we can then manipulate in all sorts of ways.</p><p>\nFirst, create a list with at least three books that are important to your research right now. Shorten the titles if need be. Let's call this list our <code>library</code>. Remember the proper syntax for creating a list includes square brakets with quotations and commas separating the list items.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">library = [\"Orlando\", \"Confessions of the Fox\", \"These Waves of Girls\"]</span>\n</code></pre></div>\n<p>Next, let's sort our <code>library</code> in alphabetical order. There's a handy method called <code>sort()</code> for doing just this kind of thing. What's a <em>method</em>, you might ask? Well, <em>methods</em> are very similar to <em>functions</em>, and you'll remember that functions are ways of doing things, like <code>print()</code> and <code>type()</code>. Methods are also ways of doing things, but these things are attached to what we call <em>objects</em> in Python. Objects are part of object-oriented programming, and that's definitely not necessary to learn right now. Suffice it to say that methods are just like functions, that is, they are ways of doing things to your data.</p><p>\nTo sort the list, use the <code>sort()</code> method on your list. It should look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">library = [\"Orlando\", \"Confessions of the Fox\", \"These Waves of Girls\"]</span>\n<span class=\"go\">library.sort()</span>\n<span class=\"go\">print(library)</span>\n</code></pre></div>\n<p>What happened here? Let's take it line by line. First, we created a list <code>library</code> with three items attached to it. Then, we applied the <code>sort()</code> method to the library list. Finally, we printed the <code>library</code>, which is now sorted in alphabetical order.</p><p>\nYou'll see that we have a couple of new things happening with symbols. First, the period (<code>.</code>) which we call an <em>operator</em> in Python. The period operator is another part of object-oriented programming, and it basically means that we are applying a task to whatever precedes the period. In this case, we are applying the <code>sort()</code> method to our <code>library</code> list. It's kind of like attaching a function to our <code>library</code>. Second, we have the parenthesis <code>()</code> after <code>sort</code>. When you get more comfortable with programming, you'll see that you can use the parentheses to add what we call <em>arguments</em> that allows us to do more complex things to data. Let's see how an argument works with the <code>append()</code> method.</p><p>\nWhat if we want to add items to the list? We can use the <code>append()</code> method for that. Try:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">library = [\"Orlando\", \"Confessions of the Fox\", \"These Waves of Girls\"]</span>\n<span class=\"go\">library.append(\"La Frontera\")</span>\n<span class=\"go\">print(library)</span>\n</code></pre></div>\n<p>Here, we added <code>\"La Frontera\"</code> as an argument to the <code>append()</code> method, but putting it between the parenthesis. It basically means that we will be appending this specific title to the library list. </p><p>\nWhen you print <code>library</code>, you should see your new book appear at the end of the list. Pretty cool, right? Go ahead and add a couple more books to your list.</p><p>\nWhat if you wanted to take out some of the books? We can use <code>pop()</code> to remove the last item, or \"pop\" it off, from our list. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">library = [\"Orlando\", \"Confessions of the Fox\", \"These Waves of Girls\", \"La Frontera\", \"Dawn\"]</span>\n<span class=\"go\">library.pop()</span>\n<span class=\"go\">print(library)</span>\n</code></pre></div>\n<p>The last item that you added to your list should be missing from the <code>library</code> when you print the list.</p>", "order": 8}}, {"model": "lesson.lesson", "pk": 484, "fields": {"title": "Finding Answers with Google", "created": "2020-07-15T22:01:35.742Z", "updated": "2020-07-15T22:01:35.742Z", "workshop": 55, "text": "<p>Our library app is working pretty well, but you may have noticed that it's case sensitive:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">What do you want to do with your books today? </span>\n<span class=\"go\">Sort</span>\n<span class=\"go\">I don't know what you want me to do!</span>\n</code></pre></div>\n<p>How could we fix our program to handle cases like this? We could add a bunch of new <code>elif</code> statements, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">...</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">\"Sort books\"</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">\"SORT BOOKS\"</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</code></pre></div>\n<p>This is a lot of work, and it's a pretty ugly solution. If we wanted to add more cases to our program, we would have to write them in twice every time, and it still wouldn't fix inputs like <code>Sort Books</code>. The best way to improve our program would be to convert the input to lower case before we send it to our <code>if/else</code> block.</p>\n<h2>Googling for answers</h2>\n<p>Even if you're a super rad Python programmer, you're not going to remember every function name or how to do things you might not have touched in awhile. One thing programmers get very good at is googling for answers. In fact, this is arguably the most important skill in modern-day programming. So let's use Google to find out how to convert strings to lower case.</p><p>\nLet's try the search term <a href=\"http://lmgtfy.com/?q=make+string+lowercase+Python\" target=\"_blank\"><code>make string lowercase Python</code></a>:</p><p>\n<img alt=\"make string lower case Python Google search\" src=\"/static/images/lessons/python/google_search.png\"/></p><p>\nWhile Google searches change over time, some of your results likely come from a site called Stack Overflow. This is a questions and answers site for programmers that usually has strong answers to questions about Python.</p><p>\n<img alt=\"Google search results with stack overflow answer on top\" src=\"/static/images/lessons/python/google_result.png\"/></p><p>\nOn <a href=\"https://stackoverflow.com/questions/6797984/how-do-i-lowercase-a-string-in-python\">this Stack Overflow page</a>, take a quick look at the question to make sure it's relevant to your problem. Then scroll down to the answers to find what we're looking for. You may also notice snarky debates -- another \"feature\" of Stack Overflow.</p>\n<h2>Implementing our answer</h2>\n<p>According to this answer, we can make a string lowercase by adding <code>.lower()</code> to the end of it, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">\"SORT BOOKS\"</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n<span class=\"go\">'sort books'</span>\n</code></pre></div>\n<p>OK, that seems to work, even if we don't really know what's going on with that dot. Let's incorporate this transformation into our weather app:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Orlando\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Confessions of the Fox\"</span><span class=\"p\">,</span> <span class=\"s2\">\"These Waves of Girls\"</span><span class=\"p\">]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"What do you want to do with your books today? \"</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">\"sort books\"</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">\"add a book\"</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"La Frontera\"</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">\"remove a book\"</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span> \n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I don't know what you want me to do!\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This new script should handle any combination of upper or lowercase characters. The new second line sets the response variable to a new value, <code>response.lower()</code>, which is a lowercase version of the original input.</p><p>\nThere's no shame in googling for answers! Error messages are especially useful to google when you run into them. Keep an eye out for Stack Overflow answers, as they tend to have useful examples. The <a href=\"https://docs.python.org/3/\">official Python documentation</a> will also frequently come up, but I would recommend avoiding it as a resource until you have more programming experience. It's a great resource, but the way information is presented can be confusing until you get the hang of reading documentation.</p>", "order": 9}}, {"model": "lesson.lesson", "pk": 485, "fields": {"title": "A Little Motivation", "created": "2020-07-15T22:01:35.745Z", "updated": "2020-07-15T22:01:35.746Z", "workshop": 55, "text": "<p>Early on, we learned a bit about lists, which look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"s2\">\"Gender Trouble\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Cruising Utopia\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Living a Feminist Life\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>We're going to create a small application that will print a random motivational saying every time a user presses <code>Enter</code>. Our first step will be to create a list of positive sayings:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">motivational_phrases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"Importing modules is easy!\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Programming! Yay!\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"You write lists like a pro!\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n</code></pre></div>\n<p>Lists open with a square bracket <code>[</code>, have items seperated with commas, and end with a square bracket <code>]</code>, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Our positivity list above spreads the list out over multiple lines for greater readability, which is allowed in Python. Remember that you can change the strings in the list to whatever phrases you choose.</p>\n<h2>Importing a module</h2>\n<p>Now that we have our sayings, let's use it in conjunction with some functionality from a module that's built into Python: the <code>random</code> module.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">motivational_phrases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"Importing modules is easy!\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Programming! Yay!\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"You write lists like a pro!\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">motivational_phrases</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>The <code>random.choice</code> function chooses a random item from a list and returns it. The <code>.</code> syntax indicates that the function is coming from the <code>random</code> library.</p><p>\n<!-- \nrevision notes from filipa: \n- move these challenges to be part of the lesson proper.\n- replace them with an exercise of easy web scraping. \n- they will download a ready script, and choose on of a few URLs to scrape (nytimes, reddit, etc)\n- we talk through the role of libraries, and we identify the functions/methods in the short script\n- this will give them hands-on practice achieving something tangible. \n--></p>", "order": 10}}, {"model": "lesson.lesson", "pk": 486, "fields": {"title": "Objects in Python", "created": "2020-07-15T22:01:35.749Z", "updated": "2020-07-15T22:01:35.749Z", "workshop": 55, "text": "<p>Objects in Python (and other programming languages) are basically containers that can hold data and/or functions inside them. When a function is inside an object, we usually call the function a \"method.\" When data is inside an object, we usually call it an \"attribute.\" The terminology isn't that important, though. What we do need to know is that you can access these \"methods\" and \"attributes\" with a <code>.</code> (a dot or period).</p><p>\nWhen we added <code>sort()</code>, <code>append()</code>, <code>pop()</code>, and <code>lower()</code> to our library app, we briefly saw how some methods contained inside certain objects in Python, like Lists (for sort, append, and pop), and String objects, like lower.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loud_greeting</span> <span class=\"o\">=</span> <span class=\"s2\">\"HELLO!\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loud_greeting</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n<span class=\"go\">'hello!'</span>\n</code></pre></div>\n<p>Many, or most, objects in Python have methods that allow you to use them in different ways. As you move into using more advanced Python, you'll find that understanding what methods are available becomes more important.</p>\n<h2>Examining Objects</h2>\n<p>When you encounter an object, how can you learn its methods and atributes so you can use them? There are two main ways. The first, and likely the most practical, is to read the documentation of the library you're using.</p><p>\nHowever, you can also use the <code>dir()</code> function, which will tell you which methods and attributes are available in an object.</p><p>\nLet's use the REPL for a moment\u2014open it by typing <code>python</code> at the command line.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello, world!'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"go\">['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__',</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']</span>\n</code></pre></div>\n<p>The above output shows all the methods and attributes available to Python strings that can be accessed using the dot (<code>.</code>) syntax. When using <code>dir()</code>, you'll mostly want to ignore the methods and attributes that have underscores around them. They mainly have to do with the internals of the Python language.</p>", "order": 11}}, {"model": "lesson.challenge", "pk": 76, "fields": {"lesson": 476, "title": "", "text": "<ol>\n<li>\n<p>For a few minutes, practice moving in and out of Python's interactive mode (also known as the REPL). You can get out of Python by hitting <code>Control-d</code> (or <code>Control-z</code> if you're using Git Bash) or by typing <code>exit()</code>, and you can get back in by typing <code>python</code> at the <code>$</code> prompt. Remember that you're in the REPL when you see <code>&gt;&gt;&gt;</code>, and you're in bash when you see the <code>$</code>.</p>\n</li>\n<li>\n<p>One \"operator\" (math symbol) we didn't learn is the exponent\u2014you know, \"x raised to the power of...\"  If you were Guido van Rossum, the creator of Python, how would you define this operator?</p>\n</li>\n</ol>"}}, {"model": "lesson.challenge", "pk": 77, "fields": {"lesson": 478, "title": "", "text": "<p>So I just told you that variables shouldn't start with a number or an underscore. What does that even mean? Will your computer explode if you write <code>1_book = \"Gender Trouble\"</code>?</p>\n<p>Only one way to find out. Try giving weird names to variables and see if you can learn a bit about the rules.</p>"}}, {"model": "lesson.challenge", "pk": 78, "fields": {"lesson": 479, "title": "", "text": "<ol>\n<li>\n<p>Rewrite your program so that you assign the message to a variable, then print the variable. This will make your program two lines instead of one. There's a fancy programmer word for rewriting your code without changing it's behavior\u2014\"refactoring.\"</p>\n</li>\n<li>\n<p>(optional) Are you already getting sick of typing <code>python hello.py</code> again and again? Try typing <code>!!</code> in the command line (the <code>$</code>). This will run your last line of code again.</p>\n</li>\n<li>\n<p>(even more optional) If you're on Windows and have a minute, try pressing the Windows button on your keyboard and searching for a program called <code>IDLE</code> that comes with Python. It's a special editor (or IDE) that lets you run Python code from inside it. You might like it more than git bash.</p>\n</li>\n</ol>"}}, {"model": "lesson.challenge", "pk": 79, "fields": {"lesson": 480, "title": "", "text": "<p>Try to create as many errors as you can in the next few minutes. After getting your first two syntax errors, try instead to get traceback errors. Some areas to try include mathematical impossibilities and using math operations on types that do not support them.</p>"}}, {"model": "lesson.challenge", "pk": 80, "fields": {"lesson": 481, "title": "", "text": "<ol>\n<li>Here's a list of numbers:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">prime_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n</code></pre></div>\n\n\n<p>Write some code to print out the square of each of these numbers. Remember that the square of a number is that number times itself. The solution is below, but you're not allowed to look at it until you've tried to solve it yourself for 3.5 minutes. (Seriously! That's 210 seconds.)</p>\n<ol start=\"2\">\n<li>First, ignore this challenge because it's too hard. Next, look up a new concept\u2014\"f-string\" (a formatting technique for strings)\u2014on Google and use it to write a loop that gives the following output:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"go\">The square of 2 is 4.</span>\n<span class=\"go\">The square of 3 is 9.</span>\n<span class=\"go\">The square of 5 is 25.</span>\n<span class=\"go\">The square of 7 is 49.</span>\n<span class=\"go\">The square of 11 is 121.</span>\n</code></pre></div>\n\n\n<p>Note: the \"f-string\" is a new string formatting method for Python 3. You can <a href=\"https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python\">read more about this new string formatting method</a>.</p>"}}, {"model": "lesson.challenge", "pk": 81, "fields": {"lesson": 482, "title": "", "text": "<p>Add two more <code>elif</code> statements to this program to make it better able to handle different potential books.</p>"}}, {"model": "lesson.challenge", "pk": 82, "fields": {"lesson": 483, "title": "", "text": "<p>Remember the <code>input()</code> function from the beginning of this lesson? This challenge uses that function to create a little library app. You will play around with the input button, asking the user what kinds of things they want to do with their library, and writing some code that does those things and prints out the results.</p>\n<p>First, create a new file called <code>library.py</code>. Save it to your current working folder.</p>\n<p>Second, create a list of <code>library</code> books, with at least three books (you can use the same ones as before). </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Orlando&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Confessions of the Fox&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;These Waves of Girls&quot;</span><span class=\"p\">]</span>\n</code></pre></div>\n\n\n<p>Then, add an input statement that will save the user's response to a variable, like <code>response</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">&quot;What do you want to do with your books today? &quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>Now, create a conditional statement that matches the user's response to series of options for doing things to the <code>library</code> list. You can include <code>sort()</code>, <code>append()</code>, and <code>pop()</code>. I'll do the first one, <code>sort()</code>, for you:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Orlando&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Confessions of the Fox&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;These Waves of Girls&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">&quot;What do you want to do with your books today? &quot;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sort&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span> \n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I don&#39;t know what you want me to do!&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>See how the order of statements build on each other toward the final product? First, we create a library of books. Then, we set the user's response about what to do with those books. Then, we create a conditional statement that matches the response to specific tasks. The first condition checks to see if the user wants to \"sort\" the books, then sorts them, then prints the final result.</p>\n<p>After adding a few more conditions, test out your code! You should have a little library app that sorts, adds, and removes books from your list.</p>"}}, {"model": "lesson.challenge", "pk": 83, "fields": {"lesson": 484, "title": "", "text": "<ol>\n<li>We are going to use <code>while</code> loops to get Python to repeat loops over and over again. This involves adding a <code>while</code> statement to your libary app. The code should look like this, and it goes right after the <code>library</code> list and before your <code>input</code> statement.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n</code></pre></div>\n\n\n<p>Make sure that everything under <code>while True:</code> is indented (this creates a \"code block,\" or a group of lines that will be executed together).</p>\n<p>Once you get it to work, you can add more <code>elif</code> statements to include more books on the list. Then, run the program, adding books, sorting them and removing them. </p>\n<ol start=\"2\">\n<li>\n<p>(optional) OK, I told you not to look at the Python documentation. But doesn't that make you really want to go look at the Python documentation? How bad could this \"documentation\" really be? What terrible secrets might it hold?</p>\n<p>Fine. Have a look at the <a href=\"https://docs.python.org/3/library/functions.html\">Python documentation on built-in functions</a>. Don't say I didn't warn you.</p>\n</li>\n</ol>"}}, {"model": "lesson.challenge", "pk": 84, "fields": {"lesson": 485, "title": "", "text": "<ol>\n<li>\n<p>As with our library app, this positive saying generator could be improved by making it so the program doesn't have to run again every time to get new output. Add a while loop for the final version. </p>\n</li>\n<li>\n<p>The real point of this section is to learn <code>import</code>, which is where Python really starts to get interesting. Python comes with many libraries (importable collections of code), written by others that can be pulled into your program, allowing you to use that functionality. In this challenge, do a little research on Python libraries that might solve a problem for you or address a domain that you're interested in.</p>\n</li>\n</ol>\n<p>Think of something you're interested in doing (statistics, text analysis, web scraping, quantitative analysis, processing Excel/PDF/image files) and search google \"\\<thing you're interested in> python library\". You're almost certain to find some useful results. For example, if you wanted to find Python libraries for dealing with cleaning up HTML files, you might search one of these:</p>\n<blockquote>\n<p>working with html python library</p>\n<p>html parser python library</p>\n</blockquote>\n<p>In your research, you may also want to look at the libraries that come with Python. You can find a list of libraries in these libraries <a href=\"https://docs.python.org/3/py-modindex.html\">here</a>.</p>"}}, {"model": "lesson.challenge", "pk": 85, "fields": {"lesson": 486, "title": "", "text": "<ol>\n<li>\n<p>You can also use <code>dir()</code> to see what functions are available from Python libraries that you import. Try importing the random library again and see what you get when you enter <code>dir(random)</code>.</p>\n</li>\n<li>\n<p>Try entering other objects based on Python types we've already learned to the <code>dir()</code> function. For example, you might try <code>dir([1, 2, 3])</code> to see what methods are available when using lists.</p>\n</li>\n</ol>"}}, {"model": "lesson.solution", "pk": 52, "fields": {"challenge": 76, "title": "", "text": "<ol start=\"2\">\n<li>The exponent operator is two asteriks, or <code>**</code>. For example, the number <code>3</code> to the power of <code>2</code> would be expressed as <code>3**2</code>.</li>\n</ol>"}}, {"model": "lesson.solution", "pk": 53, "fields": {"challenge": 77, "title": "", "text": "<p>There are a few rules regarding the way that you write the variable statement. This is because Python reads everything left to right, and needs things to be in a certain order. </p>\n<p>First, you cannot use any numbers or special characters to start a variable name. So <code>1_book</code>, <code>1book</code>, or any variable that contains special characters <code>@</code>, <code>#</code>, <code>$</code>, <code>$</code>, etc, wouldn't be acceptable in Python. You must start the variable with a letter and avoid using special characters.</p>\n<p>You can incorporate numbers after you've started with a letter. So <code>book_1</code> or <code>b1</code> is acceptable, though you cannot use special characters at any point in the variable name. </p>\n<p>Second, you might also notice that variable syntax requires you to write the variable name first, followed by an equal sign <code>=</code>, and then the value, which can be any data type. You cannot start the variable statement with the data value, because python always recognizes the first thing written as the thing to be assigned. The thing that comes after the <code>=</code> is the data that becomes attached to the preceding variable.</p>"}}, {"model": "lesson.solution", "pk": 54, "fields": {"challenge": 78, "title": "", "text": "<ol>\n<li>You should type the following into <code>hello.py</code>:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hello World!&quot;</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">greeting</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<p>Then, making sure you're in the right directory, run <code>python hello.py</code> in the terminal <code>$</code>. You should see the following output:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">$</span> python hello.py\n<span class=\"go\">Hello world!</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 55, "fields": {"challenge": 79, "title": "", "text": "<p>Some examples of <strong>syntax errors</strong> include... </p>\n<p>Starting the variable name with a special character.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">%</span><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hello World&quot;</span>\n  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>\n    <span class=\"o\">%</span><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hello World&quot;</span>\n    <span class=\"o\">^</span>\n<span class=\"gr\">SyntaxError</span>: <span class=\"n\">invalid syntax</span>\n</code></pre></div>\n\n\n<p>Starting a variable by writing the data values before the variable.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">&quot;hey there!&quot;</span> <span class=\"o\">=</span> <span class=\"n\">greeting</span>\n  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>\n<span class=\"gr\">SyntaxError</span>: <span class=\"n\">can&#39;t assign to literal</span>\n</code></pre></div>\n\n\n<p>Including spaces in a variable. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pleasant</span> <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hello!&quot;</span>\n  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>\n    <span class=\"n\">pleasant</span> <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hello!&quot;</span>\n                    <span class=\"o\">^</span>\n<span class=\"gr\">SyntaxError</span>: <span class=\"n\">invalid syntax</span>\n</code></pre></div>\n\n\n<p>Some examples of <strong>traceback errors</strong> include... </p>\n<p>Concatenating data types, like strings and integers. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;hello&quot;</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"gr\">TypeError</span>: <span class=\"n\">can only concatenate str (not &quot;int&quot;) to str</span>\n</code></pre></div>\n\n\n<p>Using Booleans (<code>True</code> or <code>False</code>) without capitalizing them.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"n\">false</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"gr\">NameError</span>: <span class=\"n\">name &#39;false&#39; is not defined</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greeting</span>\n<span class=\"go\">False</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 56, "fields": {"challenge": 80, "title": "", "text": "<ol>\n<li></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">prime_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">prime_numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">prime_numbers</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">prime_numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s2\">&quot;The square of {num} is {num * num}&quot;</span><span class=\"p\">)</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 57, "fields": {"challenge": 81, "title": "", "text": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">random_book</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;The Undercommons&quot;</span>\n\n<span class=\"k\">if</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;The Undercommons&quot;</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is the correct book, well done!&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Gramophone, Film, Typewriter&quot;</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is not the correct book. Please attempt with another title.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Radiant Textuality&quot;</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Welp. Try again.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;The New Jim Code&quot;</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Bzzzzzt! Wrong Answer!)</span>\n<span class=\"k\">elif</span> <span class=\"n\">random_book</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Algorithmic Criticism&quot;</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;That&#39;s just wrong.&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I don&#39;t know which book you&#39;re talking about! I&#39;m just a little program...&quot;</span><span class=\"p\">)</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 58, "fields": {"challenge": 82, "title": "", "text": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Orlando&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Confessions of the Fox&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;These Waves of Girls&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">&quot;What do you want to do with your books today? &quot;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sort books&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;add a book&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;La Frontera&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;remove a book&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span> \n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I don&#39;t know what you want me to do!&quot;</span><span class=\"p\">)</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 59, "fields": {"challenge": 83, "title": "", "text": "<ol>\n<li></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Orlando&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Confessions of the Fox&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;These Waves of Girls&quot;</span><span class=\"p\">]</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">&quot;What do you want to do with your books today? &quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sort books&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;add a book&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;La Frontera&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;add another&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Dawn&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;more books&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Frankenstein&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;again&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;Nightwood&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;remove a book&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span> \n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;I don&#39;t know what you want me to do!&quot;</span><span class=\"p\">)</span>\n</code></pre></div>"}}, {"model": "lesson.solution", "pk": 60, "fields": {"challenge": 84, "title": "", "text": "<ol>\n<li></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">motivational_phrases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;Importing modules is easy!&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;Programming! Yay!&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;You write lists like a pro!&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Because this is input, the user will</span>\n    <span class=\"c1\"># need to hit enter to see a new phrase</span>\n    <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">motivational_phrases</span><span class=\"p\">))</span>\n</code></pre></div>"}}, {"model": "frontmatter.learningobjective", "pk": 383, "fields": {"frontmatter": 55, "label": "Understand what Python is and, in general terms, what it can do."}}, {"model": "frontmatter.learningobjective", "pk": 384, "fields": {"frontmatter": 55, "label": "Run Python programs, both by interacting directly with the interpreter and by preparing and running scripts."}}, {"model": "frontmatter.learningobjective", "pk": 385, "fields": {"frontmatter": 55, "label": "Distinguish among five core data types\u2014integers, floats, strings, booleans, and lists."}}, {"model": "frontmatter.learningobjective", "pk": 386, "fields": {"frontmatter": 55, "label": "Become familiar with core programming concepts, including variables, loops, and conditionals."}}, {"model": "frontmatter.learningobjective", "pk": 387, "fields": {"frontmatter": 55, "label": "Engage with error output and use the internet and documentation to independently research language features."}}, {"model": "frontmatter.learningobjective", "pk": 388, "fields": {"frontmatter": 55, "label": "Learn how to find and import code from external sources to solve more complex problems."}}, {"model": "frontmatter.contributor", "pk": 203, "fields": {"first_name": "Patrick", "last_name": "Smyth", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 204, "fields": {"first_name": "Rafael Davis", "last_name": "Portela", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 205, "fields": {"first_name": "Filipa", "last_name": "Calado", "role": null, "url": null}}, {"model": "library.reading", "pk": 301, "fields": {"title": "Five Reasons Why Learning Python Is The Best Decision", "url": "https://medium.com/datadriveninvestor/5-reasons-why-i-learned-python-and-why-you-should-learn-it-as-well-917f781aea05", "annotation": "\"[Five Reasons Why Learning Python Is The Best Decision](https://medium.com/datadriveninvestor/5-reasons-why-i-learned-python-and-why-you-should-learn-it-as-well-917f781aea05),\" *Medium*. ", "zotero_item": null}}, {"model": "library.reading", "pk": 302, "fields": {"title": "What Can I Do With Python?", "url": "https://realpython.com/what-can-i-do-with-python", "annotation": "\"[What Can I Do With Python?](https://realpython.com/what-can-i-do-with-python/)\" *Real Python*.", "zotero_item": null}}, {"model": "library.project", "pk": 141, "fields": {"title": "The NEH Impact Index", "url": "http://www.nehimpact.org/about", "annotation": "Built by former Digital Fellow Patrick Smyth, [The NEH Impact Index](http://www.nehimpact.org/about) makes visible the distribution of funds by National Endowment for the Humanities across the United States. The website uses python to map projects, communities, and cultural institutions who have received NEH support. You can check out [the code on Github](https://github.com/smythp/NEH-impact).", "zotero_item": null}}, {"model": "library.project", "pk": 142, "fields": {"title": "Mapping Arts NYC", "url": "http://gcdiprojects.org/MappingArtsNYC", "annotation": "[Mapping Arts NYC](http://gcdiprojects.org/MappingArtsNYC/), created in 2019 by the Graduate Center's Data for Public Good fellows, \"is a project that explores the geography and representation of arts and culture in New York City over time.\" It includes a number of Python scripts written to clean and make sense of [all the data](https://github.com/Data-For-Public-Good).", "zotero_item": null}}, {"model": "library.project", "pk": 143, "fields": {"title": "Scrapy", "url": "https://scrapy.org", "annotation": "Python programmers build and maintain various \"libraries,\" or collections of python code, that can be re-purposed toward custom projects. You might check out the [Scrapy](https://scrapy.org/) library for web scraping, the [NumPy](https://numpy.org/) library for numerical computing, or the [pandas](https://pandas.pydata.org/) library for data analysis and manipulation. Check out the individual websites to help you think about the data that you want to work with.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 152, "fields": {"label": "Google's Python Class", "url": "https://developers.google.com/edu/python", "annotation": "If you feel like you're ready for more tutorials, you should check out [Google's Python Class](https://developers.google.com/edu/python), a solid introduction that also begins to explore intermediate concepts and modules. ", "zotero_item": null}}, {"model": "library.tutorial", "pk": 153, "fields": {"label": "Python Programming for the Humanities", "url": "https://www.karsdorp.io/python-course", "annotation": "To begin using Python for manipulating and analyzing text based data, check out [Python Programming for the Humanities](https://www.karsdorp.io/python-course/), and jump straight into chapter 2.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 154, "fields": {"label": "How to Think Like a Computer Scientist - Python Edition", "url": "https://runestone.academy/runestone/books/published/thinkcspy/index.html", "annotation": "For those interested in more general computer science concepts, [How to Think Like a Computer Scientist - Python Edition](https://runestone.academy/runestone/books/published/thinkcspy/index.html) offers a good introduction to python.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 155, "fields": {"label": "Hacking the Humanities", "url": "https://www.youtube.com/playlist?list=PL6kqrM2i6BPIpEF5yHPNkYhjHm-FYWh17", "annotation": "If you learn best by watching videos, Paul Vierthaler\u2019s recorded and uploaded his DH class, [Hacking the Humanities](https://www.youtube.com/playlist?list=PL6kqrM2i6BPIpEF5yHPNkYhjHm-FYWh17), to Youtube. Includes a general introduction to coding principles, introduction to python, with emphasis on text analysis, data manipulation, and web scraping.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 156, "fields": {"label": "Learn Python the Hard Way", "url": "https://learnpythonthehardway.org/book", "annotation": "If you learn best by copying and practicing, [Learn Python the Hard Way](https://learnpythonthehardway.org/book/), by Zed A. Shaw, is an excellent a hands-on resource. Although the online and print book versions cost money, you can test out a sample for free.", "zotero_item": null}}, {"model": "library.reading", "pk": 303, "fields": {"title": "How Do I Solve [insert problem here] With Python?", "url": "https://digitalfellows.commons.gc.cuny.edu/2018/02/13/python_libraries", "annotation": "Hannah Aizenman, a former Digital Fellow, wrote up a great blog post introducing python \"libraries,\" or collections of python code, for various project types, from creating a website, to getting, exploring, and visualizing data, and working with images, video, spreadsheets, among other ideas. Check out her suggestions in [How Do I Solve [insert problem here] With Python?](https://digitalfellows.commons.gc.cuny.edu/2018/02/13/python_libraries/)", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 56, "fields": {"name": "HTML/CSS", "slug": "html-css", "created": "2020-07-15T22:01:40.114Z", "updated": "2020-07-15T22:01:40.114Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/html-css", "parent_branch": "v2.0-param-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 56, "fields": {"workshop": 56, "abstract": "HTML (Hypertext Markup Language) is a markup language used to create and organize the content of a website. CSS (Cascading Style Sheets) is a language used for design and layout. Together, these languages form the foundation of what one needs to know to create websites that are useful and well-designed.", "estimated_time": "10", "projects": [144, 145, 146], "resources": [], "readings": [304, 305], "contributors": [206, 207, 208, 209, 210], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 56, "fields": {"discussion_questions": "['Content TBD']", "next_steps": "[]", "workshop": 56, "further_readings": [306, 307, 308, 309, 310], "more_projects": [], "more_resources": [], "tutorials": [157, 158]}}, {"model": "lesson.lesson", "pk": 487, "fields": {"title": "Introduction", "created": "2020-07-15T22:01:40.116Z", "updated": "2020-07-15T22:01:40.116Z", "workshop": 56, "text": "<p>Websites seem like these magical things that appear when we open our web browser (i.e. Chrome, Firefox, Safari). We know that websites are hypertext, meaning that we can click between links, travelling from page to page until we find what we need. What may be less obvious about websites is that, fundamentally <strong>websites are plain text documents</strong>, usually written in HTML or another web-based markup language, such as XML or XHTML.</p><p>\n<em>Fun fact</em>: <strong>Nearly 80% of all websites (whose markup language we know) use HTML.</strong></p><p>\n<a href=\"https://w3techs.com/technologies/details/ml-html/all/all\">(w3techs.com)</a></p>\n<h2>Hypertext Markup Language (HTML)</h2>\n<p>HTML is a markup language used to write web-based documents. It enables us to provide web browsers with information about the <em>content</em> of a document. We can, for example, indicate that some part of our document is a paragraph, image, heading, or link. The browser uses this information when displaying the document for users.</p>\n<h2>Markup language vs. programming Language</h2>\n<p>HTML is a <em>markup</em> language, not a programming language. Programming languages are used to transform data, by creating scripts that organize an output of data based on a particular input of data. A markup language is used to control the presentation of data.</p><p>\nFor a practical example of this difference, we can think about tables. A programming language can help you search through a table, understand the kinds of data the table includes, find particular data points, or transform its content into other kinds of data, such as frequencies. A markup language would instead determine the content, layout, and visual presentation of the table.</p><p>\nFundamentally, then, a script or program is a set of instructions given to the computer. A document in a markup language determines how information is presented to a user.</p><p>\n<strong>NOTE - Markup vs Markdown:</strong> Markdown and HTML are both types of markup languages; Markdown is a play on words. Markup languages help format content.</p>\n<h2>Cascading Style Sheets (CSS)</h2>\n<p>CSS is usually used in conjunction with HTML. HTML tells the browser what the different parts of a document <em>are</em>. CSS tells the browser what the parts of the document should <em>look like</em>. It is essentially a set of rules that are applied when rendering an HTML document. Its name\u2014Cascading Style Sheets\u2014refers to the fact that there is an order of precedence in how the browswer applies CSS rules to a document. More specific rules overwrite less specific rules.</p>\n<h2>Where does the internet come in?</h2>\n<p>Together, these languages can be used to write and style a website using a text editor (such as VS Code) directly from your computer. No internet access needed.</p><p>\nHowever, internet access is necessary if you plan on making your website available to the public. At the end of this workshop, we will briefly discuss <a href=\"?page=19\">how to get your website from your local computer onto the internet</a>.</p>", "order": 1}}, {"model": "lesson.lesson", "pk": 488, "fields": {"title": "Opening Activity", "created": "2020-07-15T22:01:40.117Z", "updated": "2020-07-15T22:01:40.117Z", "workshop": 56, "text": "<ol>\n<li>Open a web browser. (NOTE: please use Firefox or Chrome. Safari will not allow you to complete this activity.)</li>\n<li>Go to any webpage.</li>\n<li>Open the secondary menu (using a mouse, this would be the menu that opens when you right click on the page; on Mac computers, this is usually a two-finger tap on the track pad, or you can press the \"control\" button then click the track pad).</li>\n<li>Select \u2018View Page Source\u2019 from the dropdown menu.</p><p>\n<img alt=\"Image showing dropdown menu that appears when right clicking on a website in Chrome or Firefox\" src=\"/static/images/lessons/html-css/page_source.jpeg\"/></li>\n</ol>\n<h2>What you're seeing</h2>\n<p>A second tab should open in your browser displaying the underlying code of the page. This is the code that is used to make and render the page in your web browser.</p><p>\nIn this session, we are going to learn how to read and write this code, and render it in the browser on your local computer. At the end we will discuss the next steps for how you could host your new website, making it available for browsing by others via the internet.</p>", "order": 2}}, {"model": "lesson.lesson", "pk": 489, "fields": {"title": "Basic Template for HTML", "created": "2020-07-15T22:01:40.119Z", "updated": "2020-07-15T22:01:40.119Z", "workshop": 56, "text": "<p>Below is a basic template for an empty HTML Document.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>HTML documents start with a <code>DOCTYPE</code> declaration that states what version of HTML is being used. This tells the browser how to read the code below it to render the page. If the webpage were written with a different markup language (i.e. XML, XHTML), it would tell you here.</p><p>\nAfter the <code>DOCTYPE</code>, we see the start of the <strong>Root Element</strong>. EVERYTHING\u2014all content\u2014that you want presented on this page and all information about how you want that information to be organized and styled goes in the root element, and it is demarcated by <code>&lt;html&gt;</code> and <code>&lt;/html&gt;</code>.</p><p>\nThe root element begins by indicating which language the document is written in; and in this basic template, <code>en</code> tells us and the computer that we are writing in English.</p><p>\nWithin the root element of the basic template above, you'll notice the two main sections of all HTML documents: a head section (demarcated by <code>&lt;head&gt;</code> and <code>&lt;/head&gt;</code>) and a body section (demarcated by <code>&lt;body&gt;</code> and <code>&lt;/body&gt;</code>).</p><p>\nThe <strong>head section</strong> contains basic information about the file such as the title, keywords, authors, a short description, and so on. This is also where you will link to your CSS stylesheet which describes how you want the page styled\u2014colors, fonts, size of text, and positioning of elements on the page.</p><p>\nThe <strong>body section</strong> contains the content of the page, including paragraphs, images, links, and more, and indicates how this content is to be structured on the page.</p>\n<h2>Activity</h2>\n<p>Create a folder called <code>htmlpractice</code> in your projects folder (<code>~/Desktop/projects/htmlpractice</code>). If you haven't created a projects folder in an earlier session, you can create one now. Inside that folder, create a new text file and save it as <code>index.html</code>.</p><p>\nLet's use the command line to create the new folder and file:</p><p>\n1. Open your terminal.</p><p>\n2. Navigate to your projects folder using this command:</p><p>\n<code>bash\n    cd ~/Desktop/projects</code></p><p>\n3. Create a new folder:</p><p>\n<code>bash\n    mkdir htmlpractice</code></p><p>\n4. Use your VS Code text editor to create a file called <code>index.html</code>: <code>code index.html</code>.</p><p>\n5. Paste the template above (starting with <code>&lt;!DOCTYPE html&gt;</code>) into the new file.</p><p>\nThe <code>index.html</code> file is your default homepage for the website we are creating. This is an industry standard, because web browsers tend to recognize the <code>index.html</code> page as the opening page to the directory that is your website. See <a href=\"https://www.lifewire.com/index-html-page-3466505\">here</a> for more explanation.</p><p>\nOnce you've created your new file, open it with a web browser using your graphical user interface:</p><p>\nOn macOS, click on the Finder in your dock (the apps at the bottom of the screen) and click on Desktop on the left. From there, navigate to <code>projects</code>, then <code>htmlpractice</code>. Alternately, you can click the projects folder icon on your Desktop and find it from there. If you're using a Mac and would prefer to use the command line, you can also type <code>open index.html</code> from within your <code>htmlpractice</code> folder.</p><p>\nOn Windows, click the <code>projects</code> folder icon on your desktop. Navigate to <code>projects</code>, then <code>htmlpractice</code>. Double click the <code>index.html</code> file. If it does not open in a browser, right click the <code>index.html</code> icon and select \"Open with...\" from the menu. Select Firefox or Google Chrome from the app list that appears.</p>\n<h3>What happens?</h3>\n<p>When you open the empty template, you'll see only a blank web page. Open your secondary menu (right click on Windows, hold control and click with macOS) and view the page source. How can you explain what happens when you open these text files?</p>\n<h2>What should happen when I open each of my two new files?</h2>\n<p>When you \"View Page Source,\" you should see the code for the basic template.</p><p>\nNo content renders on the page, because there is no content in the template at this time.</p>", "order": 3}}, {"model": "lesson.lesson", "pk": 490, "fields": {"title": "Tags and Elements", "created": "2020-07-15T22:01:40.121Z", "updated": "2020-07-15T22:01:40.121Z", "workshop": 56, "text": "<p>Tags and elements are the structuring components of html webpages.</p><p>\n<strong>Elements</strong> identify the different parts of a page, such as paragraphs, headings, titles, body text, images and more. Elements are demarcated by tags which enclose the content of an element (ex. <code>&lt;head&gt;</code> and <code>&lt;/head&gt;</code> are tags that denote the head element of your page).</p><p>\n<strong>Tags</strong> demarcate elements in one of two ways. As with the paragraph element below, an element can have an opening and a closing tag, with the content in between.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This is a paragraph.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    This is also a paragraph.\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>Elements which have an opening and closing tag can have other elements inside them. Inside the paragraph element below is a strong element, which emphasizes the included text by making it bold.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    When I came home from school, I saw he had <span class=\"p\">&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span>stolen<span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span> my chocolate pudding.\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>Other elements have self-closing tags as with the image element below. These tags are also called <strong>void tags</strong>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"image.jpeg\"</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n<p>These elements don't require a separate closing tag. Closing tags aren't needed because you wouldn't add content inside these elements. For example, it doesn't make sense to add any additional content inside an image.</p><p>\nBelow is HTML that adds alternative text to an image\u2014or text that describes the image. This information added is an attribute\u2014or something that modifies the default functionality of an element.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">\"This is an image\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"image.jpeg\"</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n<p>Adding alternative text to an image, as was done in this example, is vitally important. That information makes the image more accessible to those viewing your site. For instance, users with poor vision who may not be able to see your image will still understand what it is and why it's there if you provide alternative text describing it.</p><p>\nIf you look back at the basic template in your <code>index.html</code> file, you'll see that the main sections of your file have opening and closing tags. Each of these main elements will eventually hold many other elements, many of which will be the content of our website.</p>", "order": 4}}, {"model": "lesson.lesson", "pk": 491, "fields": {"title": "Paragraphs and Headings", "created": "2020-07-15T22:01:40.122Z", "updated": "2020-07-15T22:01:40.122Z", "workshop": 56, "text": "<p>Paragraphs and headings are the main textual elements of the body of your webpages. Because these contain content that you want to organize and display on your webpage, these are entered in the body element.</p><p>\nThe <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, etc. tags denote <strong>headings</strong> and <strong>subheadings</strong>, with <code>&lt;h1&gt;</code> being the largest and <code>&lt;h6&gt;</code> the smallest.</p><p>\nThe <code>&lt;p&gt;</code> tags denote <strong>paragraphs</strong>, or blocks of text.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>A boring story<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n            Cleaning my boiler\n        <span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n            When I got to my basement that day, I knew that I just had to clean my boiler. It was just too dirty. Honestly, it was getting to be a hazard. So I got my wire brush and put on my most durable pair of boiler-cleaning overalls. It was going to be a long day.\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>Note that the <code>&lt;title&gt;</code> is in the <code>&lt;head&gt;</code> element, which is where information about the webpage goes. The title doesn't appear on the page, but instead elsewhere in the browser when the page is displayed. For example, in Chrome, the title appears on the tab above the navbar.</p><p>\n<img alt=\"Image showing where the title appears in the Chrome web browser\" src=\"/static/images/lessons/html-css/title.png\"/></p><p>\nNote also that the elements and tags used in HTML have <em>meaning</em>. They provide information about the structure of a web page, showing how its parts work together. Those who make use of assistive technologies such as screen readers rely on this semantic information to navigate the page. Thus, it's important to use elements such as headers only when the information being marked calls for it. Making text large and/or bold for visual effect should be done using CSS. The Mozilla Developer Network has some good <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Semantics#Semantics_in_HTML\">introductory information on semantic HTML</a>.</p>\n<h2>Activity</h2>\n<p>Using your text editor, add the following to your <code>index.html</code>:</p><p>\n- Title</p><p>\n- Heading</p><p>\n- Paragraph</p><p>\nThen, re-save the file. Open it in your browser again or refresh the page if still opened.</p><p>\nWhat do you notice about how the information is organized in the webpage? In other words, where are the title, heading, and paragraph text?</p>\n<h2>What should you see?</h2>\n<p>The heading should appear at the top of the page, followed by the paragraph text. The heading text should be larger. The title should appear in the browser window tab.</p><p>\n<img alt=\"Image of the boiler example above rendered in Google Chrome\" src=\"/static/images/lessons/html-css/boiler-example.png\"/></p>", "order": 5}}, {"model": "lesson.lesson", "pk": 492, "fields": {"title": "Links", "created": "2020-07-15T22:01:40.124Z", "updated": "2020-07-15T22:01:40.124Z", "workshop": 56, "text": "<p>Links are the foundation of the World Wide Web, and thus are an important component of most websites. Hyperlinking text enables users to move between the different webpages on your site (sometimes in the form of a menu or navigation bar), or connect to other resources or information on other websites.</p><p>\nThe <code>&lt;a&gt;</code> tag, or <strong>anchor tag</strong>, creates a link to another document. You can use the <code>&lt;a&gt;</code> tag to link to other documents or webpages you created for the same site or to documents located elsewhere on the web. You can also use it to link to a particular location on a page\u2014we'll see an example of this in the section on classes and ids.</p>\n<h2>Option One: Relative Links</h2>\n<p>Relative links take the current page as an origin point and search for other files within the same folder or directory. This method is useful for creating links to pages within your own site.</p><p>\nThe following appears as a link to the <code>about.html</code> page in the same folder as <code>index.html</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"about.html\"</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>On your webpage it will appear as:</p>\n<blockquote>\n<p><a href=\"#\">About</a></p><p>\nThis link is asking the browser to look for a file titled <code>about.html</code> in the same folder. If a file named <code>about.html</code> is not in the same folder, clicking the link will result in a <code>404</code> (\"Page Not Found\") error.</p>\n</blockquote>\n<h2>Option Two: Absolute Links</h2>\n<p>An absolute link includes information that allows the browser to find resources on other websites. This information includes the site domain\u2014such as <code>google.com</code>\u2014and often the protocol\u2014such as <code>http</code> or <code>https</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://www.google.com\"</span><span class=\"p\">&gt;</span>Google<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>On your webpage it will appear as:</p>\n<blockquote>\n<p><a href=\"http://www.google.com\">Google</a></p><p>\nThis pathway is directing your browser to look online for this text document at the URL address provided.</p>\n</blockquote>\n<h2>More on links</h2>\n<p>Each example above includes an <code>href</code> tag. The <code>href</code> tag, short for hypertext reference, is an example of an <strong>attribute</strong>. Attributes offer secondary information about an element.</p><p>\nThe <code>&lt;a&gt;</code> tag, or anchor tag, creates a link. The text within the <code>&lt;a&gt;</code> and <code>&lt;/a&gt;</code> tags, the anchor text, is what a visitor to the site will see and can click on. The <code>href=</code> attribute tells the browser where the user should be directed when they click the link.</p><p>\nThere is another technical difference between the two options above.</p>\n<h2>Relative vs. Absolute Links: When to use which</h2>\n<p>Use relative links when referring to pages on your own site. The main advantage of using relative links to pages on your site is that your site will not break if it is moved to a different folder or environment.</p>\n<h2>Activity</h2>\n<ol>\n<li>Create a new text file called <code>about.html</code> in your <code>htmlpractice</code> folder. Copy over the HTML from your <code>index.html</code> file, but change the text in the <code>&lt;h1&gt;</code> element to \"About.\"</li>\n<li>In your <code>index.html</code> file, add a relative link leading to your About page.</li>\n<li>Also add a relative link from your <code>About page</code> to your <code>index.html</code> page. In this link, call your <code>index.html</code> page <code>Home</code> (Reminder: <code>index.html</code> is the default homepage)</li>\n<li>Lastly, include an absolute link to a page of your choosing. Remember that an absolute link includes the protocol (for example, <code>http:</code>) and also a domain (for example, <code>cuny.edu</code>), such as <code>http://cuny.edu/about</code>.</li>\n<li>Re-save your text files and reopen or refresh them in your browser.</li>\n</ol>\n<h2>Check if it worked</h2>\n<p>When your pages are updated, you should be able to navigate from your Home page to your About page, and vice versa. You should also be able to navigate to the external web page.</p>", "order": 6}}, {"model": "lesson.lesson", "pk": 493, "fields": {"title": "Images", "created": "2020-07-15T22:01:40.126Z", "updated": "2020-07-15T22:01:40.126Z", "workshop": 56, "text": "<p>Images are another important component of websites. Sometimes these just help bring your website to life, but other times they can help communicate information to users.</p><p>\nImages are created with the <code>&lt;img&gt;</code> tag. Similar to the <code>&lt;a&gt;</code> tag, <code>&lt;img&gt;</code> requires an attribute, in this case <code>src</code>. The <code>src</code> attribute stands for \"source\" and communicates secondary information to your browser that identifies and locates the image. Unlike many other tags, the <code>&lt;img&gt;</code> tag does not need to be closed, making it an example of a void tag.</p><p>\nThe following element pulls in an image located in the same folder as the <code>.html</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"scream.jpeg\"</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n<p>The same rules apply here as with the <code>href</code> attribute: if the image is not located in the same folder as the document you are writing in, the browser won't find it. If the browser cannot find an image resource, you will see a broken image icon, such as this one from Chrome:</p><p>\n<img alt=\"Chrome broken image icon\" src=\"/static/images/lessons/html-css/broken.png\"/></p><p>\nNote: Some sites use a lot of images. When this is the case, it can be helpful to keep images in a separate folder within your site's structure. To enable the browser to find an image in that case, just add the directory in front of the file name. For example, if you have a folder named images in the same folder as your index.html file, and scream.jpeg is in that folder, you'd change the void tag above to <code>&lt;img src=\"/images/scream.jpeg\" /&gt;</code>.</p>\n<h2>Making images accessible</h2>\n<p>As briefly noted earlier, alternative text, or alt text, is descriptive \"text associated with an image that serves the same purpose and conveys the same essential information as the image\" (see <a href=\"https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Accessibility/Alternative_text_for_images\">Wikipedia Manual of Style/Accessibility/Alternative Text for Images</a> for more), and is important for ensuring content conveyed by images is accessible to all.</p><p>\nTo add alternative text to an image, you add an additional attribute, <code>alt</code> followed by your descriptive text. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"filename.png\"</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">\"Text in these quotes describes the image\"</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n<p>For more information, see what the <a href=\"https://www.ssa.gov/accessibility/files/SSA_Alternative_Text_Guide.pdf\">Social Security Administration</a> has to say.</p>\n<h2>What images can I use on my site?</h2>\n<p>If you're planning to use images that you did not take or make yourself, you'll need to use \"public domain\" or \"open license\" images.</p><p>\nThis <a href=\"https://openlab.citytech.cuny.edu/blog/help/following-copyright-guidelines-for-images/\">guide by the OpenLab at City Tech</a> includes more information on licensure and a list of places where you can find reuseable images.</p>\n<h2>Activity</h2>\n<p>Download and save an image from the web, or move an image from your computer into the same folder as your <code>index.html</code> file.</p><p>\nTip: Give the file a simple name. Also, the name <strong>cannot</strong> have spaces. A good practice is to use either dashes or underscores where there would otherwise be spaces. For example: <code>this-is-an-image.jpg</code> or <code>this_is_an_image.jpg</code>.</p><p>\nUsing the code above as a reference, add that image into your <code>index.html</code> file, re-save the file, and re-open or refresh the page in your browser. Your image should now appear on the page.</p>", "order": 7}}, {"model": "lesson.lesson", "pk": 494, "fields": {"title": "Conventions", "created": "2020-07-15T22:01:40.127Z", "updated": "2020-07-15T22:01:40.127Z", "workshop": 56, "text": "<p>As we\u2019ve gone through the different components of creating a webpage, you likely have noticed some common conventions or industry standards for creating a webpage using HTML. Can you guess any of these?</p><p>\nHere are a few examples:</p><p>\n- Some tags are self-closing, while others require a closing tag. Self-closing tags are called void tags, and are generally self-closing because you wouldn't need or want to add another element within a tag. They also generally end with a backslash (<code>/</code>) to mark the end of the tag.</p><p>\n- Use lower case. While HTML is not case sensitive, it makes scanning the code easier, and makes it look more consistent.</p><p>\n- Your code should be nested. This is not a technical necessity either \u2014 blank space has no meaning in html. However, this makes it easier to scan the code quickly, which is particularly helpful when you run into errors!</p>", "order": 8}}, {"model": "lesson.lesson", "pk": 495, "fields": {"title": "Challenge: Create an Institute Website", "created": "2020-07-15T22:01:40.129Z", "updated": "2020-07-15T22:01:40.129Z", "workshop": 56, "text": "<p>For this challenge, practice using the command line. If you need a reminder of which commands to use to create new folders and files, see <a href=\"_cli-reminder.md\">here</a>.</p><p>\nUsing the tags we've just reviewed, and two additional ones (see below) begin creating an introductory page for your future Institute.</p><p>\nIn your <code>projects</code> folder on your desktop, create a new folder called <code>website</code>. Create a <code>index.html</code> file inside that folder. This will be the homepage or landing page of your site.</p><p>\nAdd HTML to your <code>index.html</code> file. This page should include the following:</p><p>\n- Doctype</p><p>\n- Root element</p><p>\n- Head and a body</p><p>\n- Title for the page</p><p>\n- One heading</p><p>\n- One paragraph</p><p>\n- One image</p><p>\n- A menu or navigation bar that links to your Home and About pages</p><p>\nThink about the order of your content as you assemble the body of your page.</p><p>\nDon't worry about getting the content just right, as much as using this exercise to review the structure of a webpage, and practice creating a webpage.</p>\n<h2>Additional Tags</h2>\n<p>Here are two additional tags that might come in handy in assembling your page:</p><p>\nTo make a list, you open and close it with the <code>ul</code> tags, and each item is an enclosed <code>li</code> tag:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> item 1 <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> item 2 <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> item 3 <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>The HTML above will produce an unordered (bulleted) list. To create an ordered (numbered) list instead, just substitute <code>&lt;ol&gt;</code> and <code>&lt;/ol&gt;</code> for <code>&lt;ul&gt;</code> and <code>&lt;/ul&gt;</code>.</p><p>\n(This may come in handy when making your menu or navigation bar.)</p><p>\nTo make a line break or give space between different elements:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">br</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n<h2>Further challenge</h2>\n<p>Finished early? Play around with other tags by referring to this <a href=\"http://www.simplehtmlguide.com/cheatsheet.php\">HTML cheatsheet</a>.</p>", "order": 9}}, {"model": "lesson.lesson", "pk": 496, "fields": {"title": "CSS Basics", "created": "2020-07-15T22:01:40.130Z", "updated": "2020-07-15T22:01:40.130Z", "workshop": 56, "text": "<p>CSS stands for Cascading Style Sheets. This language works in coordination with HTML, but is its own language with its own rules and terminology. In contrast to HTML, which is responsible for the content of the page, CSS is responsible for the presentation of the page.</p><p>\nExamples of what CSS can help you determine include:</p><p>\n- What background color you want to use for the page or a paragraph.</p><p>\n- What font or font size you want for your headings or your normal text.</p><p>\n- How large you want the images, and whether you want them aligned center, left, or right.</p><p>\n- Where elements appear on the page.</p><p>\n- Whether elements are visible to a user or not.</p>", "order": 10}}, {"model": "lesson.lesson", "pk": 497, "fields": {"title": "Integrating CSS and HTML", "created": "2020-07-15T22:01:40.132Z", "updated": "2020-07-15T22:01:40.132Z", "workshop": 56, "text": "<p>In order for CSS to inform the style of the content on the page, it must be integrated with your HTML. CSS can be integrated into your HTML in three ways: inline, internal, and external.</p>\n<h2>Option one: inline</h2>\n<p>Inline styling adds CSS directly into the HTML of a page to adjust the style of particular parts of a page.</p><p>\nFor example, if you want the text of your first paragraph to be red, but the text of your second paragraph to be blue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">\"color: red\"</span><span class=\"p\">&gt;</span>\n            Content of paragraph\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">\"color: blue\"</span><span class=\"p\">&gt;</span>\n            Content of paragraph\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<h2>Option two: internal</h2>\n<p>Internal styling also adds CSS directly into the HTML, but keeps it separate from the content code of the page by adding it into the head using the <code>&lt;style&gt;</code> tag. When using internal styling you are providing styling rules for the entire page. For example, if you want all headings to be blue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n            <span class=\"nt\">h1</span> <span class=\"p\">{</span>\n              <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">blue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n            Heading One\n        <span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n            Content of paragraph\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n            Heading Two\n        <span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n            Content of paragraph\n        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<h2>Option three: external (recommended)</h2>\n<p>External styling creates a completely separate document for your CSS that will be linked to your HTML in the head section of your HTML document using the code below. This separate document is called a <strong>stylesheet</strong> and should be named <code>style.css</code>. This document must be stored in the same folder as the HTML document it is linked to.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>CSS Example<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"style.css\"</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<h2>Best practices</h2>\n<p>It's best practice to use Option 3, external styling, for a number of reasons:</p><p>\n1. It helps us remember what each language focuses on: HTML is for <em>content</em>, CSS is for <em>styling</em>. (This is sometimes referred to as <a href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\">\"separation of concerns\"</a>)</p><p>\n2. It helps us maintain consistency across the various pages of our site; multiple HTML files can link to the same CSS file.</p><p>\n3. Because multiple HTML files can link to the same CSS file, it's not necessary to write the same CSS code multiple times. Once suffices.</p><p>\nOption 3, external styling, is preferred by most web developers because it's more manageable and because it lends itself to greater consistency across the entire site.</p>", "order": 11}}, {"model": "lesson.lesson", "pk": 498, "fields": {"title": "Rule Sets", "created": "2020-07-15T22:01:40.135Z", "updated": "2020-07-15T22:01:40.135Z", "workshop": 56, "text": "<p>CSS is based on selectors and declarations, which together form rule sets (or just \"rules\"). Rule sets (included in a .css file) look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">orange</span><span class=\"p\">;</span>\n    <span class=\"k\">font-style</span><span class=\"p\">:</span> <span class=\"kc\">italic</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"kc\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"k\">font-style</span><span class=\"p\">:</span> <span class=\"kc\">normal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">#</span><span class=\"nn\">navbar</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n    <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">intro</span> <span class=\"p\">{</span>\n    <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">;</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">grey</span><span class=\"p\">;</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"n\">dark-grey</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The first rule (which starts with the <code>h1</code> selector) applies to all <code>&lt;h1&gt;</code> tags on each page where your HTML document links to your stylesheet, and changes the font style and display of those headings.</p><p>\nThe lines within the curly braces (i.e. <code>{ }</code>) are called <strong>declarations</strong>, and they change the formatting of the elements in the HTML document. Each line in the declaration sets the value for a <strong>property</strong> and ends with a semicolon (<code>;</code>).</p><p>\nNote the different syntax being used to select items for for styling with rule sets. The bottom two selectors are used to apply rule sets to <strong>ids</strong> and <strong>classes</strong>. In general, adding classes and ids to HTML elements allows for more specific styling \u2014 more on these soon!</p>\n<h2>What should happen?</h2>\n<p>The formatting of the text on your page should change accordingly. Your <code>&lt;h1&gt;</code> should be orange and italic, for example.</p><p>\nWhat are some other rules you might set for different HTML elements? Do a quick Google search for a CSS rule that changes the appearance of your page, such as putting a border around an element.</p>", "order": 12}}, {"model": "lesson.lesson", "pk": 499, "fields": {"title": "Filtering", "created": "2020-07-15T22:01:40.141Z", "updated": "2020-07-15T22:01:40.141Z", "workshop": 56, "text": "<p>Some of you may be wondering whether it matters what order you add the rule sets to your <code>style.css</code> document. The answer is no. CSS has an automatic filtering function where <strong>the most specific rule in CSS always takes precedence.</strong></p><p>\nSo if your stylesheet contained the following rule sets:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">p</span> <span class=\"nt\">strong</span> <span class=\"p\">{</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>...then the text of your paragraph would be green, but where the strong tag is found in the paragraph, the text would be bold and red. In other words, the more specific styling for the <code>&lt;strong&gt;</code> text in your paragraph will override the less specific styling of the paragraph in general. This would occur <strong>regardless of the order these rule sets appear in the stylesheet.</strong></p><p>\nThis rule also applies to how you integrate CSS into your HTML to style your content. For example, if you link to an external stylesheet, and you add inline or internal CSS into your HTML, the inline or internal CSS will override the rules set in the external stylesheet. Similarly, the inline CSS will override the internal CSS.</p>", "order": 13}}, {"model": "lesson.lesson", "pk": 500, "fields": {"title": "Classes and IDs", "created": "2020-07-15T22:01:40.144Z", "updated": "2020-07-15T22:01:40.144Z", "workshop": 56, "text": "<p>Classes and IDs enable more fine-grained styling by allowing you to define your own selectors. The difference between classes and IDs is that IDs are unique, used to identify one specific element or part of an element, whereas classes are used to identify multiple instances of the same type of element.</p><p>\nBasically, if you're styling a part of your page that is unique, such as the navbar or footer, use an ID. If you're styling something that recurs in different places, like an info box or form field, use a class.</p><p>\nIncorporating classes and IDs into the styling of your document includes two steps:</p><p>\n1. Some HTML code that CSS selectors can refer back to must be added to your HTML document.</p><p>\n2. CSS rules that select that code must be added to your style sheet.</p><p>\nThe code for classes and IDs is different in both CSS and HTML.</p>\n<h2>HTML code</h2>\n<p>In HTML, classes and ids are added to the first part of a tag. Here's an example of what HTML code with classes and ids looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"navbar\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Home<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"football\"</span><span class=\"p\">&gt;</span>Football teams<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"football\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"colts\"</span><span class=\"p\">&gt;</span>Indianapolis Colts<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"football\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"packers\"</span><span class=\"p\">&gt;</span>Green Bay Packers<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"baseball\"</span><span class=\"p\">&gt;</span>Baseball teams<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>American League teams<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"baseball american\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"twins\"</span><span class=\"p\">&gt;</span>Minnesota Twins<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"baseball american\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"tigers\"</span><span class=\"p\">&gt;</span>Detroit Tigers<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>National League teams<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"baseball national\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"dodgers\"</span><span class=\"p\">&gt;</span>Los Angeles Dodgers<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"baseball national\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"mets\"</span><span class=\"p\">&gt;</span>New York Mets<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>Note that it's possible to assign more than one class to an element \u2014 just leave a blank space between the two classes, as in the baseball examples above.</p><p>\nBonus: ID selectors can be used to create links that can be used for navigation <em>within</em> a page. For example, to add a link to the page that takes the user directly to the line that reads \"New York Mets,\" we might write HTML like this: <code>&lt;a href=\"#mets\"&gt;Mets&lt;/a&gt;</code>.</p>\n<h2>CSS selectors</h2>\n<p>Class selectors in CSS are denoted with a period in front of the class name you're creating. They look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">#</span><span class=\"nn\">navbar</span> <span class=\"p\">{</span>\n  <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">white</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">football</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">;</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">lightgrey</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">baseball</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-weight</span><span class=\"p\">:</span> <span class=\"kc\">bold</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">green</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">.</span><span class=\"nc\">american</span> <span class=\"p\">{</span>\n  <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>ID selectors</h2>\n<p>...look like this in the CSS\u2014the name of the selector preceeded by a hashmark (<code>#</code>) (also known as a pound sign or octothorpe):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">#</span><span class=\"nn\">navbar</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">yellow</span><span class=\"p\">;</span>\n    <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>...and in the HTML they are incorporated into elements like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"navbar\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Home<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>About<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<h2>Tip</h2>\n<p><em>If you run into an error, be sure to check your punctuation. Oftentimes the problem is a typo, or overlooking a semi-colon, a period, etc.</em> See the <a href=\"?page=17\">Troubleshooting</a> section for more information on common issues.</p>", "order": 14}}, {"model": "lesson.lesson", "pk": 501, "fields": {"title": "Useful Properties", "created": "2020-07-15T22:01:40.146Z", "updated": "2020-07-15T22:01:40.146Z", "workshop": 56, "text": "<p>Below is a list of useful properties that can be modified with CSS, compiled by Digital Fellow <a href=\"http://smythp.com\">Patrick Smyth</a>. There are also <a href=\"https://courses.cs.washington.edu/courses/cse154/15sp/cheat-sheets/css-cheat-sheet.pdf\">CSS cheatsheets</a> available online.</p>\n<h2>Color</h2>\n<p>Determines text color. Can be a word or a hex value, like #FFFFFF:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">color</span><span class=\"o\">:</span> <span class=\"nt\">blue</span><span class=\"o\">;</span>\n<span class=\"nt\">color</span><span class=\"o\">:</span> <span class=\"p\">#</span><span class=\"nn\">000000</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Background color</h3>\n<p>Sets the background color of an element.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">background-color</span><span class=\"o\">:</span> <span class=\"nt\">pink</span>\n<span class=\"nt\">background-color</span><span class=\"o\">:</span> <span class=\"p\">#</span><span class=\"nn\">F601F6</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Text align</h3>\n<p>Aligns text to the left, center, or right.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">text-align</span><span class=\"o\">:</span> <span class=\"nt\">center</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Padding</h3>\n<p>The space between text and the \"box\" (<code>&lt;div&gt;</code>) surrounding it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">padding</span><span class=\"o\">:</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n<span class=\"nt\">padding-right</span><span class=\"o\">:</span> <span class=\"nt\">10px</span>\n</code></pre></div>\n<h3>Margin</h3>\n<p>The space between an element's box and the next element (or the edge of the page).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">margin</span><span class=\"o\">:</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n<span class=\"nt\">margin-top</span><span class=\"o\">:</span> <span class=\"nt\">10px</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Width and height</h3>\n<p>Sets the width or height of an element. Typically, don't set both of these.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">width</span><span class=\"o\">:</span> <span class=\"nt\">50</span><span class=\"o\">%;</span>\n<span class=\"nt\">height</span><span class=\"o\">:</span> <span class=\"nt\">40px</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Float</h3>\n<p>Determines if text wraps around an element.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">float</span><span class=\"o\">:</span> <span class=\"nt\">left</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Display</h3>\n<p>Determines if an element is treated as a block or inline element. Can also be set to <code>none</code>, which makes the element disappear.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">inline</span><span class=\"o\">;</span>\n<span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">block</span><span class=\"o\">;</span>\n<span class=\"nt\">display</span><span class=\"o\">:</span> <span class=\"nt\">none</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>List style</h3>\n<p>Determines default styling on lists. Usually best to set it to <code>none</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">list-style-type</span><span class=\"o\">:</span> <span class=\"nt\">none</span><span class=\"o\">;</span>\n</code></pre></div>\n<h3>Font family</h3>\n<p>Sets the font. Usually best to copy this from <a href=\"https://fonts.google.com/\">Google Fonts</a> or another web font repository.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">font-family</span><span class=\"o\">:</span> <span class=\"s1\">'Lato'</span><span class=\"o\">,</span> <span class=\"nt\">sans-serif</span><span class=\"o\">;</span>\n</code></pre></div>", "order": 15}}, {"model": "lesson.lesson", "pk": 502, "fields": {"title": "Challenge: Styling your Institute Website with CSS", "created": "2020-07-15T22:01:40.148Z", "updated": "2020-07-15T22:01:40.148Z", "workshop": 56, "text": "<p>Using the CSS basics we've just reviewed, and the list of properties found on the <a href=\"?page=15\">Properties page</a> and online, give your website some styling.</p><p>\nI encourage you to use an external stylesheet with classes and IDs to style particular aspects of your site more specifically, but feel free to also play around with inline and internal styling if desired.</p>", "order": 16}}, {"model": "lesson.lesson", "pk": 503, "fields": {"title": "Troubleshooting", "created": "2020-07-15T22:01:40.153Z", "updated": "2020-07-15T22:01:40.153Z", "workshop": 56, "text": "<p>It is common\u2014especially in the beginning\u2014that you'll add or amend something to/in your text editor, but it won't present when rendered by your browser.</p><p>\nYour first inclination should be to scan the text in your editor for errors. Nesting will help tremendously with this task. Oftentimes it is as little as forgetting a semicolon or closing tag.</p><p>\nAnother investigative tactic is to <strong>View Page Source</strong> on the page opened in the browser.</p><p>\nIf you think it is an <strong>error with the HTML</strong>, you'll be able to see it there.</p><p>\nIf you think it is an <strong>error with the CSS</strong>, then from the Page Source you'll need to click on the link for the <code>style.css</code> page. The link to this page should be found in the head of your page. Don't see it? That may be the problem! If you do see it, open the link to see what CSS the browser is reading and applying to your HTML. It should match what you have in your text editor. If it looks like an earlier version of your style sheet, then maybe you need to re-save the document.</p>", "order": 17}}, {"model": "lesson.lesson", "pk": 504, "fields": {"title": "Workshop Summary", "created": "2020-07-15T22:01:40.158Z", "updated": "2020-07-15T22:01:40.158Z", "workshop": 56, "text": "<p>Through this workshop, you have learned the basics of two of the most commonly-used languages for building on the web: HTML and CSS.</p><p>\nHTML, or Hypertext Markup Language, organizes content on your page using <a href=\"?page=4\">elements denoted by tags (<code>&lt; &gt;</code>)</a>. When rendered by your browser, these tags tell your browser that certain content is paragraph text, while other content is heading or title text, and so on. You can also use <a href=\"?page=7\">image (<code>&lt;img&gt;</code>)</a> and <a href=\"?page=6\">link or anchor (<code>&lt;a&gt;</code>)</a> tags to tell the browser to render an image on the page, or take the visitor to another page on your or another website. We also discussed some important <a href=\"?page=8\">conventions</a> to consider when creating HTML documents, such as nesting.</p><p>\nCSS, or Cascading Style Sheets, allows for further styling of your website through the application of a series of <a href=\"?page=12\">rule sets</a> that are applied to different aspects/elements of your site. In order for CSS to render on a webpage, it must be <a href=\"?page=11\">integrated with your html</a>, which can happen in three ways: inline, internal, and external. CSS rules can be of varying specificity, and in particular, through creating <a href=\"?page=14\">classes and ids</a>. We also discussed how the ordering of rule sets doesn't matter, because an important function of CSS is the way it filters and applies rules in accordance with the specificity of the rule.</p><p>\nThrough understanding these languages in combination with one another, you can also reframe your understanding of the web\u2014not as <em>poof! magic!</em>, but as a series of intentionally styled, hyperlinked text documents, with each website representing a folder of documents.</p><p>\nWhile this is a good starting point, one important question remains: how can I get these text documents on the Internet so they can be accessed, and interacted with, and linked to by others?</p>", "order": 18}}, {"model": "lesson.lesson", "pk": 505, "fields": {"title": "Making your Website Public", "created": "2020-07-15T22:01:40.161Z", "updated": "2020-07-15T22:01:40.162Z", "workshop": 56, "text": "<p>Great job! Now you have an amazing website, but it's stuck on your computer where no one else can find it or view it. How do you get your website onto the Internet so it can be shared?</p><p>\nTo get your site on the internet, you'll need <strong>hosting</strong> \u2014 that is, a remote computer that will stay on day in and day out to serve the website to visitors. In theory, you could host your website on your own computer, but in practice, it usually makes sense to purchase hosting from a hosting company or use a free service.</p><p>\nYou'll also need a way of getting your website to your host. That's where FTP, or File Transfer Protocol, comes in.</p>\n<h2>FTP</h2>\n<p>FTP is a protocol used to share files from your computer (<em>a client</em>) to another computer called a server, and back again over the Internet. This is something we do ALL THE TIME, but we refer to it as \"uploading\" and \"downloading.\"</p><p>\nNote: Though FTP stands for file transfer protocol, you are not really transfering or moving your files from your computer; instead they are <em>copied</em> to the server. Fear not!</p><p>\nIn order to transfer your website files (also called your website's directory) to a server you will need:</p><p>\n1. Access to the Internet.</p><p>\n2. An FTP Client.</p><p>\n3. A server that is connected to the Internet where you can send your files.</p><p>\nAssuming you all can manage accessing the internet on your own, let's focus on the latter two.</p>\n<h3>FTP client</h3>\n<p>An <strong>FTP client</strong> is software designed specifically for the purpose of sharing files between computers. There are widely-used, freely-available GUI applications (i.e., applications that use a graphic user interface, or the point-and-click, user-friendly software interfaces you are used to) that you can download for use, including <a href=\"https://filezilla-project.org/\">Filezilla</a> and <a href=\"https://cyberduck.io/\">Cyberduck</a>. You can also run an FTP client program through the command line on most computers, though the process varies by operating system.</p>\n<h3>Other Resources about FTP</h3>\n<ul>\n<li><a href=\"https://www.wired.com/2010/02/ftp_for_beginners/\">FTP for Beginners, <em>Wired</em></a></li>\n<li><a href=\"https://www.makeuseof.com/tag/free-ftp-clients-windows/\">The Three Best FTP Clients for Windows</a></li>\n<li><a href=\"http://www.techradar.com/how-to/software/operating-systems/how-to-use-ftp-through-the-command-line-in-mac-os-x-1305664\">How To Use FTP Through the Command Line in Mac OS X</a></li>\n<li><a href=\"https://beebom.com/how-to-use-mac-terminal-ftp-sftp-client/\">How to Use the Mac Terminal as an FTP or SFTP Client</a></li>\n</ul>\n<h2>Web hosting</h2>\n<p>You also need a server to transfer your files to, where they can be stored and shared on the Internet. This is what we call <strong>web hosting</strong> and there are multiple options here as well. The GCDI (CUNY Graduate Center Digital Initiatives) website contains a list of <a href=\"https://gcdi.commons.gc.cuny.edu/digital-resource-guide/#cloud\">low-cost cloud hosting services for students</a>. As long as your site is just plain HTML and CSS, it's also possible to host your website for free on services such as <a href=\"https://pages.github.com/\">GitHub Pages</a>.</p>\n<h3>Web hosting services</h3>\n<ul>\n<li><a href=\"https://www.makeuseof.com/tag/best-web-hosting-services/\">The Best Web Hosting Services</a></li>\n<li><a href=\"https://www.makeuseof.com/tag/top-7-easy-and-free-web-hosting-services/\">Top 7 Easy and Free Web Hosting Services</a></li>\n<li><a href=\"https://www.makeuseof.com/tag/free-web-hosting-is-bad/\">10 Ways That Free Web Hosting Is Bad for Your First Website</a></li>\n</ul>", "order": 19}}, {"model": "lesson.lesson", "pk": 506, "fields": {"title": "Resources", "created": "2020-07-15T22:01:40.164Z", "updated": "2020-07-15T22:01:40.164Z", "workshop": 56, "text": "<h2>Cheatsheets</h2>\n<p><a href=\"http://www.simplehtmlguide.com/cheatsheet.php\">HTML Cheatsheet</a></p><p>\n<a href=\"https://courses.cs.washington.edu/courses/cse154/15sp/cheat-sheets/css-cheat-sheet.pdf\">CSS Cheatsheet</a> </p>\n<h2>Tutorials</h2>\n<p><a href=\"https://www.w3schools.com/html/default.asp\">HTML Tutorial</a></p><p>\n<a href=\"https://www.w3schools.com/css/default.asp\">CSS Tutorial</a> </p>\n<h2>Other</h2>\n<p><a href=\"https://www.codeschool.com/beginners-guide-to-web-development\">Code School's Beginner's Guide to Web Development</a></p><p>\n<a href=\"https://www.w3.org/standards/webdesign/accessibility\">Web Development with Accessibility in Mind</a></p><p>\n<a href=\"https://www.webdesign-inspiration.com/\">Web Design Inspiration</a></p><p>\n<a href=\"https://www.youtube.com/playlist?annotation_id=annotation_698551941&amp;feature=iv&amp;list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI&amp;src_vid=WX0MpDuUqqw\">YouTube Series: How to Build a Responsive Website from Start to Finish</a></p>", "order": 20}}, {"model": "lesson.challenge", "pk": 86, "fields": {"lesson": 497, "title": "", "text": "<p>Create a stylesheet using the command line (following option 3, external styling, described above). In your <code>index.html</code> document, link to your style sheet and re-save the file.</p>\n<p>If you need a reminder on which commands to use to create your new stylesheet file, see <a href=\"_cli-reminder2.md\">here</a>.</p>\n<p>To link your stylesheet with your <code>index.html</code> file, insert the following code into the head element of that <code>index.html</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;style.css&quot;</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>"}}, {"model": "lesson.challenge", "pk": 87, "fields": {"lesson": 498, "title": "", "text": "<p>Copy and paste the CSS above into your <code>style.css</code> file and re-save the file. Then open or refresh your <code>index.html</code> file in your browser and see what happens.</p>"}}, {"model": "lesson.challenge", "pk": 88, "fields": {"lesson": 502, "title": "", "text": "<ul>\n<li>Change the color and size of your heading text.</li>\n<li>Change the font of your paragraph text.</li>\n<li>Change the background color of your navigation bar or menu.</li>\n<li>Center your image on your page.</li>\n<li><a href=\"_navbar-hint.md\">Shape up your navigation bar.</a></li>\n</ul>\n<p><strong>Reminder:</strong> After creating a stylesheet, you must link it to all HTML documents that you want this styling to apply to. You can do so with the <code>&lt;link&gt;</code> tag:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text/css&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;style.css&quot;</span> <span class=\"p\">/&gt;</span>\n</code></pre></div>\n\n\n<p>This will tell your HTML document to apply the style rules from the text file named <code>style.css</code> in the same folder.</p>"}}, {"model": "frontmatter.learningobjective", "pk": 389, "fields": {"frontmatter": 56, "label": "Familiarize themselves with the anatomy of a webpage and how the Internet works."}}, {"model": "frontmatter.learningobjective", "pk": 390, "fields": {"frontmatter": 56, "label": "Understand the basics of the HTML and CSS markup languages.    "}}, {"model": "frontmatter.learningobjective", "pk": 391, "fields": {"frontmatter": 56, "label": "Use HTML, CSS, and a text editor to build a small website."}}, {"model": "frontmatter.contributor", "pk": 206, "fields": {"first_name": "Kristen", "last_name": "Hackett", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 207, "fields": {"first_name": "Patrick", "last_name": "Sweeney", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 208, "fields": {"first_name": "Patrick", "last_name": "Smyth", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 209, "fields": {"first_name": "Amy", "last_name": "Cavender", "role": null, "url": null}}, {"model": "frontmatter.contributor", "pk": 210, "fields": {"first_name": "Param", "last_name": "Ajmera", "role": null, "url": null}}, {"model": "library.reading", "pk": 304, "fields": {"title": "\"Understanding Web Pages and HTML\" on Programming Historian", "url": "https://programminghistorian.org/en/lessons/viewing-html-files", "annotation": "[\"Understanding Web Pages and HTML\" on Programming Historian](https://programminghistorian.org/en/lessons/viewing-html-files)", "zotero_item": null}}, {"model": "library.reading", "pk": 305, "fields": {"title": "\"How to build a responsive website from start to finish\" on DevTips", "url": "https://www.youtube.com/playlist?annotation_id=annotation_698551941&feature=iv&list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI&src_vid=WX0MpDuUqqw", "annotation": "[\"How to build a responsive website from start to finish\" on DevTips](https://www.youtube.com/playlist?annotation_id=annotation_698551941&feature=iv&list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI&src_vid=WX0MpDuUqqw)", "zotero_item": null}}, {"model": "library.project", "pk": 144, "fields": {"title": "Digital Humanities Research Institute", "url": "https://www.dhinstitutes.org", "annotation": "[Digital Humanities Research Institute](https://www.dhinstitutes.org/)", "zotero_item": null}}, {"model": "library.project", "pk": 145, "fields": {"title": "Colored Conventions", "url": "https://coloredconventions.org", "annotation": "[Colored Conventions](https://coloredconventions.org/)", "zotero_item": null}}, {"model": "library.project", "pk": 146, "fields": {"title": "Musical Passages", "url": "http://www.musicalpassage.org", "annotation": "[Musical Passages](http://www.musicalpassage.org/)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 157, "fields": {"label": "\"Understanding Web Pages and HTML\" on Programming Historian", "url": "https://programminghistorian.org/en/lessons/viewing-html-files", "annotation": "[\"Understanding Web Pages and HTML\" on Programming Historian](https://programminghistorian.org/en/lessons/viewing-html-files)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 158, "fields": {"label": "\"How to build a responsive website from start to finish\" on DevTips", "url": "https://www.youtube.com/playlist?annotation_id=annotation_698551941&feature=iv&list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI&src_vid=WX0MpDuUqqw", "annotation": "[\"How to build a responsive website from start to finish\" on DevTips](https://www.youtube.com/playlist?annotation_id=annotation_698551941&feature=iv&list=PLqGj3iMvMa4KQZUkRjfwMmTq_f1fbxerI&src_vid=WX0MpDuUqqw)", "zotero_item": null}}, {"model": "library.reading", "pk": 306, "fields": {"title": "\"Exhibiting and Cataloguing\"", "url": "https://darc.gcdiprojects.org/Exhibiting_and_Cataloguing", "annotation": "[\"Exhibiting and Cataloguing\"](https://darc.gcdiprojects.org/Exhibiting_and_Cataloguing), DARC Wiki, Digital Archives Research Collective.", "zotero_item": null}}, {"model": "library.reading", "pk": 307, "fields": {"title": "\"What is a CMS?\"", "url": "https://darc.gcdiprojects.org/What_is_a_CMS%3F", "annotation": "[\"What is a CMS?\"](https://darc.gcdiprojects.org/What_is_a_CMS%3F), DARC Wiki, Digital Archives Research Collective. ", "zotero_item": null}}, {"model": "library.reading", "pk": 308, "fields": {"title": "\u201cBy Design: Remapping the Colonial Archive\u201d", "url": "https://doi.org/10.1215/01642472-3315838", "annotation": "Elizabeth Maddock Dillon, [\u201cBy Design: Remapping the Colonial Archive\u201d](https://doi.org/10.1215/01642472-3315838), _Social Text_ 33, no. 4 125 (2015): 142\u2013147.", "zotero_item": null}}, {"model": "library.reading", "pk": 309, "fields": {"title": "\u201cChoosing a Platform for Your Project Website\u201d", "url": "http://digitalhumanities.berkeley.edu/blog/13/12/04/choosing-platform-your-project-website", "annotation": "[\u201cChoosing a Platform for Your Project Website\u201d](http://digitalhumanities.berkeley.edu/blog/13/12/04/choosing-platform-your-project-website), Digital Humanities at Berkeley.", "zotero_item": null}}, {"model": "library.reading", "pk": 310, "fields": {"title": "\u201cHow I Learned How to Stop Worrying and Pickle Websites: The Art of Fermenting the Web with Archive-It and Webrecorder\u201d", "url": "jitp.commons.gc.cuny.edu/how-i-learned-how-to-stop-worrying-and-pickle-websites-the-art-of-fermenting-the-web-with-archive-it-and-webrecorder", "annotation": "Klein, Stephen. [\u201cHow I Learned How to Stop Worrying and Pickle Websites: The Art of Fermenting the Web with Archive-It and Webrecorder\u201d](jitp.commons.gc.cuny.edu/how-i-learned-how-to-stop-worrying-and-pickle-websites-the-art-of-fermenting-the-web-with-archive-it-and-webrecorder/), _The Journal of Interactive Technology and Pedagogy_, 2016.", "zotero_item": null}}, {"model": "workshop.workshop", "pk": 57, "fields": {"name": "Git", "slug": "git", "created": "2020-07-15T22:01:46.791Z", "updated": "2020-07-15T22:01:46.791Z", "parent_backend": "Github", "parent_repo": "DHRI-Curriculum/git", "parent_branch": "v2.0-kristen-edits", "views": 0}}, {"model": "frontmatter.frontmatter", "pk": 57, "fields": {"workshop": 57, "abstract": "Git is version control software used to track the state of files associated with a project. Users can take snapshots of files, travel through the history of a project, collaborate transparently with others, and easily keep compatible data in many locations. Combined with GitHub, a cloud service, Git also becomes a way of finding and publishing text, including writing and code.\nIn this session, we'll learn what makes Git such a powerful tool for both collaborative and individual projects. We will share a conceptual overview of Git and GitHub, explore fundamental concepts such as committing and pushing, and explore practical applications of GitHub for writing and coding. This session will show how to use Git and GitHub for a variety of digital undertakings, including collaborating with others, finding code for use in your projects, and sharing your work publicly. This session covers initializing Git repositories, committing changes, pushing to GitHub, and cloning repositories to your local machine.", "estimated_time": 0, "projects": [147, 148, 149, 150, 151, 152], "resources": [], "readings": [311, 312, 313, 314, 315], "contributors": [211, 212], "prerequisites": []}}, {"model": "praxis.praxis", "pk": 57, "fields": {"discussion_questions": "['What does your current version control workflow look like and what are the challenges it poses; or how could it be improved?', 'How can git support the work you are already doing? ', 'What additional opportunities does git and/or GitHub and/or Markdown create for your teaching, research or other scholarly work? ', 'What are the potential benefits and pitfalls of working in the open on the web via a platform like GitHub?']", "next_steps": "[]", "workshop": 57, "further_readings": [], "more_projects": [], "more_resources": [], "tutorials": [159, 160]}}, {"model": "lesson.lesson", "pk": 507, "fields": {"title": "What are Git, GitHub and Markdown?", "created": "2020-07-15T22:01:46.799Z", "updated": "2020-07-15T22:01:46.799Z", "workshop": 57, "text": "<h2>What is Git?</h2>\n<p><strong>Git</strong> is software used for version control\u2014that is, tracking the state of files and changes you make to them over time. Git can be enabled in a folder, and then used to save the state of the contents in that folder at different points in the future, as designated by you. In the language of Git, a folder is called a <em>repository</em>. In the context of this workshop, it refers to a folder that is being tracked by Git. Using Git, you can view a log of the changes you've made to the files in a repository and compare changes over time. You can also revert back to previous versions, and create branches of a project to explore different futures. Git is also useful for collaboration, as a repository can be shared across computers, and its contents can be asynchonously developed and eventually merged with the main project. </p>\n<h2>What is GitHub?</h2>\n<p><strong>GitHub</strong> is a online platform for hosting Git repositories. It functions for some, predominantly programmers, as a social network for sharing and collaborating on code-based projects. Users can share their own projects, as well as search for others, which they can then often work on and contribute to. Digital Humanists, librarians, and other academics are also finding ways Git and GitHub are useful in writing projects and teaching. GitHub also serves as a web-hosting platform, allowing users to create websites from their repositories.</p>\n<h2>What is Markdown?</h2>\n<p>Markdown is a markup language for formatting text. Like HTML, you add markers to plain text to style and organize the text of a document.</p>\n<div class=\"codehilite\"><pre><span></span><code>In HTML: \n<span class=\"nt\">&lt;h1&gt;</span> Heading 1 <span class=\"nt\">&lt;/h1&gt;</span>\nIn Markdown:\n# Heading 1\n</code></pre></div>\n<p>Whereas you use HTML and CSS with WordPress, you use Markdown with GitHub. Markdown has fewer options for marking text than HTML. It was designed to be human-readable, meaning easy to write and edit. </p><p>\nThis file you are reading is written in markdown\u2014<a href=\"https://raw.githubusercontent.com/DHRI-Curriculum/git/master/sections/concept.md\">here</a> is what it looks like in its raw, unrendered form.</p><p>\nCompare that with this - the source code for the GitHub page, written in HTML: view-source:https://github.com/DHRI-Curriculum/git</p><p>\nMarkdown is also arguably more sustainable and accessible than formats like <code>.docx</code> because of its simplicity and related ability to be read across multiple platforms. Use of Markdown is also supported by document-conversion tools like <a href=\"https://pandoc.org/\">Pandoc</a> that can change a markdown file to an epub with one command entered into your terminal.</p>\n<h2>Highlighting Distinctions</h2>\n<p>As we move forward its important to make sure we're firm on the distinctions between the three different tools outlined above. </p><p>\n<strong>Git</strong> is a software that you use on your laptop, or your local computer/machine. The repository with your project's files is stored on your hard drive. You also edit the text files on your local machine using a plain text editor, which is another software on your local machine like VS Code. </p><p>\n<strong>GitHub</strong> is a cloud-based platform that you access through your internet browser. Even though you physically are still in the same place, working on your laptop, you are no longer working on your local machine, you are on the Internet. This is a fundamentally different location than when you're working with your Git repository and editing and creating files in your plain text editor. With GitHub, you are uploading your repository - as described above - from your local machine to this platform on the Internet to be shared more broadly. You can also create private repositories if you want to use GitHub to backup a project.</p><p>\n<strong>Markdown</strong> is the language used to format the plain text files in your Git-enabled repository. GitHub reads this language so that the markups made to the file are rendered when you view your file on the platform (i.e. #headers appears as headers, links are inserted).</p>", "order": 1}}, {"model": "lesson.lesson", "pk": 508, "fields": {"title": "What You Can Do with Git and GitHub", "created": "2020-07-15T22:01:46.802Z", "updated": "2020-07-15T22:01:46.802Z", "workshop": 57, "text": "<p>A <a href=\"https://digitalscholarship.files.wordpress.com/2016/07/spirosmithdh2016githubpresentationfinal.pdf\">study of how Digital Humanists use GitHub</a>, conducted by Lisa Spiro and Sean Morey Smith, found that a wide range of users, including professors, research staff, graduate students, IT staff, and librarians commonly used the site in their DH work. They used GitHub for a diverse range of activities, such as:</p><p>\n- Developing software</p><p>\n- Sharing data sets</p><p>\n- Creating websites</p><p>\n- Writing articles and books</p><p>\n- Collating online resources</p><p>\n- Keeping research notes</p><p>\n- Hosting syllabi and course materials</p>\n<h2>Why Use GitHub?</h2>\n<p>Participants in the study said they found GitHub useful in their Digital Humanities work for several reasons. In particular, it facilitated: </p><p>\n- Sharing and backing up files on multiple computers</p><p>\n- Monitoring changes effectively</p><p>\n- Recovering from bugs or errors by going back in time before the error arose</p><p>\n- Using different branches for experiments and new directions</p><p>\n- Sharing and managing files with others\u2014seeing who added what content and when</p>\n<h2>How We Use GitHub:</h2>\n<h3>Sharing and Attribution</h3>\n<p>As you can see across these sessions, we use GitHub to host workshop curricula. Hosting sessions on GitHub allows you (and anyone else interested in these topics!) to follow our repositories, and create your own version of the workshop based on our materials. This fosters open scholarship and knowledge sharing. It also facilitates attribution and citation by clearly tracking which content was created by whom, when it was added, and which projects or materials are derived from others.</p>\n<h4>Case One: This Session</h4>\n<p>If you look just under the workshop title, <code>DHRI-Curriculum/git</code> at the top of this page, you can see it is <code>forked from pswee001/Git_DRI_Jan_2018</code>. That line shows that this particular repository is building on (<em>\"forked from\"</em>) the curriculum for a session I presented at our January 2018 Institute. If you then look at that repository, you will see that it is in turn forked from previous sessions that were developed by other GC Digital Fellows for workshops in past years. </p><p>\n<strong>Forking</strong> is a proper function of the GitHub platform. It supports collaboration by allowing you to copy someone else's repository to your own account on GitHub while maintaining a trail of attribution and derivation. This function is described in further detail in the final lesson of this workshop.</p>\n<h3>Collaborative Writing</h3>\n<p>Git is also used to track changes (<em>version control</em> in Git parlance) in writing projects, especially when there are multiple authors working asynchronously. It can be an alternative to using track changes in Microsoft Word, or comments and edits in a Google Doc.</p>\n<h4>Case Two: Coauthored Publications</h4>\n<p>Git and GitHub - together or independently - support multi-author publishing. Like we have done with the DHRI curriculum, you can have a shared project folder that multiple people are working from asynchronously, even on the same parts if they wanted, and then those different offshoots can be carefully folded back into the master project. This entails the process of creating <em>branches</em> and <em>merging</em>.</p><p>\nGit and GitHub also help with attribution by tracking individual contributions throughout. Additional branches could be created by a singular author as well, allowing the writer to explore different ways forward. The version control feature also allows authors to easily return to and compare older drafts or retrieve sections previoulsy discarded. </p><p>\n<strong>Branches</strong> and <strong>merging</strong> are important functionalities when using Git to collaborate, but they are also advanced and thus beyond the scope of this workshop. See the <em>Resources</em> section at the end of the workshop for more information.</p>\n<h3>Versions Across Time</h3>\n<p>How did you initially come by the syllabus you use for your class, and did you develop it over time? Many professors borrow and adapt from each other, and most of us probably update our syllabi each semester, even if only a little bit.</p><p>\nPut your hand up if you have a folder somewhere that looks something like this. Or even multiple folders. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">|</span>\n<span class=\"c1\">--Documents</span>\n   <span class=\"o\">|</span>\n   <span class=\"c1\">--syllabus.doc</span>\n   <span class=\"c1\">--syllabus2.doc </span>\n   <span class=\"c1\">--syllabusnew.doc </span>\n   <span class=\"c1\">--syllabusRevised.doc </span>\n   <span class=\"c1\">--syllabusFINAL.doc </span>\n   <span class=\"c1\">--syllabus?.doc </span>\n</code></pre></div>\n<p>Ok, hands down. </p><p>\n<strong>Consider the following questions as well:</strong></p><p>\n- Can you remember who you initially got this syllabus from?</p><p>\n- Do you know if there were other contributors along with or before them? </p><p>\n- Do you acknowledge prior contributors somewhere on your syllabus? </p><p>\n- Can you or others see what changes have been made to the syllabus over time? </p>\n<h4>Case Three: Syllabi</h4>\n<p>Increasingly we see that faculty are sharing their syllabi on GitHub. Some are even using GitPages that apply a user-friendly interface to their repository to make it easier to access and navigate for their students. This is because Git and GitHub make it easy to make contributors and changes to documents over time visible. </p><p>\nUsing Git and GitHub, you could fork that syllabi to your account, and download - or <em>clone</em> as Git calls it - it to your local machine to edit. After making changes to the files and and reuploading them or <em>pushing</em> them to the repo (short for repository) on GitHub, someone else could compare the changes you made and see who the original or additional contributors were. They could also decide to continue the chain by copying or forking your version, or decide to return to the original repo and fork that version. Both Git and GitHub help with attribution here; tracking who changes and adds what is a key feature of both tools.</p><p>\nEven if you were only working with your own self-created syllabus, like we'll do later in this workshop, Git and GitHub can be useful for tracking your changes without the hassle of multiple files. From one file, you can use Git to compare your current version with older versions; you can also compare and share these different versions on GitHub.</p><p>\n<strong>Cloning</strong> and <strong>pushing</strong> are proper functionalities of GitHub that describe how you communicate and share files between your local machine and the Internet. These are covered more in-depth in a later lesson in this workshop.</p>", "order": 2}}, {"model": "lesson.lesson", "pk": 509, "fields": {"title": "Review of the Command Line", "created": "2020-07-15T22:01:46.804Z", "updated": "2020-07-15T22:01:46.804Z", "workshop": 57, "text": "<p>During this workshop, you'll be communicating with GitHub from our local machine via the command line (terminal, bash). It will be useful if you've taken <a href=\"https://github.com/DHRI-Curriculum/command-line\">the Command Line Workshop</a> before continuing. This section reviews some of the basic commands that will also be used in this workshop.</p><p>\nIn addition to the command line, you'll be using your text editor and your browser. Before continuing, its important that we clearly distinguish between these three different spaces or environments:</p><p>\n- Your plain text editor where you'll be writing your syllabus in Markdown is on your local machine. </p><p>\n- That syllabus is intiailly saved in a git-enabled repository on your local machine.</p><p>\n- Your browser is where you'll be uploading your repository to GitHub.</p><p>\n- Your terminal is where you'll be communicating with GitHub to send the repository and project files back and forth between the web and your hard drive. </p><p>\nBecause you'll be moving between these three spaces throughout the workshop, you may want to use (command + tab) or (ctrl + tab) to move quickly between the three windows on your desktop.</p>\n<h2>Accessing the Terminal</h2>\n<h3>Mac OS</h3>\n<p>Press the space bar and the command key at the same time and type <code>terminal</code>. Press <code>Enter</code>.</p>\n<h3>Windows</h3>\n<p>Press the Windows button on your keyboard. When the search menu pops up, type <code>git bash</code> and press <code>Enter</code>.</p>\n<h2>Practice Navigating the Command Line</h2>\n<p>In this session, we will be making a syllabus and using Git to keep track of our revisions. Let's create a Git project folder</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"o\">&lt;</span><span class=\"n\">directory</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">&gt;</span> \n</code></pre></div>\n<p>will let you navigate inside a directory of your choosing.</p><p>\nType </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">Desktop</span>\n</code></pre></div>\n<p>and hit <code>Enter</code>. This will change your current working directory from <code>/Users/&lt;your-name&gt;</code> to <code>/Users/&lt;your-name&gt;/Desktop</code>.</p><p>\nTo check your current directory, type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">pwd</span>\n</code></pre></div>\n<p>Try this now to make sure you're in your Desktop directory.</p><p>\nNow, use </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"p\">..</span>\n</code></pre></div>\n<p>to go up one directory. In this case, this will take you back to your home directory.</p><p>\nPractice going back and forth between your Desktop and your home directory.</p><p>\nWhen finished, go to your Desktop folder and check that you're there with <code>pwd</code>.</p>\n<h2>Making a Git Project Folder</h2>\n<p>If you've worked through the command line session, you should see a <code>projects</code> folder on your desktop. Navigate into it with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">projects</span>\n</code></pre></div>\n<p>If you don't have a projects folder on your desktop, create one with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mkdir</span> <span class=\"n\">projects</span>\n</code></pre></div>\n<p>From <code>Desktop</code>, navigate into your <code>projects</code> folder. Then create a <code>git-practice</code> folder with the below command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mkdir</span> <span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">practice</span>\n</code></pre></div>\n<p>Enter the new <code>git</code> folder with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">practice</span>\n</code></pre></div>\n<p>At this point, when you type <code>pwd</code>, your folder structure should look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/&lt;</span><span class=\"n\">username</span><span class=\"o\">&gt;/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">practice</span>\n</code></pre></div>", "order": 3}}, {"model": "lesson.lesson", "pk": 510, "fields": {"title": "Setting Up Git", "created": "2020-07-15T22:01:46.817Z", "updated": "2020-07-15T22:01:46.817Z", "workshop": 57, "text": "<p>Our first step in working with Git is letting the software know who we are so it can track our work and attribute our contributions. Through this section, you'll be checking your installation and configuring Git with your own name and information.</p>\n<h2>Check Your Install</h2>\n<p>Let's make sure Git has been successfully installed. In your terminal, type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"c1\">--version</span>\n</code></pre></div>\n<p>If you see a version number, you're all set. If not, click <a href=\"http://git-scm.com/downloads\">here</a> and install as you would any other software on your system.</p>\n<h2>Configuring Git on Your Computer</h2>\n<p>Next, let's configure git so that it can identify who we are. This information is useful because it connects identifying information with the changes you make in your repository. </p><p>\nType the following into your command line, filling in the sections\u2014below labeled \"John Doe\"\u2014for your name and email (use quotations where you see them). This does not necessarily need to be the name and email you used to sign up for GitHub. Remember, these are different spaces and softwares.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"c1\">--global user.name \"John Doe\"</span>\n<span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"c1\">--global user.email johndoe@example.com</span>\n</code></pre></div>\n<p>To check your set-up, use:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">config</span> <span class=\"c1\">--list</span>\n</code></pre></div>\n<p>You'll get something that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Superstar</span><span class=\"w\"> </span><span class=\"n\">Git</span><span class=\"w\"> </span><span class=\"k\">User</span><span class=\"w\"></span>\n<span class=\"k\">user</span><span class=\"p\">.</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">gitsuperstar</span><span class=\"nv\">@gmail</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"w\"></span>\n</code></pre></div>", "order": 4}}, {"model": "lesson.lesson", "pk": 511, "fields": {"title": "Creating a Syllabus with Markdown", "created": "2020-07-15T22:01:46.826Z", "updated": "2020-07-15T22:01:46.826Z", "workshop": 57, "text": "<p>The next step is to <strong>initialize</strong> the project folder that we want Git to track. When we initialize a folder, we are telling Git to pay attention to it. This only needs to happen once because what is actually happening through this process is Git is adding a hidden subfolder within your folder that houses the internal data structure required for version control. </p><p>\nFirst, use <code>cd</code>, navigate to the <code>git-practice</code> folder inside <code>projects</code>. From your home directory, type:</p><p>\n    cd Desktop/projects/git-practice</p><p>\nNext we're going to <strong>initialize</strong> our repository using the following command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">init</span>\n</code></pre></div>\n<p>You should see output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Initialized</span> <span class=\"n\">empty</span> <span class=\"n\">Git</span> <span class=\"n\">repository</span> <span class=\"k\">in</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">patrick</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"o\">/</span>\n</code></pre></div>\n<p>Now Git is tracking our directory. Importantly, it has not done any versioning yet. There is no history of changes as of yet: 1) because there are no files and we haven't made any changes, 2) becuase we have to tell Git when to take a snapshot, which we go through in the next section. For now, Git knows this folder exists and is prepared to take a snapshot of the files when you tell it to.</p><p>\nBefore version control is useful, we'll have to create a text file for Git to track. For this session, the file we will track will be a course syllabus\u2014we'll create that next.</p>\n<h3>Creating a Syllabus in Markdown</h3>\n<p>To create a plain text file, we're going to switch to our text editor, VS Code, to create and edit a file named <code>syllabus.md</code> and save it to our 'git-practice' folder. If you have not installed VS Code, review <a href=\"https://github.com/DHRI-Curriculum/install/blob/master/sections/vscode.md\">the installation instructions here</a>.</p><p>\nIn terminal, check to make sure you are in your <code>git-practice</code> folder. (HINT: use 'pwd' to see what directory you are currently in) Next, type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">syllabus</span><span class=\"p\">.</span><span class=\"n\">md</span>\n</code></pre></div>\n<p>to open a <code>syllabus.md</code> file in VS Code. You should see a window appear that looks similar to this:</p><p>\n<img alt=\"Image of what VS Code looks like when opening the syllabus.md file\" src=\"/static/images/lessons/git/vscode1.png\"/></p><p>\nIf VS Code does not open when you use the <code>code</code> command in your terminal, open it using the Start Menu on Windows or Spotlight Search on Mac OS as you would any other software. Then click <code>File &gt; Open File</code> and use the dialog to navigate to the <code>/Users/&lt;your-name&gt;/Desktop/projects/git</code> folder and create a <code>syllabus.md</code> file there.</p><p>\nWe'll be typing our markdown into this file in the VS Code window. At any time, you can save your file by hitting <code>Control-s</code> on Windows or <code>\u2318-s</code> on Mac OS. Alternatively, you can click the <code>File</code> menu on the top right, then select <code>Save</code> from the dropdown menu.</p><p>\nSaving frequently is advised. When we get to the version contol functionality of Git, only changes that are saved will be preserved when a version is created. </p>\n<h2>Using Markdown</h2>\n<p>We'll be using markdown to write a syllabus, and then using Git to track any changes we make to it. Markdown allows us to format textual features like headings, emphasis, links, and lists in a plain text file using a streamlined set of notations that humans can interpret without much training. Markdown files usually have a <code>.md</code> extension.</p><p>\nIn markdown, we insert headings with a single hash mark like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">#</span> <span class=\"n\">My</span> <span class=\"n\">Syllabus</span> <span class=\"n\">Heading</span>\n</code></pre></div>\n<p>A sub-heading (H2) heading uses two hash marks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">##</span> <span class=\"n\">Readings</span>\n</code></pre></div>\n<p>To provide emphasis, place asterisks around some text:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">*</span><span class=\"n\">This</span> <span class=\"nb\">text</span> <span class=\"n\">will</span> <span class=\"n\">appear</span> <span class=\"n\">italicized</span><span class=\"p\">.</span><span class=\"o\">*</span>\n<span class=\"o\">**</span><span class=\"n\">This</span> <span class=\"nb\">text</span> <span class=\"n\">will</span> <span class=\"n\">appear</span> <span class=\"n\">bold</span><span class=\"p\">.</span><span class=\"o\">**</span>\n</code></pre></div>\n<p>For emphasis, you need to mark where it should start and where it should end, so you need astrisks at the beginning and end of whatever text is being emphasized.</p><p>\nTo create a bulleted list, put a hyphen at the beginning of each list item:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">-</span> <span class=\"n\">Reading</span> <span class=\"n\">one</span>\n<span class=\"o\">-</span> <span class=\"n\">Reading</span> <span class=\"n\">two</span>\n<span class=\"o\">-</span> <span class=\"n\">Reading</span> <span class=\"n\">three</span>\n</code></pre></div>\n<p>To create a link, put the anchor text (the text you will see) in square brackets and the URL in parentheses. Don't put a space between them:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">I</span> <span class=\"n\">teach</span> <span class=\"k\">at</span> <span class=\"p\">[</span><span class=\"n\">The</span> <span class=\"n\">Graduate</span> <span class=\"n\">Center</span><span class=\"p\">,</span> <span class=\"n\">CUNY</span><span class=\"p\">](</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"p\">.</span><span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"n\">cuny</span><span class=\"p\">.</span><span class=\"n\">edu</span><span class=\"p\">).</span>\n</code></pre></div>\n<p>Paragraphs of text are denoted by putting a blank line between them:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">This</span> <span class=\"nv\">is</span> <span class=\"nv\">a</span> <span class=\"nv\">paragraph</span> <span class=\"nv\">in</span> <span class=\"nv\">markdown</span>. <span class=\"nv\">It</span><span class=\"s1\">'</span><span class=\"s\">s separated from the paragraph below with a blank line. If you know HTML, it</span><span class=\"s1\">'</span><span class=\"nv\">s</span> <span class=\"nv\">kind</span> <span class=\"nv\">of</span> <span class=\"nv\">like</span> <span class=\"nv\">the</span> \\<span class=\"o\">&lt;</span><span class=\"nv\">p</span><span class=\"o\">&gt;</span> <span class=\"nv\">tag</span>. <span class=\"nv\">That</span> <span class=\"nv\">means</span> <span class=\"nv\">that</span> <span class=\"nv\">there</span> <span class=\"nv\">is</span> <span class=\"nv\">a</span> <span class=\"nv\">little</span> <span class=\"nv\">space</span> <span class=\"nv\">before</span> <span class=\"nv\">and</span> <span class=\"nv\">after</span> <span class=\"nv\">the</span> <span class=\"nv\">paragraph</span> <span class=\"nv\">when</span> <span class=\"nv\">it</span> <span class=\"nv\">is</span> <span class=\"nv\">rendered</span>.\n<span class=\"nv\">This</span> <span class=\"nv\">is</span> <span class=\"nv\">a</span> <span class=\"nv\">second</span> <span class=\"nv\">paragraph</span> <span class=\"nv\">in</span> <span class=\"nv\">markdown</span>, <span class=\"nv\">which</span> <span class=\"nv\">I</span><span class=\"s1\">'</span><span class=\"s\">ll use to tell you what I like about markdown. I like markdown because it looks pretty good, if minimal, whether you</span><span class=\"s1\">'</span><span class=\"nv\">re</span> <span class=\"nv\">looking</span> <span class=\"nv\">at</span> <span class=\"nv\">the</span> <span class=\"nv\">rendered</span> <span class=\"nv\">or</span> <span class=\"nv\">unrendered</span> <span class=\"nv\">version</span>. <span class=\"nv\">It</span><span class=\"s1\">'</span><span class=\"s\">s like tidy HTML.</span>\n</code></pre></div>", "order": 5}}, {"model": "lesson.lesson", "pk": 512, "fields": {"title": "Staging and Committing Changes", "created": "2020-07-15T22:01:46.836Z", "updated": "2020-07-15T22:01:46.836Z", "workshop": 57, "text": "<p>Git's primary function is version control, or to track a project as it exists at different points in time. Now that we have a file to track\u2014our markdown syllabus\u2014let's use Git to save the current state of the repository as it exists now.</p>\n<h2>A Metaphor for Adding and Committing</h2>\n<p>In Git, a <strong>commit</strong> is a snapshot of a repository that is entered into its permanent history. To commit a change to a repository, we take two steps:</p><p>\n1. Adding files to a \"staging area,\" meaning that we intend to commit them. </p><p>\n2. Finalizing the commit.</p><p>\nStaging a file or files is you telling Git, \"Hey! Pay attention these files and the changes in them\".</p><p>\nMaking a commit is a lot like taking a photo. First, you have to decide who will be in the photo and arrange your friends or family in front of the camera (the staging process). Once everyone is present and ready, you take the picture, entering that moment into the permanent record (the commit process).</p>\n<h2>Staging Changes with the Add Command</h2>\n<p>First, let's see what state Git is currently in. It's a good idea to use this command before and after doing anything in Git so you can always be on the same page as the computer.</p><p>\nMake sure you're in your <code>/home/&lt;your-name&gt;/Desktop/projects/git-practice</code> directory using the <code>pwd</code> command in the terminal. Once you're there, enter this command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">status</span>\n</code></pre></div>\n<p>You should see output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">On</span> <span class=\"nv\">branch</span> <span class=\"nv\">master</span>\n<span class=\"nv\">No</span> <span class=\"nv\">commits</span> <span class=\"nv\">yet</span>\n<span class=\"nv\">Untracked</span> <span class=\"nv\">files</span>:\n  <span class=\"ss\">(</span><span class=\"nv\">use</span> <span class=\"s2\">\"</span><span class=\"s\">git add &lt;file&gt;...</span><span class=\"s2\">\"</span> <span class=\"nv\">to</span> <span class=\"k\">include</span> <span class=\"nv\">in</span> <span class=\"nv\">what</span> <span class=\"nv\">will</span> <span class=\"nv\">be</span> <span class=\"nv\">committed</span><span class=\"ss\">)</span>\n    <span class=\"nv\">syllabus</span>.<span class=\"nv\">md</span>\n<span class=\"nv\">nothing</span> <span class=\"nv\">added</span> <span class=\"nv\">to</span> <span class=\"nv\">commit</span> <span class=\"nv\">but</span> <span class=\"nv\">untracked</span> <span class=\"nv\">files</span> <span class=\"nv\">present</span> <span class=\"ss\">(</span><span class=\"nv\">use</span> <span class=\"s2\">\"</span><span class=\"s\">git add</span><span class=\"s2\">\"</span> <span class=\"nv\">to</span> <span class=\"nv\">track</span><span class=\"ss\">)</span>\n</code></pre></div>\n<p>This means we've initialized our repository, but haven't made any commits yet. If you're instead getting a message that begins with the word <code>fatal</code> when you use <code>git status</code>, you may be in the wrong directory or perhaps you haven't run the <code>git init</code> command on your directory yet.</p><p>\nLet's follow the recommendation in the status message above and use the <code>add</code> command to stage files, making them ready to be committed.</p><p>\nType this command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">add</span> <span class=\"n\">syllabus</span><span class=\"p\">.</span><span class=\"n\">md</span>\n</code></pre></div>\n<p>You should see no output from the command line, meaning that the above command succeeded. Let's run <code>git status</code> again to check if things have changed. You should see output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">On</span> <span class=\"n\">branch</span> <span class=\"n\">master</span>\n<span class=\"k\">No</span> <span class=\"n\">commits</span> <span class=\"n\">yet</span>\n<span class=\"n\">Changes</span> <span class=\"k\">to</span> <span class=\"n\">be</span> <span class=\"k\">committed</span><span class=\"p\">:</span>\n  <span class=\"p\">(</span><span class=\"n\">use</span> <span class=\"ss\">\"git rm --cached &lt;file&gt;...\"</span> <span class=\"k\">to</span> <span class=\"n\">unstage</span><span class=\"p\">)</span>\n    <span class=\"k\">new</span> <span class=\"n\">file</span><span class=\"p\">:</span>   <span class=\"n\">syllabus</span><span class=\"p\">.</span><span class=\"n\">md</span>\n</code></pre></div>\n<p>The <code>new file:   syllabus.md</code> should be highlighted in green to show that it's ready for commit. </p><p>\nThis is Git telling you, \"Ok, I see the file(s) you're talking about.\" </p>\n<h2>Committing Changes</h2>\n<p>Now that our files have been staged, let's commit them, making them part of the permanent record of the repository. Type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"k\">commit</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"ss\">\"Initial commit of syllabus file\"</span>\n</code></pre></div>\n<p>The <code>-m</code> flag provides a message along with the commit that will tell others\u2014or remind a future version of yourself\u2014what the commit was all about. Try not to type <code>git commit</code> without the <code>-m</code> flag\u2014there's a note about this below.</p><p>\nAfter running the command, you should see output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">master</span> <span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">-</span><span class=\"k\">commit</span><span class=\"p\">)</span> <span class=\"mi\">8</span><span class=\"n\">bb8306</span><span class=\"p\">]</span> <span class=\"n\">Initial</span> <span class=\"k\">commit</span> <span class=\"k\">of</span> <span class=\"n\">syllabus</span> <span class=\"n\">file</span>\n <span class=\"mi\">1</span> <span class=\"n\">file</span> <span class=\"n\">changed</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">insertions</span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">),</span> <span class=\"mi\">0</span> <span class=\"n\">deletions</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"p\">)</span>\n <span class=\"k\">create</span> <span class=\"k\">mode</span> <span class=\"mi\">100644</span> <span class=\"n\">syllabus</span><span class=\"p\">.</span><span class=\"n\">md</span>\n</code></pre></div>\n<p>This means you have successfully made your first commit in the repository\u2014congratulations!</p><p>\nLet's check the state of our repository after the commit with <code>git status</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">On</span> <span class=\"n\">branch</span> <span class=\"n\">master</span>\n<span class=\"k\">nothing</span> <span class=\"k\">to</span> <span class=\"k\">commit</span><span class=\"p\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n</code></pre></div>\n<p>This means that everything in the repository is successfully committed and up-to-date. If you edit your syllabus file or create a new file in the repository, the message you get with <code>git status</code> will instead list files that have uncommitted changes.</p><p>\nLet's run one other command to see the effect our commit has had. Enter this command:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">log</span>\n</code></pre></div>\n<p>You should see output similar to this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">commit</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">bb8306c1392eed52d4407eb16867a49b49a46ac</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">HEAD</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">master</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nl\">Author</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Patrick</span><span class=\"w\"> </span><span class=\"n\">Smyth</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">patricksmyth01</span><span class=\"nv\">@gmail</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"nc\">Date</span><span class=\"err\">:</span><span class=\"w\">   </span><span class=\"n\">Sun</span><span class=\"w\"> </span><span class=\"n\">May</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"err\">:</span><span class=\"mi\">03</span><span class=\"err\">:</span><span class=\"mi\">39</span><span class=\"w\"> </span><span class=\"mi\">2018</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">0400</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Initial</span><span class=\"w\"> </span><span class=\"k\">commit</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"n\">syllabus</span><span class=\"w\"> </span><span class=\"k\">file</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the log of commits, comprising a history of your repository. There's only one commit here now, though. If you don't see a prompt (the <code>$</code>) after running <code>git log</code>, you may need to press the <code>q</code> key (just the <code>q</code> key by itself) to return to the command line.</p>\n<h2>Why Do We Need to Use the -m Flag?</h2>\n<p>The -m flag is useful for human purposes and technical purposes. For human purposes, the -m flag helps you keep track of the changes you're making. Version control is most useful when you can confidently return to a specific version. It can also help you be more structured in your approach to making changes - your notes to self are limited, so to make them clear you might make commits after specific tasks are completed, such as update readings for week 1 or added S.Noble reading. This can also make it easier to reverse a specific change in the future. </p><p>\nAlso, if you type <code>git commit</code> by itself, git will open the command line's default text editor to allow you to enter the commit message. Unfortunately, the default text editor, <code>vi</code>, requires some knowledge to use, and we don't teach it as part of our sessions.</p><p>\nIf you find yourself stuck in an unfamiliar screen in the command line after running <code>git commit</code>, you're probably in <code>vi</code>. Type this to leave that environment and return to the <code>$</code> prompt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">:</span><span class=\"n\">q</span>\n</code></pre></div>\n<p>If you're ever stuck or \"trapped\" on the command line, try running through these common exit commands to return to the prompt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Control</span><span class=\"o\">-</span><span class=\"k\">c</span>\n<span class=\"n\">Control</span><span class=\"o\">-</span><span class=\"n\">d</span>\n<span class=\"n\">q</span>\n<span class=\"p\">:</span><span class=\"n\">q</span>\n</code></pre></div>\n<p><code>Control-c</code> attempts to abort the current task and restore user control. <code>Control-d</code> escapes the current shell environment\u2014if you use it at the normal <code>$</code> prompt, it will end the current command line session. <code>q</code> is used to escape from specific utilities like <code>less</code>. <code>:q</code> first changes the mode in <code>vi</code>, allowing you to enter the <code>q</code> key to quit, so it's a command specific to <code>vi</code>.</p>", "order": 6}}, {"model": "lesson.lesson", "pk": 513, "fields": {"title": "Pushing to GitHub", "created": "2020-07-15T22:01:46.838Z", "updated": "2020-07-15T22:01:46.838Z", "workshop": 57, "text": "<p>Now, you may want to backup or share that file on the Internet. Let's connect the directory you made on your local machine to GitHub, on the web. </p><p>\nRemember, GitHub is a service that allows you to host files, collaborate, and find the work of others. Once our syllabus is on GitHub, it will be publicly visible. Note that repositories on GitHub can also be private.</p><p>\nGo to GitHub in your browser and click the plus sign in the upper right hand corner.</p><p>\n<img alt=\"You can find the plus sign button to add a repo on the top right of github\" src=\"/static/images/lessons/git/addrepo.png\"/></p><p>\nAfter clicking the plus button, select <code>New repository</code> from the dropdown menu.</p><p>\n<img alt=\"The dropdown menu where you select New Repository\" src=\"/static/images/lessons/git/createrepo.png\"/></p><p>\nAfter clicking <code>New repository</code>, you'll have to enter some information, including a name and description for your repository.</p><p>\n<img alt=\"Screen on GitHub where you enter your repository information\" src=\"/static/images/lessons/git/createrepo2.png\"/></p><p>\n- Choose a name, such as <code>git-practice</code>.</p><p>\n- Enter a description, such as <code>Test syllabus for learning Git and GitHub</code>.</p><p>\n- Keep the <code>Public \u2014 Anyone can see this repository</code> selector checked.</p><p>\n- Do <em>not</em> select <code>Initialize this repository with a README</code> since you will be importing an existing repository from your computer.</p><p>\n- Click <code>Create repository</code>.</p><p>\nYou should end up inside your newly created git-practice repo. It will look like a set of instructions that you might want to use to connect your GitHub repository to a local repository.</p><p>\nThe instructions we want consist of two lines underneath the heading <code>...or push an existing repository from the command line</code>. The hand in this screenshot points to where these directions are on the page:</p><p>\n<img alt=\"The commands you need to copy from the new repo page on GitHub\" src=\"/static/images/lessons/git/connect-repo.png\"/></p><p>\nCopy out the first command and paste it in your terminal. It should look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">remote</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"n\">origin</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"nv\">@github</span><span class=\"p\">.</span><span class=\"nl\">com</span><span class=\"p\">:</span><span class=\"o\">&lt;</span><span class=\"n\">username</span><span class=\"o\">&gt;/&lt;</span><span class=\"n\">repository</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"n\">git</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You'll need the command copied from your new repo, since it will contain the correct URL.</p><p>\nNext, paste the second command. It will look exactly like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"o\">-</span><span class=\"n\">u</span> <span class=\"n\">origin</span> <span class=\"n\">master</span>\n</code></pre></div>\n<p>After running this command, you should see output that looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Total</span> <span class=\"mi\">4</span> <span class=\"p\">(</span><span class=\"n\">delta</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">reused</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">delta</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">remote</span><span class=\"p\">:</span> <span class=\"n\">Resolving</span> <span class=\"n\">deltas</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"mi\">3</span> <span class=\"k\">local</span> <span class=\"n\">objects</span><span class=\"p\">.</span>\n<span class=\"k\">To</span> <span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"p\">:</span><span class=\"o\">&lt;</span><span class=\"n\">repo</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">&gt;/</span><span class=\"n\">git</span><span class=\"p\">.</span><span class=\"n\">git</span>\n   <span class=\"mi\">916998</span><span class=\"n\">f</span><span class=\"p\">..</span><span class=\"mi\">9779</span><span class=\"n\">fa7</span>  <span class=\"n\">master</span> <span class=\"o\">-&gt;</span> <span class=\"n\">master</span>\n</code></pre></div>\n<p>If you see output like this, go back to your new repository page in the browser and click the <code>Refresh</code> button. You should see your <code>syllabus.md</code> file on GitHub!</p>\n<h2>Review</h2>\n<p>We have covered the basic steps of creating a file and tracking changes within a file on your local machine and on GitHub. </p><p>\nThis has involved coordinating across three different environments, so let's go through that one more time. Note that this process is very slightly different. I'll highlight it when it comes up. </p><p>\nTo start, let's add something to our syllabus. Another week of materials or a new reading. </p><p>\nSave that file. </p><p>\nUse <code>git add</code> via the command line to stage the file - tell Git what document you want it to pay attention to. </p><p>\nUse <code>git commit</code> via the command line to save the changes you've just made as a snapshot or new version of you file. Remember to use the -m flag and include a message about the change you just made. </p><p>\nSo far, we have not done anything with GitHub or on the Internet. We have used Git, installed on our local machine, to save a version of file as it stands now. We could stop here if we only had an interest in using Git for version control. But if we also wanted to use GitHub to back up our files, or to share our project with a team or publicly, we want to upload, or push, that repository to GitHub on the Internet. </p><p>\nUse <code>git push origin master</code> to push that file to your repository on GitHub. After refreshing the webpage, your file should appear online. <strong>The difference I noted above appears here.</strong> Note the absense of the <code>-u</code> flag from the command. That flag was used the first time to establish the connection between the repository on your local machine and on GitHub. Now that that connection has been established, that flag is not needed.   </p>", "order": 7}}, {"model": "lesson.lesson", "pk": 514, "fields": {"title": "Cloning & Forking", "created": "2020-07-15T22:01:46.853Z", "updated": "2020-07-15T22:01:46.853Z", "workshop": 57, "text": "<p>GitHub was built for sharing and collaborating on projects. A key advantage of the platform is that you can find lots of bits of software that do many different things - such as code for plugins for WordPress or Leaflet. Increasingly, you might find syllabi or open writing projects. If a project is public, you can save a copy of it to your loca machine, work on it, save your admendations and share it on your own GitHub account. Like we've already mentioned, GitHub usefully helps track attribution along the way.</p><p>\nCloning and forking are the basic functions of this capability. Each are first explained below, and followed by an example and activity to further explain. </p>\n<h2>Cloning</h2>\n<p><strong>Cloning</strong> a repository means making a copy of a repository on GitHub, to download and work on locally - on your local machine. By entering the following code into your terminal, you can clone any public directory on GitHub: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"o\">&lt;</span><span class=\"n\">repository</span><span class=\"o\">-</span><span class=\"n\">url</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>When you clone a repository from GitHub, the folder that shows up on your local machine comes built-in with a few things. First, Git is already present, so you don't need to initialize the folder. Also, the connection between your local copy and the online repository is already made, so <code>git push origin master</code> will work (no -u flag needed). </p><p>\nFor practice, let's clone the repository for this workshop about Git and GitHub.</p><p>\nFirst, let's navigate back to your Desktop folder.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span>\n</code></pre></div>\n<p>Remember that the ~ refers to your home directory. Now let's find the URL we need to clone the lesson.</p><p>\nFirst, follow <a href=\"https://github.com/DHRI-Curriculum/git\">this link to the main page of this lesson on Git and GitHub</a>.</p><p>\nOn the main page, there should be a green <code>Clone or download</code> button on the right side:</p><p>\n<img alt=\"Image pointing out where the clone or download button is on GitHub\" src=\"/static/images/lessons/git/clone.png\"/></p><p>\nClick the green button and you will see a box with highlighted text under a heading that says <code>Clone with HTTPS</code>. If you instead see <code>Cloning with SSH</code>, click the small link that says <code>Use HTTPS</code>.</p><p>\nNow copy out the text in the box:</p><p>\n<img alt=\"Image showing where the text you need to copy is located\" src=\"/static/images/lessons/git/copy-clone-text.png\"/></p><p>\nNow that you have the text copied, go back to your terminal. Remember, you should be on the desktop.</p><p>\nType</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"o\">&lt;</span><span class=\"n\">copied</span><span class=\"o\">-</span><span class=\"n\">url</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>If the command is successful, the full Git lesson will be replicated on your local machine. You can type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cd</span> <span class=\"n\">git</span>\n</code></pre></div>\n<p>to enter the lesson folder, since the lesson repository is simply called <code>git</code>. Use the <code>ls</code> command to take a look at the various files in the lesson folder.</p><p>\nCloning can be especially useful when you're joining a group project that is hosted on GitHub, and you want your changes to eventually be pushed and shared with that same repository. </p><p>\nBut maybe that is not possible or ideal. Maybe you don't want to contribute your changes to someone else's repository. Maybe you want to make a derivative of their folder for yourself, on your GitHub account, and make changes there.</p><p>\nForking is the step you could take before cloning to do this.</p>\n<h2>Forking</h2>\n<p><strong>Forking</strong> a repository means making a copy of someone else's repository on GitHub, and saving it to your account on GitHub. This function happens within GitHub, and has nothing to do with what is happening on your local machine. </p><p>\nFor example, go to <a href=\"https://github.com/DHRI-Curriculum/git\">the repository for this workshop</a> on GitHub. Note the <code>Fork</code> button in the upper right hand corner.</p><p>\n<strong>ADD SCREENSHOT.</strong></p><p>\nBy clicking that button copying, or forking, this repository to your account. In the upper left hand corner, it would say your account name instead of <code>DHRI-Curriculum</code>, instead it will reference our account below after <code>forked from</code>. </p><p>\n<strong>ADD SCREENSHOT</strong></p><p>\nYour local machine would come into play when you want to <strong>clone</strong> that repository so you can work on it locally. This also means that when you push those changes to GitHub, you would be pushing them to a forked repository associated with your own account. </p><p>\nYou might use this method if you were going to teach your own Git &amp; GitHub workshop. You could use our repository as a base for getting started, and add more examples or change some language, clarify something further, or create a connection to another workshop you are giving, etc. This allows us to continue to use the workshop as we have it as well. Also, maybe at a later time, we want to merge some of your changes with ours. We can do that too by revisiting your version history. </p>", "order": 8}}, {"model": "lesson.challenge", "pk": 89, "fields": {"lesson": 511, "title": "", "text": "<p>Use these five elements\u2014headings, emphasis, lists, links, and paragraphs\u2014to create a syllabus. Have a main heading that gives the course title (one <code>#</code>), then subheadings for, at least, course info and readings. Use emphasis (<code>*</code>) for book titles and try to get a list in there somewhere.</p>\n<p>You can look at an example syllabus in raw text form <a href=\"https://raw.githubusercontent.com/DHRI-Curriculum/git/master/sections/syllabus.md\">here</a>. When it's rendered by GitHub, it looks like <a href=\"https://github.com/DHRI-Curriculum/git/blob/master/sections/syllabus.md\">this</a>. When editing the markdown file in VS Code, it might look like this:</p>\n<p><img alt=\"What your markdown might look like when typed into VS Code\" src=\"../images/vscode2.png\" /></p>\n<p>VS Code also has a preview feature for your markdown. Hit the preview button on the top right while editing your markdown file:</p>\n<p><img alt=\"Button to hit to get a preview in VS Code\" src=\"../images/vscode3.png\" /></p>\n<p>You'll get two side-by-side panels. Your markdown file will be on the left, and your rendered preview will be on the right:</p>\n<p><img alt=\"Side by side markdown and preview in VS Code\" src=\"../images/vscode4.png\" /></p>\n<p>Remember to save your work with <code>Control-s</code> on Windows or <code>\u2318-s</code> on Mac OS.</p>"}}, {"model": "lesson.challenge", "pk": 90, "fields": {"lesson": 513, "title": "", "text": "<p>Go through the process a few more times by adding additional readings and weeks of course material. Remember to commit changes intentionally so your commit messages make sense. Use <code>git log</code> to review your changes. </p>\n<p>Also try creating a new file and adding an assignment. Rewrite the assignment using Markdown, or edit and add in the markers. Go through the process of staging and commiting that file, and pushing it to your repository on GitHub. </p>\n<p><strong>Test your understanding by thinking through the following questions:</strong> </p><p>\n- Do you need to push the file to GitHub each time you commit changes to the file, or can you make several commits to a file and push them all to GitHub at once? </p><p>\n- Do you need to use <code>git init</code> after after adding an assignment file to your folder? </p><p>\n- What about the -u flag in the git push origin master? Does this flag need to be used to add the assignment to your repository on GitHub?</p>"}}, {"model": "lesson.challenge", "pk": 91, "fields": {"lesson": 514, "title": "", "text": "<p>You made it to the end of this workshop-congratulations! Now, practice your new skills:</p>\n<ol>\n<li>Fork and clone <a href=\"https://github.com/DHRI-Curriculum/git\">the repository for this workshop</a>. Note not only <em>what</em> you are doing, but also <em>where</em> you working when completing these two different tasks.</li>\n<li>Make changes to the files on your local machine. Remember to save them!</li>\n<li>Use the 3-step process of stage, commit and push to return the amended files to the repository on GitHub.</li>\n</ol>"}}, {"model": "frontmatter.ethicalconsideration", "pk": 138, "fields": {"frontmatter": 57, "label": "Within the nebulous open-source ecosystem, GitHub is an important place for storing and finding code. What if your open source code was used by an entity or for a purpose that did not agree with your ethics? For example, the platform received backlash from employees of GitHub and users of the platform when it was revealed that they held a contract with ICE. In this case, neither group wanted their code shared and used by ICE in detaining and deporting immigrants. [Read more here.](https://www.theatlantic.com/technology/archive/2020/01/ice-contract-github-sparks-developer-protests/604339/)"}}, {"model": "frontmatter.learningobjective", "pk": 392, "fields": {"frontmatter": 57, "label": "Learn what Git, GitHub and Markdown are, how do they differ, and how they can be integrated to support your scholarly work."}}, {"model": "frontmatter.learningobjective", "pk": 393, "fields": {"frontmatter": 57, "label": "Learn what version control is and why it can be useful"}}, {"model": "frontmatter.learningobjective", "pk": 394, "fields": {"frontmatter": 57, "label": "Review basic Command line functions "}}, {"model": "frontmatter.learningobjective", "pk": 395, "fields": {"frontmatter": 57, "label": "Install and configure Git on your local machine - ('git--version'), ('git--config')"}}, {"model": "frontmatter.learningobjective", "pk": 396, "fields": {"frontmatter": 57, "label": "Practice using basic Markdown by Creating a Syllabus using a plain text editor (including headers, lists, bold, and emphasize)"}}, {"model": "frontmatter.learningobjective", "pk": 397, "fields": {"frontmatter": 57, "label": "Stage and committ changes using Git - ('git status'), ('git add'), ('git commit -m'), and ('git log')"}}, {"model": "frontmatter.learningobjective", "pk": 398, "fields": {"frontmatter": 57, "label": "Pushing repo with Git and files to GitHub ('git push origin master')"}}, {"model": "frontmatter.learningobjective", "pk": 399, "fields": {"frontmatter": 57, "label": "Cloning an existing repo on GitHub to your local machine so you can work with it - ('git clone')"}}, {"model": "frontmatter.contributor", "pk": 211, "fields": {"first_name": "Kristen", "last_name": "Hackett", "role": "Current author", "url": null}}, {"model": "frontmatter.contributor", "pk": 212, "fields": {"first_name": "Jojo Karlin", "last_name": "Patrick Sweeney", "role": "Past Contributors include", "url": null}}, {"model": "library.reading", "pk": 311, "fields": {"title": "", "url": "", "annotation": "Bryan, J. (2017). Excuse me, do you have a moment to talk about version control? PeerJ Preprints.", "zotero_item": null}}, {"model": "library.reading", "pk": 312, "fields": {"title": "", "url": "", "annotation": "Ovadia, S. (2014). Markdown for Librarians and Academics. Behavioral and Social Sciences Librarian, 33, 120-124. ", "zotero_item": null}}, {"model": "library.reading", "pk": 313, "fields": {"title": "GitHub for Academics: the open-source way to host, create and curate knowledge", "url": "https://blogs.lse.ac.uk/impactofsocialsciences/2013/06/04/github-for-academics", "annotation": "Shaffer, K. (June 4, 2013). [GitHub for Academics: the open-source way to host, create and curate knowledge](https://blogs.lse.ac.uk/impactofsocialsciences/2013/06/04/github-for-academics/) LSE Blog.", "zotero_item": null}}, {"model": "library.reading", "pk": 314, "fields": {"title": "Collaborative Writing on GitHub", "url": "https://oleb.net/blog/2016/02/collaborative-writing-on-github", "annotation": "Begemann, O. (2016). [Collaborative Writing on GitHub](https://oleb.net/blog/2016/02/collaborative-writing-on-github/).", "zotero_item": null}}, {"model": "library.reading", "pk": 315, "fields": {"title": "How Digital Humanists Use GitHub", "url": "https://digitalscholarship.wordpress.com/2016/07/20/presentation-on-how-digital-humanists-use-github", "annotation": "[How Digital Humanists Use GitHub](https://digitalscholarship.wordpress.com/2016/07/20/presentation-on-how-digital-humanists-use-github/): A presentation from Lisa Spiro and Sean Morey-Smith on their study of how Digital Humanists use GitHub.", "zotero_item": null}}, {"model": "library.project", "pk": 147, "fields": {"title": "GCDI's digital research institute", "url": "https://github.com/DHRI-Curriculum", "annotation": "[GCDI's digital research institute](https://github.com/DHRI-Curriculum) has been improved and built out over time using GitHub to store and track multiple projects that use the same base of repositories, and new versions.", "zotero_item": null}}, {"model": "library.project", "pk": 148, "fields": {"title": "Chinese", "url": "https://github.com/labuladong/fucking-algorithm", "annotation": "F-ing Algorithm project uses Git and GitHub to create multiple versions of their project in different languages - ([Chinese](https://github.com/labuladong/fucking-algorithm) and [English](https://github.com/labuladong/fucking-algorithm/tree/english)), and to create a [GitBook](https://labuladong.gitbook.io/algo-en/i.-dynamic-programming/analysisofdynamicprogramming) for sharing their work. ", "zotero_item": null}}, {"model": "library.project", "pk": 149, "fields": {"title": "a syllabus using a GitHub repo", "url": "https://github.com/quinnanya/dlcl204", "annotation": "Here are two examples of using Git and GitHub for teaching - [a syllabus using a GitHub repo](https://github.com/quinnanya/dlcl204) and [a syllabus using a repo and GitPages](https://digitalhistory.github.io/).", "zotero_item": null}}, {"model": "library.project", "pk": 150, "fields": {"title": "Fake New Corpus", "url": "https://github.com/several27/FakeNewsCorpus", "annotation": "[Fake New Corpus](https://github.com/several27/FakeNewsCorpus), an open source dataset composed of millions of news articles mainly intended for use in training deep learning algorithms for purpose of fake news recognition. The dataset is still work in progress and for now, the public version includes only 9,408,908 articles.", "zotero_item": null}}, {"model": "library.project", "pk": 151, "fields": {"title": "C+=", "url": "https://github.com/TheFeministSoftwareFoundation/C-plus-Equality", "annotation": "[C+=](https://github.com/TheFeministSoftwareFoundation/C-plus-Equality), a feminist programming language, created by The Feminist Software Foundation to smash the toxic Patriarchy that is inherent in and that permeates all current computer programming languages.", "zotero_item": null}}, {"model": "library.project", "pk": 152, "fields": {"title": "Leaflet", "url": "https://github.com/Leaflet/Leaflet", "annotation": "[Leaflet](https://github.com/Leaflet/Leaflet), an open-source Javascript library for building mobile-friendly interactive maps.", "zotero_item": null}}, {"model": "library.tutorial", "pk": 159, "fields": {"label": "An intro to Git: What it is and how to use it", "url": "https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61", "annotation": "[An intro to Git: What it is and how to use it](https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/)", "zotero_item": null}}, {"model": "library.tutorial", "pk": 160, "fields": {"label": "Getting Started with GitHub", "url": "https://help.github.com/en/github/getting-started-with-github", "annotation": "[Getting Started with GitHub](https://help.github.com/en/github/getting-started-with-github)", "zotero_item": null}}, {"model": "website.page", "pk": 1, "fields": {"name": "Workshops", "slug": "workshops", "text": "<p class=\"lead\">This is the workshop page.</p>", "template": "workshop/workshop-list.html", "is_homepage": false}}, {"model": "website.page", "pk": 2, "fields": {"name": "About", "slug": "about", "text": "<p class=\"lead\">This is the about page.</p>", "template": "website/page.html", "is_homepage": false}}, {"model": "website.page", "pk": 3, "fields": {"name": "Library", "slug": "library", "text": "<p class=\"lead\">This is the library page.</p>", "template": "library/all-library-items.html", "is_homepage": false}}, {"model": "auth.group", "pk": 1, "fields": {"name": "Learner", "permissions": []}}]